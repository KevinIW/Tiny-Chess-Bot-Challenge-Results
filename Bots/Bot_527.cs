namespace auto_Bot_527;

using ChessChallenge.API;
using System;

// Stickleback
// by Brent Mardell

public class Bot_527 : IChessBot
{
    public Bot_527()
    {
        //unpack and decompress float and int values
        int i = 0, e;
        while (i < 1208)
        {
            e = ReadBits(11);
            weights[i++] = ((e & 1) != 0 ? -1.0f : 1.0f) * (e >> 1) / 512;
        }
        i = 0;
        while (i < 289)
        {
            e = ReadBits(1 << (ReadBits(2) + 1));
            structure[i++] = (e & 1) != 0 ? -(e >> 1) : e >> 1;
        }
    }

    /*private static readonly decimal[] data = {
25443971305733508680309444796m, 65166007057078033486885439169m, 43117723231672320874928155525m, 32812935968890263204294369284m,
29269967442830892233981235208m,   614193450870750248704151924m,  4159460855004263806958567683m, 10526497964774148745067654185m,
45934975894008284839651934500m, 39710974800351905484344067969m,   505746893143108128914547976m, 29722952950343079456508487683m,
37392106890682453340701081904m,   629695113559342107410434945m,  4179748423977817763448144920m,              3237494817161578m,
74701990368301004262219524640m, 41220999532728290734553960196m,        9705005857696622136379m, 28789989949770693458995970048m,
49813337795351276202284562273m,     7613037901029132471511077m, 31899333479272204680486390257m, 24994749179618303047190577488m,
24701726956215268021482971088m, 31284017374164109325881100336m,  9287880027077236055962440342m, 30059098982733086300894790770m,
43078277894763776755813072805m, 30639787565069544163746640925m, 21258496373330197852860523172m, 69973720228677016201888990371m,
 5147946326145492346687460102m, 31899485768454705683898753171m, 27335389501381046393495750937m, 41221372237641649501361305480m,
23679194079926527754409066516m, 34665044137304770225256546636m, 59735514974113738604349686096m,  6366600064340148492302597538m,
13930528185706229251914624293m, 16153683637089873824053362832m, 50843543540774409418180861026m,  4644069951671794745700576300m,
58223083409700947813846769907m, 54694279780032641057396230960m, 59991966404856019785981251075m,  8128441544812416463530891326m,
 1423242191664476726636753268m, 25960528665042262106870777025m,   213499645985625378856908810m, 26625838851038014654262750252m,
 2560510800158012646334136700m, 33100849452677808960688492330m,  2129163978196243783129042438m,  2808960837989617600680761916m,
24883334320309212214036316536m,   503489521081915352000108672m, 30027190434188459213139809328m,  7500568990937320313959981870m,
14860536595053556052020135428m, 10020108196475653291620189707m, 17840133557370724489418407147m,  2638482996506109374302537068m,
49537761442774253853834219495m, 20314112653136112010588128812m, 23227717266436580750317879323m, 14992099828682814061593822489m,
 4343297643025973090031779395m,  5267526209885772889690474025m, 51421116675548802317800141402m, 59675329393774756106206446400m,
 1315850407899996272598243083m, 36220409698708451157822662674m, 55836659823411963845505237860m, 60020843606484203594026061380m,
15629489031232415157980834829m, 78705917796249255224847571068m, 23053413342739616248491525512m, 39867625461971363616614540946m,
19190078593888285837443995735m, 36699382221377368931570807456m, 59725889294663170503197070241m,  3853415181012620090671115397m,
20914273720419603075362505963m, 43629613097961211181728205260m, 30760909696265748071014073283m,  2023536354660794921619972677m,
     911356392952185699750013m, 77206960809796609895325876795m, 39720491222251613671726811593m, 15328580484346799860882779187m,
 4984703832051572727625818326m, 45445972622073706811542997747m, 10180308862641525110456512262m, 73042326406412454357735920921m,
63306709883670575435265148292m, 42327629185212054029229819713m, 12698091491342401156752640316m, 39673928330745355900317335567m,
20044086921138374967234265649m,   117738742548479060088328652m, 21125793384001609548582440459m, 25473900659520692754769162610m,
54500871721220654908001327808m,  7623678023832682051904791718m, 37464945378997543171849772087m, 24968561847798857452620826772m,
60272394699234852891034791010m,  2209862470244144268340911387m, 58254529214473143223805667468m, 32240032208891499463429456570m,
61839550769992989834039417987m, 35374306652505332519269357111m, 57014468175729812113119241318m, 59687168408101142406532996641m,
41897780204484276168595631896m, 35464843460818377051417944135m, 15483406970317736530368324688m,   160285134838209385291534884m,
17881754697812058511407962626m,  8982322089139894584049961077m,  3325976911604966817581141560m,   373469438066511777356107222m,
33502552847179839974518308866m, 37892985602372051769168225174m, 16528533203253557197728648032m,  5243018589977246277337122176m,
73518502161167818637025740096m, 16170094239504566663491110340m, 51525358210746469187049559626m,  4115659766652323263963739476m,
 7766762602102109436494080544m, 25757390818386624039798247032m, 22612075019116101280686035906m,   777491193079472082677698718m,
11955733627309492617564541108m, 53025118056078931811085066146m, 41420619144812213593980236582m,  6916590909248135844961114725m,
27685711190919603290214394246m, 36467652512966832082232391193m,  8981426312490282284119152997m, 20445826012142023976675365012m,
12698866424293521603793531146m, 20833060432618525019261866180m, 34664249100070495179446950159m, 29712993847043277449052184916m,
 3172246207656576399178514442m, 20891017685546681016606807096m, 39815632050159183233904175109m, 49179151548659992755156560298m,
 5275850033310137984321401954m, 63159967671176204286868996752m, 28140272132229069842797465618m, 43966988776946613257108479280m,
20445463480004273319661678706m, 19919699906271658923427763380m,            112615606491793052m
};
//length=159  weights_length=139  structure_length=20
//model_name=model17  structure_name=model17*/
    private static readonly decimal[] data = {
29156882810186531199468900560m, 10711168963183979347519358769m,  3755192918567181838376510726m, 34981371432344033225014859782m,
55275773441306244064863015044m,   652821225796406470020895028m,      642297200167590250152195m, 13927281447313768722466869306m,
      33648888376115114508448m, 39933615513616154021349428672m,  1395554260031028849101772306m, 27250704592129296885650313278m,
  249058788901546809270207360m, 39730138707826431777258869120m,  6036998862496956017471972394m,              4855546579263488m,
  546538455994535836721492032m,   425730792387040726733037830m,         150637755553101694977m, 13948001170836653643753586688m,
 9918842497209091042720365602m,   936143606827038242332876840m, 22613276157915677218154072573m, 39891162644858550241904590888m,
24314965238145188855913278417m, 30357299401036890964854108209m, 74909584368543172453846299254m,   367810003675637585034610161m,
42304508886045897404732424868m, 21360303040778985993102830618m, 41047397210202244121818604556m, 30572461813356095863837884738m,
 7857224940850399877258024711m, 49235779972097403257952096349m, 47113419423796500969912568489m, 40621622434092186627324934021m,
21202482126426845695683330066m, 35912653516536257028681572388m, 59711367120821783368922497584m,  6560368385842684669528939939m,
 4334984822915178083307767064m,  6259850667636041977300394112m, 30997765383756394914975652514m,  4722990527679034227733630504m,
52037316795683463733774893275m, 29896763862242557674139159552m, 59643625659744859873556712068m,  4569136778822316648754585667m,
 2658751682617809238299267492m, 55525967723364498043119798049m,   677349389969591085998287375m, 25079923703674377032620495910m,
17432720372334598107242340620m, 13651603659188097116767522346m,  4295710734540204966209980929m,  9935580461206235215833557604m,
39709611195083176609192231368m, 40098048501305039579118701696m, 28790459173599039458117744711m, 47129761821390851424675463962m,
14875053161164625385514828612m, 11799505221259940391349411082m,  8866429273059066149404609808m, 76908847513797786905727108420m,
10155690020949245404276722726m, 21397310445792245218897628716m, 13942862380528197559971268651m, 29915106120460776732948039129m,
43744522847328317275392723011m, 15789789501033297225886733864m, 41517595770393699392007565838m,   399380159227533325040747488m,
   58057263169904901155241996m, 38698555258668417983594127361m, 68240268244857597822784553500m, 59817734633289481990864769989m,
15554384440973928849352506894m, 66331350449263342133411358892m, 52718069336419837636649764904m, 40795542104807881954943331346m,
21047216691142230811206516836m, 36683666184860362839251178076m, 49769173908493893058523010337m,  4047221138484732812137609605m,
15644715270489852806860991740m, 53540372802944233634649082612m, 10944273289336960866954248773m,   129716334678858767849904207m,
76753642931465892045930356855m, 52460258736823581739589222778m,   657694269042673348573176522m, 11766557481162402144960319532m,
68121459666192765888696844518m, 15861126984870262133099792946m,  9909358676856558193227655688m, 76448627273859445696778816799m,
33594948275398577908143637868m, 61844433172050190744669589313m, 12930242511149431302812892987m, 32850751892156652006205857801m,
29983896267001504606097605185m, 39838337661174742127903900368m, 19888835154078587666814815758m, 34138878242783504820148900190m,
64399556329921931601899461760m,  8087773469118507319814845866m, 39009802862113570596172412002m, 71969183992826516478286317964m,
 1547736862566141833241308193m,   816462347667584369691735837m, 33490287674370885901714311250m, 52032599969393427444838532330m,
22186897228035905501732170371m, 36922184126529056103931636262m,  6255292996145868457673245718m, 30126460027700485725782645889m,
42207208509000797028148347416m, 37940571390752033667172315217m,  5605269963870509473542759456m, 39634031859445823132751712228m,
17186546646068966418953658882m,  7744686790067104640914159791m, 62754377132541518717360705080m, 39745812787233614881714393942m,
36441981526658337107547803653m, 14381191206995072065721983806m,  6639562495482419732959202208m,  5243396720407569407067594369m,
69808310298563988093847736688m,  6300446306217095285251245652m, 31554007581243578706244868043m,  6746055399670210271875449688m,
12094111245391885346264455706m, 30728480807903263953383558696m, 23366444675224393875690769986m,  1087429254917191912022895775m,
11970888586797651743884022240m, 53049483105945032614176761570m, 41420619144812213595065019174m,  6916590909248135844961114725m,
27685711190919603290214394246m, 36467652512966832082232391193m,  8981426312490282284119152997m, 20445826012142023976675365012m,
12698866424293521603793531146m, 20833060432618525019261866180m, 34664249100070495179446950159m, 29712993847043277449052184916m,
 3172246207656576399178514442m, 20891017685546681016606807096m, 39815632050159183233904175109m, 49179151548659992755156560298m,
 5275850033310137984321401954m, 63159967671176204286868996752m, 28140272132229069842797465618m, 43966988776946613257108479280m,
20445463480004273319661678706m, 19919699906271658923427763380m,            112615606491793052m
};
    //length=159  weights_length=139  structure_length=20
    //model_name=model17_1280  structure_name=model17
    //accuracy=0.3302083333333333

    private int bitpos = 0;

    private float[] weights = new float[1208];
    private int[] structure = new int[289],
    piecetype = { 13, 0, 2, 3, 1, 4, 5 };
    //        self  opponent
    //Pawn       0  6
    //Rook       1  7
    //Knight     2  8
    //Bishop     3  9
    //Queen      4  10 
    //King       5  11
    //En Passant 12
    //Empty      13

    private int ReadBits(int bits)
    {
        int v = 0,
        i = 0,
        bitend = bitpos + bits;
        while (bitpos < bitend)
            v |= ((Decimal.GetBits(data[bitpos / 96])[bitpos / 32 % 3] >> (bitpos++ % 32)) & 1) << i++;
        return v;
    }

    public Move Think(Board board, Timer timer)
    {
        Move[] moves = board.GetLegalMoves();
        Move bestmove = moves[0];

        float[,,] io = new float[7, 64, 40];
        int[] iosize = new int[7],
        piece = new int[64];
        float maxeval = -1E+30f;
        bool turn = board.IsWhiteToMove;

        foreach (Move m in moves)
        {
            board.MakeMove(m);
            float eval = 0;

            //reset input/output
            Array.Clear(io);
            Array.Clear(iosize);

            int x, y, xy = 0,
            //get en passant square
            i = m.TargetSquare.Rank,
            p = m.MovePieceType == PieceType.Pawn &&
                    Math.Abs(m.StartSquare.Rank - i) > 1 ? (turn ? i - 1 : i + 1) : -1;
            //board to input
            while (xy < 64)
            {
                x = xy % 8;
                y = xy / 8;
                //flip board depending on turn
                if (turn)
                    y = 7 - y;
                Piece pc = board.GetPiece(new Square(x, y));
                i = piecetype[(int)pc.PieceType];
                //encode pieces as own or opponent
                if (i < 6 && (pc.IsWhite ^ turn))
                    i += 6;
                if (p == y && m.TargetSquare.File == x)
                    i = 12;
                //piece embedding
                x = 0;
                while (x < 4)
                    io[0, xy, x] = weights[i * 4 + x++];
                piece[xy++] = i;
            }
            iosize[0] = 4;

            //run convolutional neural network
            //maximum depth of 4 layers
            p = 189;
            while (p < 289)
            {
                int inputi = structure[p++],
                outputi = structure[p++],
                weightoffset = structure[p++],
                shapeoffset = structure[p++],
                outch = structure[p++],
                outoffset = iosize[outputi],
                inoutsize = iosize[inputi] * outch,
                filtersize = inoutsize * structure[shapeoffset++];

                for (i = 0; i < filtersize; i++)
                {
                    int oindex = outoffset + (i % outch),
                    inindex = i / outch % iosize[inputi],
                    sindex = shapeoffset + 2 * (i / inoutsize);
                    for (xy = 0; xy < 64; xy++)
                    {
                        //filters are shaped, not just rectangles
                        x = (xy % 8) + structure[sindex];
                        y = (xy / 8) + structure[sindex + 1];
                        if (x >= 0 && x < 8 && y >= 0 && y < 8)
                            io[outputi, xy, oindex] += io[inputi, y * 8 + x, inindex] * weights[weightoffset + i];
                    }
                }

                //add bias then apply relu except for last layer
                for (xy = 0; xy < 64; xy++)
                    for (i = 0; i < outch;)
                        io[outputi, xy, outoffset + i] = Math.Max(
                            p < 289 ? 0.0f : -1000.0f,
                            io[outputi, xy, outoffset + i] + weights[weightoffset + filtersize + i++]);

                iosize[outputi] += outch;
            }

            //calculate evaluation value from neural network output
            bool draw = board.IsDraw();
            xy = 0;
            while (xy < 64)
            {
                x = xy % 8;
                y = xy / 8;
                p = piece[xy];
                i = 1;
                //switch sign and flip piece-square table for opponent piece
                if (p >= 6)
                {
                    p -= 6;
                    i = -1;
                    y = 7 - y;
                }
                //multiply output by piece-square tables
                if (p < 6)
                {
                    x = x < 4 ? x : 7 - x;
                    eval += i * io[6, xy, 0] * weights[p == 0 ? 136 + y * 4 + x :
                                                    55 + p + (y < 4 ? y : 7 - y) * 20 + x * 5];
                }
                //adjust value for draw
                if (draw)
                    eval += io[6, xy, 2];
                //add this output
                eval += io[6, xy++, 1];
            }

            //make sure neural network doesn't miss checkmates
            if (board.IsInCheckmate())
                eval += 100000;
            foreach (Move m2 in board.GetLegalMoves())
            {
                board.MakeMove(m2);
                if (board.IsInCheckmate())
                    eval -= 100000;
                board.UndoMove(m2);
            }

            //update best move
            if (eval > maxeval)
            {
                maxeval = eval;
                bestmove = m;
            }
            board.UndoMove(m);
        }

        return bestmove;
    }
}
