[{"BotID":"Bot_0","AuthorName":"Unrea1","BotName":"LOVE YOUR VIDEOS","SearchKind":"Other / Idk","EvalKind":"Other","Description":"JUST WANTED TO BE THAT ANNOYING FAN WHO GOES FIRST! LOVE YOUR VIDEOS. I WILL ACTUALLY BE IN THE CHALLANGE (Rust dev by day). Keep up the good work Dr.SoftPaws"},{"BotID":"Bot_1","AuthorName":"EV3L1N","BotName":"The Chotic bot","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"It can randomly become stupid"},{"BotID":"Bot_2","AuthorName":"Burnzy \u003C3","BotName":"CEO grindset board meeting","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"The token limit is too low for much fun frankly"},{"BotID":"Bot_3","AuthorName":"EaglePancake","BotName":"Pancake","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"I\u0027ve watched both of the chess bot coding adventures, there\u0027s a lot to be learned from them but for now this is what i can offer haha :) It\u0027s not smart at all (couldn\u0027t even win a match) but it\u0027s not programming if you don\u0027t take L\u0027s occasionally right ?"},{"BotID":"Bot_4","AuthorName":"Techno","BotName":"Sore Loser Bot","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_5","AuthorName":"FlamingSquid","BotName":"AngryPiece","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"This bot is really dumb. One piece is angry and will keep moving until it runs out of moves or dies. I had fun making it though."},{"BotID":"Bot_6","AuthorName":"Chris","BotName":"Compact Scholar\u0027s mate","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"My goal was to make an easy-to-read and understandable, but still compact bot, that also hopefully manages to get a lot of scholars mates. The goal wasn\u0027t to make the best bot but to make an extra small bot that still isn\u0027t completly useless."},{"BotID":"Bot_7","AuthorName":"Guillem","BotName":"Scared","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"Tries to avoid conflict unless necessary"},{"BotID":"Bot_8","AuthorName":"Jacob Sweeten","BotName":"ScaredyBot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"Always take the safest move possible (avoid high danger scores). First four moves are statically programmed if normal start condition."},{"BotID":"Bot_9","AuthorName":"Bden","BotName":"More Recursion!","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"After the same opening moves I always play with go on the attack without putting the king in danger. Code really could use more abstraction for repetitive recursion cause it was going down the road of testing its next move against the enemies next move if ran through the same logic."},{"BotID":"Bot_10","AuthorName":"Arman N","BotName":"nadjBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I prioritize captures, promotion, and advancing as quickly as possible up the board. This current version is all about full-scale attacking"},{"BotID":"Bot_11","AuthorName":"Brandon Curington","BotName":"The Soggy Biscuit","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"He likes to check you, take your pieces, and move to the center in that order."},{"BotID":"Bot_12","AuthorName":"ZZKer (she/her pronouns)","BotName":"Aggressive Fool","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"So far it prefers moves that lead to check, then moves that capture, then chooses at random. I want to make it avoid moves that can lead it to be checked, but I\u0027m still learning how to do that."},{"BotID":"Bot_13","AuthorName":"magic216","BotName":"ScholarsBot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Other","Description":"This is sort of a meme bot. For the first four moves it only attempts to do the scholar\u0027s mate, and if that fails, it performs entirely random moves (or it will execute a checkmate if it happens to see one)."},{"BotID":"Bot_14","AuthorName":"hokurou","BotName":"simpleval (portmonteau of simple eval)","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"I saw this video at 3am Australian time and decided to stay up until 5:30 ish getting a bot out."},{"BotID":"Bot_15","AuthorName":"Sam Lefforge","BotName":"The Peaceful King","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"My algorithm avoids making moves that will checkmate the opponent if possible. Then, it will prioritize not putting the opponent in check. Then, it makes sure it is not capturing the opponent\u0027s queen, then rook, then bishop, then knight, then pawn. If it has the luxury of all these conditions being satisfied, it will try to make a king move, but if that is impossible just any move will do.\n\nMy hope is that my king will be way overdeveloped and get quickly checkmated."},{"BotID":"Bot_16","AuthorName":"Bbrainstormer","BotName":"Cirrus v0.1","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"It\u0027s pretty much just EvilBot.cs.  It simply looks at each move, and adds up the value of all the pieces.  It then chooses the best one."},{"BotID":"Bot_17","AuthorName":"castur_","BotName":"The Copycat","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"Hi there! Thanks for hosting this, it\u0027s been a blast. I\u0027ve left the implementation details and other such things in the code in the form of comments. The gist of it is that the bot always tries to replicate (copy, if you will) the opponent\u0027s move as closesly as possible. I don\u0027t have much experience with C# (I mostly work with C) so it was pretty fun trying out something new for once ^^"},{"BotID":"Bot_18","AuthorName":"fhyyBy2","BotName":"LPS","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This bot does a depth-first minimax search up to a dynamic depth limit. Scoring is based on piece values that differs for each game phase. Evaluating each and every possible move is expensive and therefore a lottery system is implemented to select a handful of candidate moves. \n\nThe idea was to implement the lottery system to make common opening moves more important, and to keep a good pawn structure in the mid game. This does not work as well as I hoped, but I might get back to this and maybe (hopefully) also reduce the number of used tokens. The main issue is the depth-first search which often returns the worst solution if it takes too long and the cut-off time is reached.\n\nSuper fun challenge!"},{"BotID":"Bot_19","AuthorName":"Kai Tabuchi (9 Years Old)","BotName":"AttackBot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"I have used a score-based system where the bot scores every move based on a few factors and their importance values, these factors include: Does the move result in check?, does the move result in having zero legal moves?, Is the square to move to being attacked by an enemy piece, and if it captures a piece, how powerful is that piece?"},{"BotID":"Bot_20","AuthorName":"Mateo Saldivar (ZiroDev)","BotName":"Queen\u0027s Gam-bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This bot focuses on the Queen, and while I knew I wouldn\u0027t discover the ultimate chess playing algorithm - since I don\u0027t even know how to play myself - I was determined to create something intriguing. The Queen\u0027s Gam-bot prioritizes the queen, harnessing its power to bring destruction to the chessboard. \nThis AI has a special knack for creating even more queens whenever possible. One of the most intriguing features of the Queen\u0027s Gam-bot is its opening\u0027s book. While not perfect, it still manages to pose a fair challenge to other bots, ensuring exciting matches."},{"BotID":"Bot_21","AuthorName":"Evan Finnigan","BotName":"At least 2 IQ","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"Using my limited chess knowledge, I made a basic evaluation function that rewards things like captures \u0026 checkmate, with different weights to prioritize checkmates, higher value captures, developing moves, etc.\n\nThere is no opening strategy so it will open the game randomly (when best moves are tied, the move is chosen randomly from those options).\n\nThe bot does not search really, but it does look exactly one move into the future to see what the opponents next move evaluates as, and subtracts the best opponent move from the evaluation score. This is very simplistic compared to strategies that rely on deeper recursion."},{"BotID":"Bot_22","AuthorName":"Leo","BotName":"BigBrainBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"For this bot I tried to use the most efficient methods, that fit in the tokenlimit, which are AlphaBeta-Search with Quiescence-Search and and a compact form of PieceSquareTables. \nThis Challenge was fun, looking forward to more coding challenges."},{"BotID":"Bot_23","AuthorName":"Steven Christy","BotName":"HalfWit","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"I would have liked to use the bitmap functions, but the API just wasn\u0027t very intuitive for me. I think a big cost is having to update the board and then undo, but I didn\u0027t really spend much time identifying the major bottlenecks. Maybe I\u0027ll figure out some better approaches prior to the submission deadline. I\u0027ll post some other feedback in the git discussions."},{"BotID":"Bot_24","AuthorName":"Tumpa","BotName":"WorstBotEverMade","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Other","Description":"I just made it for fun. I hope there\u0027s more \u0022WorstBotsEverMade\u0022, but my will be the worst one"},{"BotID":"Bot_25","AuthorName":"Kurt St","BotName":"SimpleGuy","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I just wanted to make a very small chess bot that calculates a bit"},{"BotID":"Bot_26","AuthorName":"Esprit Orgue","BotName":"SWaP (Stucked With a Piece)","SearchKind":"Other / Idk","EvalKind":"Other","Description":"This bot will randomly choose a piece and will be stuck moving it until that piece is either eaten or blocked. In this case, it\u0027ll randomly switch to another piece. No memory is kept, so it won\u0027t return to a previous chosen piece.\n\nDue to the API, it\u0027s made by storing the target square of the move."},{"BotID":"Bot_27","AuthorName":"Andy Mitchell","BotName":"PanicKing","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This bot is designed to be bad.  As bad as I could make it hopefully.  Basically an experiment whilst getting used to the API.  The evaluation function looks at all valid moves and scores those with less of the king\u0027s own pieces in around him (he being the centre of a 5x5 grid of vision.  He will also seek to get closer to the opposing pieces.  On top of this he will seek to get away from the board edges whilst he has \u003E3 pieces on his team.  Once he has 3 or less, he will prefer edges and corners, to make it easier to be captured.  Think of him panicking with claustrophobia, then seeking to hide once he realises he doesn\u0027t have much of a team left."},{"BotID":"Bot_28","AuthorName":"Alex Kubanek","BotName":"Memelord","SearchKind":"Other / Idk","EvalKind":"Other","Description":"This engine is not meant to win games, I just thought the idea of a chess engine with forced en passant was a funny idea.It can even calculate lines up to one move in the future to give the opponent en passant"},{"BotID":"Bot_29","AuthorName":"zeqzero","BotName":"SmoothBrainBot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"Thanks for organizing this! It was fun to work on."},{"BotID":"Bot_30","AuthorName":"Levi","BotName":"WhyAmIABot","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_31","AuthorName":"PotatosDispenser","BotName":"CyberPawn","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"The idea is really cool ! but 1024 tokens is really limiting though, i had to spend so much time just to get rid of 100 tokens, making the code a lot less readable :(\n\nGetBestMove(): This function iterates over all the legal moves that the current player can make. It simulates each move and uses the AlphaBeta() function to calculate the \u0022score\u0022 of the game state that would result from that move. The move with the highest score is selected as the best move.\n\nAlphaBeta(): This is the heart of the mini-max algorithm with alpha-beta pruning. It recursively evaluates the game tree up to a certain depth, which is reduced by one on each recursive call until it reaches zero. If the depth is zero, it calls the Quiesce() function.\n\nQuiesce(): This function is used to deal with the horizon effect, a problem where an AI might make a disastrous move because it evaluates the game tree to a limited depth. It only explores capturing moves to prevent the AI from making shortsighted decisions.\nEvaluateBoard(): This function is used to evaluate the \u0022score\u0022 of the current game state. This score is used to determine how favorable a particular game state is. If the current state is checkmate, it returns a large negative score if white is to move next, or a large positive score otherwise. If the game is a draw, it returns zero.\n\nIn other cases, the score is computed based on the material balance (the relative value of all pieces of both players) and the positional value, which is derived from hard-coded piece-square tables (tables). The piece-square tables give different values to each square on the board for each type of piece, reflecting how advantageous it is for a piece of a particular type to be on a specific square."},{"BotID":"Bot_32","AuthorName":"Roboticmadness","BotName":"Botty_Bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"first challenge i ever entered \u0026 bot is a basic implementation of a chess AI that combines a depth-limited minimax search with alpha-beta pruning and random evaluation scores."},{"BotID":"Bot_33","AuthorName":"vuT","BotName":"BalanceBot","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"It tries to keep the board balanced around the center with differentely weighted pieces.\nweights:\npawn: 1\nknight \u0026 bishop: 3\nrook: 5\nqueen: 9\nking: 10"},{"BotID":"Bot_34","AuthorName":"Rudy","BotName":"SaveBot (or, \u0022winning bot\u0022 as an alternative)","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"Yes, very beautifully handcrafted formula for decision making, no search necessary because it\u0027s formula is perfect on it\u0027s own."},{"BotID":"Bot_35","AuthorName":"zer0","BotName":"chaos bot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Other","Description":"just basic checks didnt have much time"},{"BotID":"Bot_36","AuthorName":"deltagiac","BotName":"Failbot","SearchKind":"Monte Carlo search (random playouts)","EvalKind":"Other","Description":"Creating even a basic minimax search felt a bit too far out of my reach (I\u0027ve tried it before for a separate project and didn\u0027t get far). So instead I figured I\u0027d try going in the complete opposite direction, and instead I\u0027ve tried to earn the title of worst bot possible. \n\nAgainst the EvilBot, it only managed to stalemate around 10% of the time, and lost the other 90% of games.\n\nIt will never capture pieces, and it will never checkmate if it can help it. It will leave a checkmate hanging until turn 10. Its entirely possible it could be engineered to lose more consistently, but I was happy with the results I got.\n\nObviously a very silly submission, but I hope its a source of some entertainment!"},{"BotID":"Bot_37","AuthorName":"flabbet","BotName":"Prince of Persia","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Tbh I just played around with some manual points evaluation for moves, figured that the ones I chose was all right and then implemented depth recursive heuristics. Took me about 2-3 hours. I chose distance to enemy king as one of the positive scores, so the bot is pretty aggresive"},{"BotID":"Bot_38","AuthorName":"Graham Gayler","BotName":"Asymptotically optimal","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"The bot creates 500 Subleq programs (basically just fancy configurations of 3 numbers) and finds the best one by the pitting them against each other."},{"BotID":"Bot_39","AuthorName":"Moonwalker3","BotName":"Blind Bot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"This bot took ages to make due to all the tokens being used in one Eval function.\n\nBlind bot is bot that cannot see ahead. It is only told the position per move and will play the best move only given the current position. It has a complex evaluation function and uses 892 tokens (including weird Console.Writeline tokens)\n\nAlso this bot plays in ~5 MS per move. 1 second in the real tournament?\n\nMaybe the best bot that can\u0027t look ahead?"},{"BotID":"Bot_40","AuthorName":"Petr Hol\u010D\u00E1k","BotName":"holcak-bot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"Really simple bot, shame that the API wasn\u0027t better, still fun challenge:))"},{"BotID":"Bot_41","AuthorName":"devrichgg","BotName":"RichyRoo","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Very fun! I am a development manager now with limited time and have not personally programmed in a long time. Despite my knowledge of chess being limited to just the rules of the game it was a good time coming up with strategies. I tried not to use references or look at other code for this, and deciding on depth of search was something I am still deciding on. It\u0027s also not optimised yet, so if it starts looking like speed will be a factor I may revise it further."},{"BotID":"Bot_42","AuthorName":"slothinahat","BotName":"dumbot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"I have never written a line of c# and have a chess.com rating of 100. Dumbot looks at all legal moves and chooses the one that will gain more material and lose less material (but badly)."},{"BotID":"Bot_43","AuthorName":"drlundberg","BotName":"UncatchableSpaghettiMonster","SearchKind":"Other / Idk","EvalKind":"Other","Description":"Strategy: Prioritize not getting captured, look 6 moves ahead."},{"BotID":"Bot_44","AuthorName":":LMProgramming","BotName":"SimpleBot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"Just a simple bot, kinda like the CCCP bot by SuckerPinch, but really without the P."},{"BotID":"Bot_45","AuthorName":"Chinmay Krishna","BotName":"HopeBot","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"This is the version I have after ~2 days, I initially began with Evil Bot, then accounted for promotion and the opponents response. For strategy, I rewarded moves that could lead to future checks and checkmates if the opponent passed their turn. Then I called that program Aggressive(). The next version would find the move that maximizes the evaluation function after Aggressive()\u0027s response. The evaluation function initally accounted for checkmate, draw, and material. I also added a term that rewards having more legal moves and limiting the opponent\u0027s legal moves.\n\nOverall, pretty fun experience for my first time creating a chess bot and using C# (I have some experience with C and C\u002B\u002B).\n\nI\u0027d estimate its elo around 800 (can beat beginners but not amateurs)."},{"BotID":"Bot_46","AuthorName":"Rookie","BotName":"Susolly","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"My strategy was to use position tables inside of ulongs, it was my first time coding in c# and I had fun :D"},{"BotID":"Bot_47","AuthorName":"hilovids","BotName":"Maximillian Stalebot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"The bot looks to maximize the number of moves the opponent can make, while minimizing the amount of moves we would make as a result to the opponent. The goal of the bot is to come to a stalemate or loss. "},{"BotID":"Bot_48","AuthorName":"Wallace Luyten ","BotName":"Judywashington","SearchKind":"Other / Idk","EvalKind":"Other","Description":"Fuck bitches "},{"BotID":"Bot_49","AuthorName":"wischi","BotName":"CheatingBot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Other","Description":"I really enjoyed it. Right from the start my idea was to \u0022cheat\u0022 but without violating any rules. First I thought about changing the internal game state (which would require reflection, but with the \u0022Activator\u0022 class and a few magic strings I think it could work but the controller was created in Main on the stack and not stored in a variable so I tossed that option)\n\nAfter a few hours of trying different ideas I came up with the idea of using the way C# resolves type names to basically break the other bots that are compiled against my bot.\n\nEven though I haven\u0027t broken any rules as far as I can tell, the solution is probably against the idea of the challenge but it would be an honor if the bot can somehow make it into the video :-D\n\nPS: I really love your videos and the work you do."},{"BotID":"Bot_50","AuthorName":"M\u00F6hrchen (Thilo)","BotName":"TLMChessBot [v1-1250]","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Strategy: \n\nOriginally, I wanted to evaluate the opening using a Monte Carlo Tree Search, but this had very poor results with my implementation. (It is still commented out in a separate code region) Since the bot should play the opening randomly, reasonably, and without specific move instructions, I found a solution by slightly modifying the evaluation function for the first moves. This modification includes a slight random deviation from the original evaluation, as well as ignoring the positioning of the knights. \n\nIn general, the bot uses an Alpha-Beta pruned Minimax search with a few small add-ons:\nOnce the desired search depth has been reached and the last move was a capture, the bot searches one depth further for that specific node. \nAdditionally, it sorts the list of moves into two halves (1. Capture moves / 2. Non-capture moves) and prefers the first half to generate more cutoffs with the Alpha-Beta pruning. (Especially this sorting could be greatly improved.) \n\nThe evaluation function takes into account the quantity and values of all individual pieces (e.g. Pawn = 10), castling rights, checkmates, draws, as well as positional advantages over different time periods of the game. (A more detailed explanation will follow shortly after this) \n\nTime management is solved with Iterative Deepening: As long as the bot has used less than one hundredth of its remaining time, it searches one depth further. In general, the minimum search depth is 4, but if a checkmate is found, it also stops the search. This avoids prolonging a checkmate due to finding additional move sequences of the same length in the next search (if they were found before the original move sequence).\n\n------------------------------------------------------\n\nImplementation: \n\nSince the majority of the implementation is relatively straightforward, I will only focus on the positional evaluation and its development from the opening to the endgame: \nIn general, each piece on each individual square receives a bonus of 0-15 points. (To give the bot a very rough positional understanding) \n\nTo save tokens, I tried to choose the most compressed storage method for the square evaluations. My choice was 4 ulongs for the 6 different types of pieces. This is done twice to differentiate between preferences in the opening and the endgame. The 4 ulongs combined result in a 4-bit number (0-15) for each square (64 -\u003E 64bits). To allow the program to better use this data during runtime, it converts them into two separate 12x64 int arrays in the constructor. (The 6 additional pieces, belonging to the black player, are mirrored versions)\n\n To create a smooth transition between the preferences in the opening and the endgame, I modeled a simple algebraic function (currently -0.001x\u00B2\u002B1), which is considered in the domain 0 \u003E x \u003E 32. Here, the x-value represents the number of remaining pieces, and the y-value represents the weighting of the positional endgame bonuses (between 0 and 1). The weighting of the opening data is currently calculated as 1-(-0.001x\u00B2\u002B1).\n\n Since the declarations of the ulongs may seem abstract, I decided to write a separate program in which I can manipulate the squares in a visually intuitive way and then output the required values for them.\n\n------------------------------------------------------\n\nConclusion / My Experience:\n\n The bot has a lot of potential for improvement in many areas, which I may address with a second version in the future. Especially in the endgame with limited material, the bot plays rather poorly because it will not be able to find longer move sequences due to the increased time pressure. This is, of course, difficult to solve with the limitation on tokens. As an assessment, I had Stockfish from Chess.com analyze a game played by the bot, which estimated its rating there to be 1250.\n\n In my opinion, my experience with the challenge was very good. I have never participated in such a challenge before, so I cannot really make a comparison, but I found it to be well-organized. Thank you for that!\n There will likely be dozens upon dozens of bots that are better than mine, but for me, it is not as relevant how the bot performs. As a side project, it worked great :)\n\n\n*Sry if there should be some weird english expressions or sentence structures (I am not native english ^^)"},{"BotID":"Bot_51","AuthorName":"Gary Wawn","BotName":"Shenanigator","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I started with a troll bot which would only evaluate queen moves, which ended up being an absolutely terrible idea, but I couldn\u0027t stop working on it until I got to this version which implements almost all the concepts you spoke about in your video, just slightly summarized. I\u0027m really struggling with the memory managed side of things, as I only saw that later the limit of 256 mb, and it sort of invalidated my transpoistionTable. I\u0027ve implemented some crude management that just dumps the list and I start the search at depth 5, and it seems very power still. If memory disqualifies me, that\u0027s completely fine. I\u0027ve had so much fun working on this bot, and I can\u0027t seem to pull myself away from updating it."},{"BotID":"Bot_52","AuthorName":"PizzasBear","BotName":"SimpleBearSearch","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I used a variant of CPW\u0027s simplified evaluation function with a modified Wikipedia based alpha-beta pruning."},{"BotID":"Bot_53","AuthorName":"CHECKERCE","BotName":"Aggrobot","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"I don\u0027t really know what i\u0027m doing :)"},{"BotID":"Bot_54","AuthorName":"Geezmo","BotName":"Turtle","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"I just wanted to include a turtle somehow. Image kernel was too hard."},{"BotID":"Bot_55","AuthorName":"Fiera42","BotName":"GoodBot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"I\u0027m a simple man, I see evilBot, I make it\u0027s opposit"},{"BotID":"Bot_56","AuthorName":"Wolfpack 104","BotName":"Phi plays Chess (a.k.a. Zobrist\u0027s Golden Hashbrowns)","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Other","Description":"This was a joke bot designed after a conversation with my brother in which we imagined some version of \u0022SHA-256 plays chess\u0022  by hashing the fen string of the chess board, and then taking that result and reducing it (modulus) into the number of possible moves.  This way, the hashing algorithm would select an effectively random legal move and play it.  \n\nUnfortunately I could find no hashing algorithms in the allowed Namespaces, so I settled for a simple hash function.  It relies on the Golden Ratio and it\u0027s irrational properties to avoid hash collisions (which really wouldn\u0027t have been a huge deal for this project but that\u0027s besides the point).  It takes the fractional piece of the inverse of the Golden Ratio times the Zobrist key of the position and multiplies that by the number of legal moves, then rounds down to get the move that it will choose.  This process will always pick the same move for the same board state (assuming the key remains the same).  \n\nIn this way, one of the most beautiful numbers in math (the Golden Ratio (or at least the fractional part of it)) has been allowed to choose it\u0027s favorite legal move and share that with us."},{"BotID":"Bot_57","AuthorName":"Carson Ouckama","BotName":"Obi","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"A good strategy in chess is to swamp the king, that allows more possibilities for checkmate. I implement that within my function. The main feature of my function is it loops through each legal move, and assigns each a score, then it will return the move with the highest score. One thing I\u0027ve discovered is that my bot is bad at rook-king endgames."},{"BotID":"Bot_58","AuthorName":"Hi","BotName":"Hi","SearchKind":"Monte Carlo search (random playouts)","EvalKind":"Handcrafted evaluation function","Description":"Fh"},{"BotID":"Bot_59","AuthorName":"Anthony","BotName":"Generic Chess Bot #1000000","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Evaluation is done using material value and 1 half of a Piece-Square Table, the table is then reconstructed after by mirroring it using a custom function. The bot utilities minmax search with alpha beta pruning and a depth starting at 5 that decreases as time progresses.  "},{"BotID":"Bot_60","AuthorName":"Latobius","BotName":"The Martyr","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"I only ended up having a few hours to attempt this project, and I accidentally discovered a move scoring technique which favours giving your opponent as many opportunities to capture your pieces as possible. I\u0027m going for the record of fastest defeat."},{"BotID":"Bot_61","AuthorName":"Pouek_","BotName":"Natrix","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"It was very hard to balance the brain capacity with what the bot can do. This is not the best it was but it fits in the limit. Great challenge overall! I learned a lot about minimax algorithm and alpha-beta pruning."},{"BotID":"Bot_62","AuthorName":"Viruj","BotName":"DumBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I was only able to evaluate position based on the number of pieces on the board because of the bot\u0027s brain capacity. The brain capacity was the hardest part of this challenge for me. The bot follows some book moves initially then uses the eval function to get the next best moves. Having it follow book moves for the beginning does make it a bit dumber but if I didn\u0027t do that it would just repeat moves until it is threatened."},{"BotID":"Bot_63","AuthorName":"odin7053@discord","BotName":"SatanBot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"Oh my. This is an edit, because just so much happened I had to remove everything written here.\nSo all over. I loved to see how it evolved over past few days.\nMy goal was to make the smallest possible bot that was also stronger than EvilBot, and we\u0027ve reached 52 tokens. \u0022We\u0022, because some ranges were erased only due to how the discord community helped me. There have appeared some enthusiastic people who also wanted to see it reach sub100, yet we\u0027ve ended at near sub50.\nAt first I\u0027ve had my 138 token version which I considered quite solid, it could defeat EvilBot consistently with ~120% of EvilBot\u0027s wins over 1000 games.\n\nPassword for all the pastebins: DzRnaQ1duF\n138Token version\u0027s code: https://pastebin.com/4E7jsQvC\n\nThen I\u0027ve seen more and more ways to cut just a little off of it. I was also made aware that Math is a part of System and not another subnamespace of it, which removed the int abs(int x) =\u003E x \u003C 0 ? -x : x; from my code and replaced it with Math.Abs().\n\nEventually I\u0027ve gotten it down to 114 tokens, thinking I was at it\u0027s limit. People were cheering for me to go sub100 but weren\u0027t yet very involved. It has changed once I was convinced that I could possibly never get below 103, but sub100 was just so close I had to ask people out.\n\n114Token version\u0027s code: https://pastebin.com/fwAGmchk\n\n103Token version\u0027s code: https://pastebin.com/eZu2hLps\n\nThen I\u0027ve been told about several other sorting methods and how to properly(because even though I used them, it wasn\u0027t really the right way) use C# lambdas, bringing it down to 93.\n\n93Token version\u0027s code: https://pastebin.com/x8BZCUhF\n\nThen, after this group effort I remembered of the other one of the two main direction metrics I have been using. I\u0027ve kind of ditched the other one because it seemed worse in most cases, however not here.\nIn the beginning, I\u0027ve soon started messing around with distance to the enemy king once I noticed how effective it is, but eventually while cutting corners I\u0027ve discovered that distance to the middle also worked perfectly fine, although worse, or at least so I thought. I\u0027ve put it aside for quite some time only to remember about it now. \nNot only did it cut off almost 20 tokens, it also performed a lot better.\n\n76Token version\u0027s code: https://pastebin.com/nCA2hKSt\n\nThen everyone seeing that not only have we gone past the sub100, we were also approaching a whole new milestone, sub50. People were enthusiastic, it was more of a group effort at this point than only my own. Sadly, nothing worked out.\nVersion below is the last version that didn\u0027t use the gizmo we\u0027ve found out later, and to be fair which almost felt like cheating to use sometimes.\n\nFinal version\u0027s code: https://pastebin.com/9TeSXmtW\n\nHowever, someone has appeared and told us about certain method that EVERY SINGLE ONE of us was surprised that it was even here. The board.SquareIsAttackedByOpponent(x.TargetSquare).\nIt has destroyed the evilbot so much we didn\u0027t need to keep the condition checking for checkmates anymore. It was an instant (partial) awareness button for any given bot. We\u0027ve eventually settled on 55 token version, which was pretty much the most stable one so far.\n\n55Token version\u0027s code: https://pastebin.com/T0jRKGt8\n\nAt this point situation was a little bit calmer, but I\u0027ve had an idea, what if I was to combine all the most powerful features for minibots into one devilish minibot? I\u0027ve combined 75 variant with 55 variant and a few other smaller things I\u0027ve learned along the way.\nUntil now a basic requirement for every bot was to consistently and visibly beat the EvilBot in number of wins over several sets of 1k games. Sometimes it was stronger, but usually nothing too big. This time however, this hybrid achieved scores of almost 700 wins to 20 loses plus draws all the other filling to 1k.\nI\u0027ve quickly taken care of it and adjusted several things, eventually stopping at my DevilBot, whose name was inspired by Evil bot, because it was both a lot shorter and a lot stronger. It reaches almost 800wins at this point, yet never touching it, while sitting at 94 tokens.\nThis bot absolutely obliterates and for it\u0027s size it\u0027s absolutely impressive. I doubt it\u0027s good for any serious competition but it still is far stronger than anything I ever imagined I could end up at, even defeating some of the other people\u0027s bots while being several times smaller.\n\nDevilBot is the code attached along this entry.\n\nHowever, one person noticed something, told me about it and together we\u0027ve gone down from the 55 token version to 52 tokens, which was the final lowest point to defeat EvilBot for us. For now.\n\nThe 52 token version\u0027s code: https://pastebin.com/QKSd3zCD"},{"BotID":"Bot_64","AuthorName":"Joao Santos","BotName":"offtensive Crane","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"Used my (underwhelming) chess knowledge to stitch together a move evaluator. First code challenge but was a lot of fun! :) "},{"BotID":"Bot_65","AuthorName":"saraqael","BotName":"Mazin","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_66","AuthorName":"Danilo Luiz Rheinheimer","BotName":"CapivaraBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_67","AuthorName":"Leg3nd","BotName":"(confus)","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"(Confus) as in confusing. \nI did start this challange to try and learn C# and i think i have put in 25\u002B hour just to get this far. and i have made is so it atleast draw evilbot. And that im pretty proud off. But i really needed to comment my way out of trying to understand it. And still dont really understand what im doing. Even with all my Debug console.WriteLine i had to create to understand what it really is doing."},{"BotID":"Bot_68","AuthorName":"89o","BotName":"Mr. Racism","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"Inspired by Tom7\u0027s video, this bot simply tries its best to segregate black pieces to black tiles and white pieces to white tiles."},{"BotID":"Bot_69","AuthorName":"HosayNotJoseph","BotName":"MartinButWorse","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"ignore the hint thigs vs code gives you lol also im like 13 be proud of me"},{"BotID":"Bot_70","AuthorName":"RedBlackTree","BotName":"applemethod-orz","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This bot beats Nelson on chess.com\n\nIt evaluates based on who has a material advantage (P/K/B/R/Q = 1,  3.05,  3.33, 5.63,  9.50), and adds 0.2 for being the current player\u0027s turn\n\nThe evaluation also adds a random number from [-1e-6, 1e-6] so the bot doesn\u0027t play in a very predictable manner (otherwise it\u0027s opener is to move a knight, and jiggle a rook)\n\nI use a negamax implementation with alpha-beta pruning. I doesn\u0027t use a search depth, instead, it uses a node budget, and allocates more nodes to moves which seem more optimal according to the evaluation. (Thus interesting moves get more priority).\n\nIt is reactive to time pressure (gives it an amount of starting nodes so it takes ~1/40 of the time left, and uses more nodes in the time after the opening.)\n\n"},{"BotID":"Bot_71","AuthorName":"Beamcrafter","BotName":"BC the simpel","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Other","Description":"The program does not try to predict the future, it looks if the opponent can win in the next move, but it does not look more than one or two moves into the future. The plan is simply to get the best out of the current situation."},{"BotID":"Bot_72","AuthorName":"not mario","BotName":"CCCP","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"The bot searches for, in this order:\n- Checkmate\n- Promotion\n- Check\n- Capture\nIf none are found, it pushes a piece further forward."},{"BotID":"Bot_73","AuthorName":"aria1400","BotName":"evilbot v2","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"my bot is just some spaghetti code that works"},{"BotID":"Bot_74","AuthorName":"rootNico","BotName":"DrunkBot","SearchKind":"Monte Carlo search (random playouts)","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_75","AuthorName":"Gamerninja","BotName":"NoNameBot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_76","AuthorName":"Brodie Eaton","BotName":"One-Man Army","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"The strategy is simple. Bring the King out asap, run him to the opposing team\u0027s fortifications, and remove the king\u0027s defenders, intimidating the enemy and giving them no choice but to resign.\n\nIt\u0027s quick. It\u0027s bold. It\u0027s confident. It scored 1 win, 140 draws and 859 losses playing against a bot that picks moves at random, and scored 0 wins, 23 draws, and 977 losses against EvilBot\n\nThe bot only analyses one move in the future, but most of the scoring is done based on the current position. It determines where the king will be in the most danger by finding the centre of the opponent\u0027s pieces and aiming to walk there, prioritising moves to brink the king\u0027s rank closer to the enemy ranks. I actually tried making it weigh enemy pieces based on their strength but found that was actually more likely to make the game draw. The same thing was true when analysing squares the opponent attacked, it actually became quite effective at forcing stalemate and if that were my intention I would have seen it through\n\nLooking one move into the future, it will count what percentage of the opponents moves are checkmates and give a huge bonus to any moves where the opponent is more likely to stumble into checkmate, and removes points from any move that makes the opponent more likely to draw.\n\nIf no good king-moves are found, the script will then find the closest piece to the king (priotising pieces on the king\u0027s diagonals) and move it away from himself, giving small bonuses if the piece is being hung in the process but not so much of a bonus to provide incentive to remove all the bot\u0027s pieces and risk a stalemate. \n\nOverarching the whole script is a basic priority-system which makes sure moves that lead the opponent to checkmate are chosen over normal moves, normal moves over promotions, promotions over captures, captures over draws, and draws over checkmates. Attempting to make a valuation system to make exceptions to this rule proved less effective than just making no exceptions and having some edge-cases be draws for it."},{"BotID":"Bot_77","AuthorName":"Maarten Peels","BotName":"OrionChessEngine","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"The 1024 token limit was by far the hardest challenge, I ended up encoding the 7 piece-square tables into a single array using bit shifting to lower my token use"},{"BotID":"Bot_78","AuthorName":"nadavfux","BotName":"fuxy","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_79","AuthorName":"Sybsuper","BotName":"SybBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Loved the challenge, I have been coding for as long as I can remember, but never coded a (somewhat proper) chess bot before."},{"BotID":"Bot_80","AuthorName":"Miguel Piedrafita","BotName":"Knightmare","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_81","AuthorName":"Bronson","BotName":"Paroch","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"This is my first chess bot, and I wanted to make something unique... So, I didn\u0027t learn any of the standard algorithms, didn\u0027t learn anything except... how to play chess, which I\u0027m not great at. lol\nMy idea was that my bot would evaluate the board state in a very similar way to how a human player with very little experience would: watching out for danger, playing strategically, but no actual ability to look ahead. \n\nAlso, I don\u0027t want to make too big of a point of this, but... I\u0027m extremely proud of my (absolutely gigantic, could definitely be more token efficient) \u0022Danger Value\u0022 system... But, I\u0027ve spoken with at least two people who have taken the idea and used it themselves. And I don\u0027t mind at all, I\u0027m glad they like the idea... But, really the major reason I\u0027m submitting this right now is so that I get credit for it. lol"},{"BotID":"Bot_82","AuthorName":"SiestaGuru","BotName":"Bruteforcer","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_83","AuthorName":"ts-manuel","BotName":"Trixie","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I am excited to introduce my impressive chess engine, which I created despite my limited understanding of the game. Remarkably, it consistently outperforms me in matches. Its success is due to its use of the minimax algorithm, which tirelessly calculates all possible moves to make the best decisions. While I tried to incorporate alpha-beta pruning to improve its efficiency, I couldn\u0027t quite get it right and had to leave it out. Overall, the challenge of developing this engine was immensely enjoyable and entertaining."},{"BotID":"Bot_84","AuthorName":"Christopher Hosken \u0026 Thomas Lower","BotName":"tom","SearchKind":"Monte Carlo search (random playouts)","EvalKind":"Handcrafted evaluation function","Description":"For tom, We decided to take the code given to us in EvilBot.cs, and have it predict future moves by calculating a custom score. When the bot reaches \u0022Endgame\u0022, it changes its strategy and aims to go for a King \u0026 Rook style checkmate. After playing 100 games against EvilBot, tom won 99-1-0. We look forward to seeing how it does in the tournament."},{"BotID":"Bot_85","AuthorName":"Jackattack1031","BotName":"THE KING HAS COOTIES!","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"I wanted to create the worst possible bot that is both small and isn\u0027t a pacifist. The idea is simple: maximize the pieces\u0027 distance from the king. I decided the best metric was the change in distance that each given move would produce. This of course means that pieces worth more material are the first to move as far as they can. I tried using different distance metrics such as the Manhattan distance but opted for Euclidean because it was the easiest to compact without access to the Math class. I think it will perform worse than random moves against fairly competent opponents, but I was too lazy to test."},{"BotID":"Bot_86","AuthorName":"Cameron Dugan","BotName":"Blitztron","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I liked the api\u0027s you implemented, they made implementing a bot really easy. I had about 10 iterations until this point, still going strong."},{"BotID":"Bot_87","AuthorName":"Daniel","BotName":"BadBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"My first try at making something like a chess bot or anything AI related. I have learned alot from it! Don\u0027t expect the best from it, I have no idea how to make it better as I already have put so much time into it."},{"BotID":"Bot_88","AuthorName":"Tjuli","BotName":"Vito","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_89","AuthorName":"Lukasb1b4b","BotName":"Stocksalmon","SearchKind":"Monte Carlo search (random playouts)","EvalKind":"Handcrafted evaluation function","Description":"I loved the challenge i hope there a more in teh future."},{"BotID":"Bot_90","AuthorName":"Bisque","BotName":"Hungry For Mates","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"aggro bot only wants to consume"},{"BotID":"Bot_91","AuthorName":"Hulululu","BotName":"The Visionary","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"The Bot tries to envision a checkmate (up to 4 moves while the opponent always skips) and goes for it. If it can\u0027t find one it just tries to win/not loose material (min-max only 1 move deep) and pushes pawns if it can\u0027t find anything better. Also, if time is getting low there\u0027s a panic mode in hopes of not getting flagged, and a \u0022let\u0027s flag the opponent\u0022 mode if the opponent is getting low on time, where the bot always chooses the move which leaves the opponent with the largest amount of possible moves (while not allowing checkmate)."},{"BotID":"Bot_92","AuthorName":"evgiz0r","BotName":"TheGriefer","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Well.... Hi :)\nI am Evgeni Bourd, a software engineer and also a chess player ( ~2100 elo )\nReally a fan of the channel, enjoyed a lot the planet generations and the simulations and everything basically.\nI wanted to make a bot that plays decently well but likes to grief, will prolong the game and humiliate the opposition.\n\nWhat do we have?\n* Alpha beta min max search\n* iterative search over depths, which is also some kind of our time management as we give up and take the best from what we finished searching so far, No need to recover partial results from the current search.\n\n* Transposition tables that include depths, being cleaned to half if getting high\n* Candidate moves search just by looking at the boards after the moves ( no calculations ) - leads to blunders some times as it misses an obvious move which is not a candidate.\nIts not so bad as the boards might already have an eval from some previous deeper calculations but still. \nFixing this requires too much code compared to other features.\n* Handcrafted board evaluation based on pieces\n\nA lot of code from Mr chat GPT, he(it?) is pretty good at optimizing ( tokens specifically ) into things i didn\u0027t even knew existed.\nBUT he is also so confident even when it posts garbage suggestions that don\u0027t work which I have to debug ( oh my god, many logical bugs which are SUPER hard to debug ) and he keeps apologizing...\n\nThe best elo spikes were -\n* Adding iterative search, where I dont have to quit searching in the middle and recover some kind of partial result.\n* Prolonging the depth of checks and captures during the min-max.\n* Adding to candidate moves pieces which are attacked\n\nSome ideas that were thrown off - \n* Panic mode add more candidate moves when finding checkmates for opponents\n* Better board evaluations due to attacks - chatGPT is actually pretty good implementing all the stuff given the API but its just so much code\n* More refined candidate move calculations due to the nature of the move\n* Adding alpha-beta to the transposition tables\n\nI like the struggle with the number of tokens, it adds a different aspect to such challenges.\nYou have to choose between features, and also optimizing your code into weird calculations to save tokens.\nWho knew that if-else statements can save so many tokens if you just remove the brackets? :))) \n\nI think its overall OK in strength ( would say ~900-1300) , moves pretty consistently.\nDoes blunder horribly here and there but adds to his personality :)\n\nEnjoyed the process, but one can go insane debugging chess engines"},{"BotID":"Bot_93","AuthorName":"Isaac Ellwood","BotName":"AIsaac","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"It was a fun challenge to take part in! I don\u0027t think I\u0027ll do well, but I\u0027m curious to see what everyone can come up with."},{"BotID":"Bot_94","AuthorName":"Hulululu","BotName":"5KindsOfChessplayers","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"The Bot knows that there are only 5 Archetypes of chessplayers. The greedy ones, always taking any material you give them; The defensive ones, who never want to allow you to capture anything; The checkers, who always give the first check that comes to their minds; the pawn pushers, always pushing any pawn; and the intuitive players, always playing the first move that comes to mind. The bot plays 3 moves against each of those in his head and makes the move that is best against all of them. When time runs out the bot only plays two moves in his head and when it has less then 15ms on the clock it goes into panic mode, making any random move hoping not to flag."},{"BotID":"Bot_95","AuthorName":"","BotName":"Two Day Bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_96","AuthorName":"M","BotName":"Chess Bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"The chess bot is an implementation of the minimax algorithm with alpha-beta pruning. It considers piece and positional values in its evaluation function, and efficiently explores the game tree by ordering moves based on evaluations."},{"BotID":"Bot_97","AuthorName":"Jesse","BotName":"NotVeryGood","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"It is very, very bad, but it\u0027s the best I came up with. What is does is basically sort the capture moves from high value to low value, and then tries to find the highest-value capture move that is either a safe move (can\u0027t be captured back) or worth the sacrifice (gained more that it gave up)."},{"BotID":"Bot_98","AuthorName":"Zaid Alas4","BotName":"Shadow","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"It detects mate in one and avoids drawing in one move if it is winning"},{"BotID":"Bot_99","AuthorName":"Sam","BotName":"Sambot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Nice simple 2-ply search \u002B random choice otherwise"},{"BotID":"Bot_100","AuthorName":"Jo\u00E3o","BotName":"PrayForMeBot","SearchKind":"Other / Idk","EvalKind":"Other","Description":"I don\u0027t know any details I coded random ideas to see if worked."},{"BotID":"Bot_101","AuthorName":"ELEMENTLHERO","BotName":"HERO-bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_102","AuthorName":"Loeka","BotName":"Single Player","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"I would\u0027ve appreciated a way of adding numerous bot files to your program and getting a sort of leaderboard statistic (after letting it run overnight). It would allow someone to test against their own tweaked versions or other bots"},{"BotID":"Bot_103","AuthorName":"Strikeeaglechase","BotName":"Strikeeaglechess","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"First time implementing a chess engine, went into this blind. Bot is fairly standard, nothing much special, using transposition tables, move ordering, and Negamax. "},{"BotID":"Bot_104","AuthorName":"Yujan Subedi","BotName":"Toribot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_105","AuthorName":"AntVil","BotName":"NotSoEvilBot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"taken EvilBot \u002B checking capture value relative to the pieces \u002B minor edge-cases (fully deterministic \u002B quite small Bot Brain Capacity)"},{"BotID":"Bot_106","AuthorName":"M\u00F6hrchen (Thilo M.)","BotName":"Miluva v2 [2550]","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Compared to Miluva v1 (TLMChessBot): \n\n\n---\n-\u003E Search\n---\n\nIn general, I have rewritten the Minimax algorithm to a Negamax algorithm in order to save a variety of tokens.\nThese have now been implemented in a Transposition Table, a History Heuristic, Null Move Pruning, Late Move Reductions, and a Delta Pruned Quiescence Search.\nAdditionally, the search horizon is expanded up to 18 times when a check occurs.\nNull Move Pruning cannot occur in two consecutive nodes, nor when there is only one possible move.\nThe Late Move Reductions worked best in my search when they could only occur starting from the ninth move of the pre-sorting. \nI dont use the Transposition Table only for its usual purpose, because similar to a Killer Heuristic, it is storing Beta Cutoffs as well.\nSince the check extensions occur in the Minimax function, the Quiescence Search only looks for captures. \nThe History Heuristic seemed to work best with a 2x64x64 array. (Player, SquareFrom, SquareTo)\n\n---\n-\u003E Evaluation\n---\n\nI have opted for a very minimalistic evaluation, which only considers the values and positions of the remaining pieces and gives small bonuses for a better pawn structure as well as castling rights. \n\n---\n-\u003E Conclusion\n---\n\nThe challenge has definitely still been a lot of fun for me. \nIn my test run, Miluva v2 has now won 48 times against my first version, drawed 2 times, and lost 0 times. (50 matches)\nSince I have invested some good amount of time into this small program, I hope it is not one of the worst ones and worth submitting \uD83D\uDE42"},{"BotID":"Bot_107","AuthorName":"Big red","BotName":"Crazy? I was crazy once. They Locked me in a room. A rubber room. A rubber room with rats. Rats make me crazy.","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This challenge was really fun. I\u0027ve been watching your channel for a long time and your beginner programming series got me into programming so it was exciting to be able to test my skills in this challenge. I\u0027ve worked on a couple of projects before in unity but learning a new API has been really interesting. I thought that the docs could use some help but overall the challenge has been great!"},{"BotID":"Bot_108","AuthorName":"Conor","BotName":"Matey","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"Matey is a greedy bot. It plays simple chess, going for checkmate, checks or captures in that order. Failing that, Matey will attempt to safely grab space in the opponent\u0027s territory. Don\u0027t try to capture its pieces, Matey doesn\u0027t know how to defend."},{"BotID":"Bot_109","AuthorName":"Jacob Sweeten","BotName":"DeepScaredyBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Always take the safest move possible (avoid high danger scores). Recurses 4 layers deep with alpha-beta pruning."},{"BotID":"Bot_110","AuthorName":"Hagan Gray","BotName":"EvilMirror","SearchKind":"Other / Idk","EvalKind":"Other","Description":"I have included some description and details in the code, if you want to have a look."},{"BotID":"Bot_111","AuthorName":"Pete","BotName":"No Brain but Hungry","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"No machine learning, no recursion, no search. Just evaluating the possible moves based on more or less common sense without going down the rabbit hole of recursive path finding.\n\nI had trouble using the SquareIsAttackedByOpponent which gave me not consistent results. I therefor implementet my own FigureIsInDanger which tells me if a square is attached before or after move based on the opponents possible capture move target squares.\n\nI commented out some Console.Write as they cost tokens, but left it in the submission. \nAlso, I commented my coding for your amusement.\n\nIt was a fun idea and it was my pleasure to beat EvilBot."},{"BotID":"Bot_112","AuthorName":"Dominik","BotName":"Saubstauga","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_113","AuthorName":"taylornpeter","BotName":"taylornpeter_chess_sl","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"If you are reading this, I thought the competition closed on the 1st of August, not the 1st of October so I submitted this one early. :)"},{"BotID":"Bot_114","AuthorName":"THE CATS","BotName":"THE CATS BOT OMG!!!!!!!!!!!!!!!!!","SearchKind":"Other / Idk","EvalKind":"Other","Description":""},{"BotID":"Bot_115","AuthorName":"Salty Scientist","BotName":"Single Player","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This bot saves a lot of time on minimax search by only considering its own moves. \u0022Bad\u0022 moves that lose pieces are only punished by the evaluation function. \n\nUsed LHS sampling to optimize some of the parameters exposed in the evaluation function. It\u0027s surprisingly strong for something that only looks 1 layer deep, but has barely any end-game skills. "},{"BotID":"Bot_116","AuthorName":"Jackk","BotName":"MirrorBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Complete beginner to chess bot coding so I just played around with bitboards. Initially there was no way to get the opponents move so I explored an idea around copying the opponents positioning, best case scenario would end up in draw, so not competitive at all."},{"BotID":"Bot_117","AuthorName":"Thomas / TGhost","BotName":"BettyBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This is a very simple AI, nothing complex. It runs at a depth of 4 on my computer. Its not great, but atleast it can beat EvilBot lol "},{"BotID":"Bot_118","AuthorName":"Gary Dale","BotName":"BotThatLikesToPlayChess\u2122","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Hi, This is BotThatLikesToPlayChess\u2122, a bot that likes to play chess. \\n He searches all moves with a depth of x where  (x \u003E= 5  \u0026\u0026  (x % 2) == 1), sure it may say 4 but then theres the first scan, i\u0027ve compressed the code way too far 2 use less tokenzzz, i also plan on adding move ordering 4 speed, but thatz kinda for later."},{"BotID":"Bot_119","AuthorName":"kesslwovv","BotName":"kesslbot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_120","AuthorName":"Ghost_Dev_84","BotName":"EldenBot","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_121","AuthorName":"Raj Gaurav","BotName":"broken bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"this was the first coding challenge and i think i failed the test may things in this bot are not working i couldn\u0027t figure out why"},{"BotID":"Bot_122","AuthorName":"qumquat","BotName":"TeacherBot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Other","Description":"Really well put together challenge, super easy to set up and work with. This bot goes for the Scholar\u0027s Mate with white and plays random moves otherwise. This was the most straightforward and simplest idea I could think of to try and pick up some wins with the bot. I thought it might be interesting to see if it \u0022catches out\u0022 any other bots and matches well into them. "},{"BotID":"Bot_123","AuthorName":"logario","BotName":"BotBert","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Researched everything what is possible for an chess ai and implemented the ones which were possible for me and my level of programming"},{"BotID":"Bot_124","AuthorName":"David Montealegre","BotName":"Depth2","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"My code does better when looking further ahead, but takes too long. Attempts to cut the number of searches either didn\u0027t help with performance or time."},{"BotID":"Bot_125","AuthorName":"Domic","BotName":"BaddieBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_126","AuthorName":"bobq","BotName":"Shakki botti","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"it finds a way that it could take the king and either players the move to get to the position or if that is unsafe do the best move it has available "},{"BotID":"Bot_127","AuthorName":"kachim2","BotName":"Trash LITE","SearchKind":"Monte Carlo search (random playouts)","EvalKind":"Other","Description":"It is at least inspired by Monte Carlo Tree search. It just checks random playauts a couple of times. It always takes 1 second to complete. The less time is remaining, the shallower is the search. Losing has higher weight than winning in the search."},{"BotID":"Bot_128","AuthorName":"Samo","BotName":"C\u002B\u002BIsBetterThanC#","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_129","AuthorName":"Mike Chemi","BotName":"Chemibot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This challenge has been an absolute blast :) I used a \u0022checks, captures, and attacks\u0022 methodology. For the current position, I first try to minimize material loss. Then I prefer to make checks first, (safely) capture other pieces, or put pressure on other pieces last. If all else fails, I push a pawn.\n\nI\u0027ll add more detail later if I end up submitting a new version."},{"BotID":"Bot_130","AuthorName":"jostflo","BotName":"EndgameEnigma","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Implementation: The evaluation is based mostly on the move rather than on the position. The notabe exception here is the King safety of the opponents and its own King. "},{"BotID":"Bot_131","AuthorName":"Jeroen","BotName":"Cheatos","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"I tried to use heuristics to come up with the best move. It seems to work reasonably well against Evil bot. It was a fun challenge. My bot got some nice mates on the board as well."},{"BotID":"Bot_132","AuthorName":"lolwhatyesme","BotName":"IHadWorkSoDevelopmentStoppedEarly","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"It was fun, but for slaves there\u0027s little time for fun"},{"BotID":"Bot_133","AuthorName":"ChrisCat123","BotName":"MinimaxAttackerBot5000","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"My implemantion is a bit rocky but I should work. I upgraded it with some slight improvements and it is WAAAAY faster. Although even the chess bot V1 could probaly crush it."},{"BotID":"Bot_134","AuthorName":"h1387xd","BotName":"crapus bottus","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"my strategy to make the bot so bad its good"},{"BotID":"Bot_135","AuthorName":"hakrackete","BotName":"pawnHater300","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_136","AuthorName":"SebastianB","BotName":"Chessy","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"Thanks for a Good challenge, finally I had a reason to learn c#."},{"BotID":"Bot_137","AuthorName":"Youknowwho8782","BotName":"MrTimmy","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"My bot is a bot that uses a search function and it also uses a IsBlunder function to check if a move is a blunder using this the bot will decide the best move, it also has a huge table of all of the square on the board where they are rated for best place for the king! "},{"BotID":"Bot_138","AuthorName":"Jechto","BotName":"Flaeskesteg","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"The implementation uses standard minimax search with alpha beta pruning without edge search. My evaulation function works by storing each piecesquare table using ulongs. "},{"BotID":"Bot_139","AuthorName":"cyprus327","BotName":"Francis 2.0","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I didn\u0027t do into this with the goal of winning (although I will be rooting for my bot of course), but moreso just to see how well I could do on my own. There\u0027s a ton I still want to add, but the bot brain capacity is holding everything back. Overall, bot brain capacity was definitely the main challenge compared to the other rules. Also the bot is named after the Francis bot on chess.com."},{"BotID":"Bot_140","AuthorName":"GameBoy19 und Pete877","BotName":"EatingAndBeingEaten","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_141","AuthorName":"Sesen","BotName":"Shielded Minibot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Basic minimax algorithm. I more or less went over your two chess videos and stole as many of the ideas that could fit. Positioning was tricky since a matrix would take up to much space. First time working with C#, so it was interesting to figure out the optimizations (chatgpt definetly helped)."},{"BotID":"Bot_142","AuthorName":"NotSureWhyThisWorks","BotName":"Minimaxibon v1","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_143","AuthorName":"abariba","BotName":"abariba","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Lovely challenge very intuitive setup this was a lot of fun . I keep it fast and simple,  I don\u0027t expect my bot to end up in the top 50 even I can still beat it but I hope it will do above average."},{"BotID":"Bot_144","AuthorName":"Ephraim225","BotName":"Caissa Alexander","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"Every possible move is given a score based on factors such as: value of captured piece, how many new moves are enabled, how many pieces are under attack before and after the move is played, and the value of pieces attacked. The highest-scoring move is always played, and if more than one move ties, a random tied move is played. Castling and Mate-in-one take priority over everything else, but it tries to avoid getting into a position where it can be mated in one. Stalemates are avoided (mostly) so long as there is still sufficient mating material."},{"BotID":"Bot_145","AuthorName":"Illuminate","BotName":"Astolfo","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_146","AuthorName":"Tom R.","BotName":"OneHundredAndEighty","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"I used the EvilBot as my foundation and scored each move after parameters i thought would make the bot better. I tried to encourage EnPassant and Castles and captures, to loose litte pieces. In the endgame (opponent pieces \u003C 5) I try to promote pawns to help win."},{"BotID":"Bot_147","AuthorName":"Lucas Pellegrinelli","BotName":"The Seeker","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"The search algorithm is an iterative deepening MinMax with Alpha-Beta Pruning and Quiescence. The search ordering optimizations come from Principal Variation tables, MVVLVA (Most Valuable Victim, Least Valuable Aggressor) and Killer heuristics.\n\nAfter that all my tokens were gone, so my evaluation function is basically just a heuristic that fights for the center and tries to capture pieces based on their value.\n\nI really enjoyed studying and coding search algorithms and got really into that while developing my bot. Suddenly I realized I didn\u0027t have any more tokens left to implement a good evaluation function so it is just a simple one. The bot\u0027s name \u0022The Seeker\u0022 is related to that, it really likes to search the position, but doesn\u0027t know what a good position is hahaha"},{"BotID":"Bot_148","AuthorName":"CJS","BotName":"ExtremelyShortsighted","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Other","Description":"I\u0027ve never done any type of C programming! My idea was to just manually check the current board positions to play good takes and move pieces that are in danger. There\u0027s quite a few bugs but it\u0027s doing its best!"},{"BotID":"Bot_149","AuthorName":"mhart","BotName":"Hammerhead","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_150","AuthorName":"jmcg","BotName":"jmcgbot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"It would be useful if there was a board.Clone() method, so that we could make moves on a copy of the board and then throw it away, instead of having to undo moves on the main board.  This would also make a MCTS engine, which was my first (failed) attempt, easier to implement, since an important step in that algorithm is to discard the simulation once it has played out."},{"BotID":"Bot_151","AuthorName":"JacobAndSam","BotName":"CompressTable","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Tried compressing the piece position score tables into 4 bits each"},{"BotID":"Bot_152","AuthorName":"Taylor Lineman","BotName":"Attempts to win","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_153","AuthorName":"Alec Holden","BotName":"WhateverBot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"While I\u0027m not sure my bot will fare well against more advanced bots that can look multiple moves ahead, I still had a lot of fun making it.\n\nOne thing I found particularly interesting about the challenge was trying to fit my code within the token limit without removing functionality. By using techniques such as removing functions that are only called once, removing braces around single line if statements and defining multiple variables of the same type together, I managed to reduce my code by over 500 tokens.\n\nOverall, I thoroughly enjoyed the challenge and I look forward to the YouTube video."},{"BotID":"Bot_154","AuthorName":"Kerem Bekmez","BotName":"Marvin","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Just like a human learns to play chess, except with no mistakes."},{"BotID":"Bot_155","AuthorName":"Nathan George","BotName":"CompressionBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I worked a while on getting its endgame performance to be better by adding rewards for kings closer to each other, the center, etc but not much works. The most interesting part of my bot is the use of 764 weights for each of the squares packed into a lot of unsigned longs that i compressed using python. I hope it does well :)"},{"BotID":"Bot_156","AuthorName":"kooleerv","BotName":"Blundering Baggins","SearchKind":"Some form of minimax search","EvalKind":"Machine learning evaluation function","Description":"I used Alpha Beta Pruning using a small (really small, no hidden layers, 64 input 1 output) neural network. This network has a couple of tendencies (like moving the queen out early), also, it likes knights on edges. \nI tried to fix this behaviour using rules (i.e. if move is: Move knight to edge, multiply eval by some amount). I tried to figure out these multiplications (s because I had many) using a genetic algorithm, but it never converged onto a better engine :\u0027( - so I just gave up. I also tried just brute forcing, but I had a bug in my code, and don\u0027t have the time to fix it.\nSo my engine still plays terribly :).\n\nThe GA impl: https://github.com/noelhug/Chess-Challenge/blob/fdb5b34a4a5633a097304daef1469e6e1cc6c72f/Chess-Challenge/src/Framework/Application/Core/ChallengeControllerOptimizer.cs"},{"BotID":"Bot_157","AuthorName":"P Rivero","BotName":"Turochamp (Modern)","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"My goal was to reconstruct the first chess-playing program, created by Alan Turing and David Champernowne in 1948, many years before the first computer capable of running it was built.\nThe algorithm, known as \u0022Turochamp\u0022 or \u0022Turing\u0027s paper machine\u0022, is considered to be the first computer game ever created, even though it was never actually run on a computer. For each move, it reportedly took Turing 15 to 20 minutes to compute the result by hand (with a depth of 3 ply).\n\nThere aren\u0027t any good open-source implementations of this algorithm, and Turing\u0027s notes are ambiguous, so the most challenging and fun part was trying to interpret those notes in a way that is faithful to the original yet efficient and compatible with a modern alpha-beta search.\nIf you want to know more about my journey, please read the readme.md of my repository:\nhttps://github.com/p-rivero/Turochamp-Chess-Challenge\n\nSince the competition allows submitting 2 engines, I made 2 versions of the algorithm: a FAITHFUL implementation, which limits the search depth to 3 to make you feel like you are playing Turing (minus the 15-minute wait), and a MODERN implementation with iterative deepening and doubled piece material values. As you can imagine, the faithful implementation is not very strong, and the modern version is slightly better.\n\nThis submission corresponds to the MODERN implementation."},{"BotID":"Bot_158","AuthorName":"P Rivero","BotName":"Turochamp (Faithful)","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"My goal was to reconstruct the first chess-playing program, created by Alan Turing and David Champernowne in 1948, many years before the first computer capable of running it was built.\nThe algorithm, known as \u0022Turochamp\u0022 or \u0022Turing\u0027s paper machine\u0022, is considered to be the first computer game ever created, even though it was never actually run on a computer. For each move, it reportedly took Turing 15 to 20 minutes to compute the result by hand (with a depth of 3 ply).\n\nThere aren\u0027t any good open-source implementations of this algorithm, and Turing\u0027s notes are ambiguous, so the most challenging and fun part was trying to interpret those notes in a way that is faithful to the original yet efficient and compatible with a modern alpha-beta search.\nIf you want to know more about my journey, please read the readme.md of my repository:\nhttps://github.com/p-rivero/Turochamp-Chess-Challenge\n\nSince the competition allows submitting 2 engines, I made 2 versions of the algorithm: a FAITHFUL implementation, which limits the search depth to 3 to make you feel like you are playing Turing (minus the 15-minute wait), and a MODERN implementation with iterative deepening and doubled piece material values. As you can imagine, the faithful implementation is not very strong, and the modern version is slightly better.\n\nThis submission corresponds to the FAITHFUL implementation."},{"BotID":"Bot_159","AuthorName":"","BotName":"Swag Messiah","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"naive bot, implementing simple strategies"},{"BotID":"Bot_160","AuthorName":"new9xboy","BotName":"DoTungDuong","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"i like it XD"},{"BotID":"Bot_161","AuthorName":"cmdrsigsegv","BotName":"bLouBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Was great fun, and I wish I could have spent more time on this, unfortunately life is busy.\n\nI love your videos!"},{"BotID":"Bot_162","AuthorName":"Till Zemann (GitHub: https://github.com/till2 :D)","BotName":"BitBlunderer","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Hey Sebastian, thanks for the cool challenge!\n\nFor my try at a solution (that uses 881/1024 brain capacity), I\u0027ve used some simple heuristic maps that multiply with the piece values to encourage generally good behavior, e.g. that pieces should be active in the center and that the king should avoid the center. These maps change over time. They depend on the number of pieces that the opponent has left (with pawns being counted a bit less compared to regular pieces). This lets the king be more active in the endgame etc.\nThese maps are created as circles (using the euclidian distance from the center) to avoid a lot of code for their creation. \n\nThe algorithm itself is a simple minimax with alpha beta pruning and a lookup table that is constrained to 200mb. One additional thing that I added is move ordering so that potentially promising moves (captures, en passant, promotions, castles) are looked at first, which also benefits the alpha beta pruning approach.\n\nAlso, the depth limit changes with the remaining time, so that the bot can move faster if it gets in time struggles.\n\nWhat didn\u0027t work for me was adding a new search that only looks at captures after the minimax reaches its depth limit. But it might just have been an implementation issue :P\n\nSomething I\u0027d be eager to try is using reinforcement learning, but I was pretty sure that a good model would not fit into the given constraints."},{"BotID":"Bot_163","AuthorName":"mcngnt","BotName":"Grenouille","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I focused on search rather than eval (I used PESTO\u0027s eval \u002B a penalty when in check). I started by using a basic negamax algorithm and then used the chess programming wiki to add features while finding convoluted refactoring techniques to make everything fit within 1024 tokens. The techniques used are :\n - Transposition tables\n- Killer moves\n- Null Move Pruning\n- Late Move pruning\n- Futility pruning\n- Reverse futility pruning\n- History Heuristics\n- Move ordering with MVV-LVA\n- Pesto\u0027s Eval \u002B check penalty (the 12 PESTO\u0027s PST were packed into a single 64 decimal array by packing 12 sbyte into a single decimal)\n- Texel tuned search and eval parameters (I used the chess tuning tool python library)\n- I tried using delta pruning, but that was unsuccessful\n- I also tried using the countermove heuristic, but it was too token intensive for such a little performance boost (10 ELO)"},{"BotID":"Bot_164","AuthorName":"weasel","BotName":"MintMax","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I tried to make a minimax bot and include different strategies from the chess programming wiki. However most simple additions just made the bot miss obvious things and loose agains my most simple version. I don\u0027t know how y\u0027all make those pruning techniques work, so I decided to make a simple bot instead. I also found a good way to make it finish any kind of 2 piece winning endgame by evaluating the king positions in a special way depending on which bishop is still around. The time control is TBD"},{"BotID":"Bot_165","AuthorName":"Ryan Murphy","BotName":"The Terminator","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Hi! I\u0027m 18 years old and just going to college. I want to eventually make a career out of AI, so I figured this would be a fun exercise to get my feet wet (Also I procrastinated until like a week before the due date so that was an added challenge). Also love your videos \u003C3"},{"BotID":"Bot_166","AuthorName":"Finian P.","BotName":"Wyrm","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This is my first project in C#!\n\nThe bot procedurally generates Piece-Square-Tables at the start of each move, then uses only those as the evaluation in a minimax search.\n\nI tried to include things like pawn structure and king safety in the Piece-Square-Tables, and I think it\u0027s interesting to see how it uses those strategies without actually looking at them again in the leaf nodes."},{"BotID":"Bot_167","AuthorName":"VY Canis Majoris (also special thanks to Gurren Lagann)","BotName":"Betelchess","SearchKind":"Other / Idk","EvalKind":"Other","Description":"This bot uses the current position of Betelgeuse in the sky as seen from the Mount Wilson Observatory to select a move. As I have almost no experience in making chess bots, I decided to make a terrible bot that nevertheless determines moves in a creative way. This is also my first time using C#, though I have coding experience from other languages."},{"BotID":"Bot_168","AuthorName":"ADI","BotName":"CopyCat","SearchKind":"Other / Idk","EvalKind":"Other","Description":"Just a fierce enemy that copies your every move until he cant, sadly when he needs to think for himself he quickly aims for a draw or looses :(.\n\nPretty interesting challenge sadly due to other Projects i was lacking a bit of my own creativity and time, but im still exited to see your Video and what other people came up with.\n\np.s. thanks for hosting this Event for all of us and i am huge fan of all you content keep it up."},{"BotID":"Bot_169","AuthorName":"Thomas Jahn, Mike Sherwin, Dmitry Shechtman","BotName":"TalkChess","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"It was delayed because I knew nothing about C#. Hopefully it will be more advanced by the deadline."},{"BotID":"Bot_170","AuthorName":"Oristur","BotName":"HubertusChess","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This is my first major project in programming and the first ever in C#. As it is unfinished, things like a transposition table, iterative deepening and parts of the planned eval function are still missing. The idea of the latter was to count the squares that are controlled by either side, potentially (todo) weighted by if the square is occupied and if true by what piece, how often a square is attacked by both players or if the square is next to opponents/own King."},{"BotID":"Bot_171","AuthorName":"Tex","BotName":"Boht","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_172","AuthorName":"Level 0 Kaan","BotName":"Kaan\u0027s Majestic Gentlemen","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"There is importhance hierarchy for moves. Firstly, your nightmare (Kaan\u0027s Majestic Gentlemen) find the mates (for both itself and its opponent) and makes suitable moves to mate or to prevent opponents mate. It is its priority. And then it makes move to generally gain pieces and save its pieces. With this, it tries to have more quality position and tear to pieces its enemies."},{"BotID":"Bot_173","AuthorName":"Ben","BotName":"TunaTactician","SearchKind":"Some form of minimax search","EvalKind":"Machine learning evaluation function","Description":""},{"BotID":"Bot_174","AuthorName":"Wiechciu","BotName":"Annihilator","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_175","AuthorName":"jibux","BotName":"jebChess","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"In the nineties I read some articles about alpha-beta. I used it to write some simple games. For this challenge I looked for some informations on wikipedia. I discoverd later all your work. "},{"BotID":"Bot_176","AuthorName":"Andrew Merrill","BotName":"Euphoria","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Tons of fun, while also destroying my brain. I learned so much, but spent so many hours perusing through chess forums, the chess wiki, and random YouTube videos. I\u0027d do it all again in a heartbeat, although the next time I wouldn\u0027t be starting from scratch! The bot is named for the euphoria I felt after finishing it, understanding all of its constituent parts, which are pieced together from other solutions to create my masterpiece. It may not be the best there is, but it was a labor of love."},{"BotID":"Bot_177","AuthorName":"julie","BotName":"en passant bot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"just cycles through list of possible moves, and does random moves unless en passant is possible"},{"BotID":"Bot_178","AuthorName":"AGentW29","BotName":"\u0027Knight\u0027mare","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_179","AuthorName":"Arnt Veenstra","BotName":"Beancounting_pawnpusher","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"My bot uses minimax including alpha-beta pruning. It includes a limited quiescence search. Apart from that it likes to push pawns and it counts material. It was fun to implement. I enjoyed when this bot plays against EvilBot at just a second for the entire game and it manages to win about 960 out of 1000 games."},{"BotID":"Bot_180","AuthorName":"Victor","BotName":"S\u00F8rensen\u0027s Minimax","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"First time trying to implement a Game AI. It was super fun trying to tweak and optimize it, but I settled on this even though I wanted to implement iterative deepening. I felt that it tended to end up with repetition draws a lot, so I think a deeper search might have helped but if I just upped the depth then it usually didn\u0027t play that well because it wouldn\u0027t get through the entire search."},{"BotID":"Bot_181","AuthorName":"TrangML","BotName":"Greedy-Dumb-Bot","SearchKind":"Some form of minimax search","EvalKind":"Machine learning evaluation function","Description":"I use fixed weights for my model, which are set to the output of a Random instance with a set seed. Only the weights of the model are learned, which are finetuned from a dataset of Stockfish evaluations with FEN representations. "},{"BotID":"Bot_182","AuthorName":"Tylyr1","BotName":"tybot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_183","AuthorName":"athibaul","BotName":"GPTGenerated","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I asked ChatGPT to write a minmax algorithm, and coded a very simple evaluation function based on the material value, plus a slight advantage for placing pieces in the center of the board. All my attempts to refine the search or evaluation functions failed miserably, so... I will stick to this version, I guess."},{"BotID":"Bot_184","AuthorName":"","BotName":"Chessinator 3000","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I\u0027ve never done much with AI before and deliberately didn\u0027t look up anything related to it for this challenge, so I have no idea how unorthodox it is. It works by calculating the value of a move itself rather than the resulting board state, which is probably horribly inefficient, but I\u0027m too lazy to fix it."},{"BotID":"Bot_185","AuthorName":"Toffee","BotName":"Cirno the Smartest","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"My strategy was to make a chess bot. WHILE being stupid"},{"BotID":"Bot_186","AuthorName":"sten","BotName":"epik chess mastah","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This is the minimax algorithm with square piece tables.\n\nBefore I started doing this I knew nothing about how chess bots worked so I hope this is good enough.\n\nI have another bot I made as a joke which you can look at here if you want. https://pastebin.com/DY69XavW\nIt does violate a couple rules but it wasn\u0027t meant as a serious submission, i just thought it might be something that you would find funny.\n\nIt simulates a turing machine to generate random numbers, its entirely implemented from scratch in 2 days.\n\nDiscord: @stencode or sten#7163\nIn case you wanted to ask any questions."},{"BotID":"Bot_187","AuthorName":"Rune","BotName":"DrawMachine","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"My Bot is really agressive, it will pretty much always choose to Capture. If the Bot detects that the Enemy only has a queen left it goes into attack Mode and tries to force Check as much as possible. Its not a great Bot by a long shot but this was still super fun as a quick little side project."},{"BotID":"Bot_188","AuthorName":"Colin Schepers","BotName":"Culke","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_189","AuthorName":"Victor","BotName":"Bob","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"A simple minimax algo"},{"BotID":"Bot_190","AuthorName":"Thom De M.","BotName":"TheAlmightyEndBoss","SearchKind":"Other / Idk","EvalKind":"Other","Description":"My strategy is to make sure my bot never wins nor loses. \n\nAs a side note though, if what I provided breaks some system I\u0027m sorry! I thought it was a fun little submission as I know absolutely nothing about chess but still wanted to participate. Feel free to reach out to my email if needed :)"},{"BotID":"Bot_191","AuthorName":"Deathfile78","BotName":"Igris","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Hello, my name is Satvik, and this is my Igris, a character from Solo Leveling. This bot operates on a normal depth search algorithm with the addition of positional values. Each cell on the board has a positional value corresponding to every piece type, which influences its decision-making process, considering both Piece Capture and Positional Value while also looking two moves ahead. Ideally, I would have preferred a deeper search depth, but my laptop isn\u0027t the most powerful, causing it to take 5 seconds per move, making a depth of 2 suitable.\n\nOne of the advantages of my bot lies in its performance during both the opening and endgame phases. It secures a positional advantage during the opening, and in the middle game, it prioritizes piece trading while maintaining value. In the endgame, it focuses more on pawn moves, aiming for promotions unless a mate in two or a potential checkmate opportunity arises.\n\nOne significant challenge I faced was the size constraint, particularly with the positional array, which took around 900 capacity. Shrinking my code to fit within 124 characters proved impossible, leading me to remove positional values for rooks, queens, and kings since the opening primarily revolves around pawns, knights, and bishops. Additionally, I had to remove a function that determined if a square could potentially be attacked by a weaker piece, as it consumed a significant amount of space which made my bot capacity around 1500.\n\nBased on my tests against chess.com bots, I would estimate my bot\u0027s rating to be around 1300 Elo. That\u0027s all for now. May the best algorithm prevail!"},{"BotID":"Bot_192","AuthorName":"CptShini","BotName":"Jormungandr (but scuffed)","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I originally had more plans for this bot, but I couldn\u0027t figure out how to implement a proper \u0027already-searched\u0027 functionality so it could have a deeper search depth without taking ages.\n\nBefore making this bot, I had of course already watched your other videos on your chess bot, but I vowed to not rewatch them during the making of this bot so as to only come up with my own solutions; cuz I had already forgotten your solutions lmao (well how they worked at least).\n\nIt didn\u0027t go very well :\u0027)"},{"BotID":"Bot_193","AuthorName":"Frederik","BotName":"BetterThanRandom","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Thankyou very much for this challenge :) It gave me something useful to do during the summer break. "},{"BotID":"Bot_194","AuthorName":"Hugo Ingelsson","BotName":"Deerobot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Found this really fun, a lot of delving into chessprogramming.org! Also took the opportunity to practice commenting and documentation."},{"BotID":"Bot_195","AuthorName":"Jerome Engelbrecht","BotName":"YDepth","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I learned a lot about the way min-max and all related algorithms work, for these algorithms it was a question of examining existent work and optimizations, but what I did that was really fun, was implementing a custom way of storing the Pesto tables for evaluation purposes. Instead of using uLongs to store the values I made my own system to write, save and read PSTs in Decimals, which allows to store a lot more positions at the cost of some performance when reading the bit values."},{"BotID":"Bot_196","AuthorName":"Matt Suhay","BotName":"ChessButt2","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"The seemingly random numbers scattered about are the result of a genetic algorithm playing against itself a few thousand times. I\u0027m not sure why they are what they are, but it works! Also, had to use some very silly coding techniques to get everything to fit within the 1024 tokens :D."},{"BotID":"Bot_197","AuthorName":"Leon","BotName":"Pawnish Punisher","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Fixed Depth Negamax search, only evaluating piece value"},{"BotID":"Bot_198","AuthorName":"TheUnknown1050","BotName":"the (not so) wise bot of (not so great) insight","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This was my first time diving into the world of chess bots. I had no idea what I was doing when I first started. I found the concepts of minimax and alpha-beta pruning really interesting so I tried to understand how those two actually work. I ended up making a short video explaining the concepts because of how much I enjoyed it."},{"BotID":"Bot_199","AuthorName":"Peter","BotName":"BlueBat","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Just a simple bot with a minimax algorithm search function. It evaluates positions based on a combination of material worth and location on the board. The main limitation of the bot is that it\u0027s only able to search 4 half-moves ahead without taking too much time."},{"BotID":"Bot_200","AuthorName":"David","BotName":"SBFB","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_201","AuthorName":"steel chair","BotName":"charge forward v1","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"it\u0027s not too great, the idea was just to explore a bit. The bot moves forward only (until it runs out of valid moves that are forward, then it moves randomly)\n\nThere was no goal with this bot.\n\nfun challenge although perhaps a little bit more of quick start guides /examples for beginners would be more fun :)\n\nBugs? im not sure if it detects which side / king / color etc is correct for human readability but it seems to work, and ive removed the nooby debug prints since \u0022finishing\u0022 it."},{"BotID":"Bot_202","AuthorName":"Bee","BotName":"Simpleton.01","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Very simple bot to learn a bit about chess, a bit about C# and a bit about search algorythms."},{"BotID":"Bot_203","AuthorName":"Pavan Manish","BotName":"1o1","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_204","AuthorName":"MS","BotName":"Blindo","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"Really fun, only spent a few hours on this. Just does some basic \u0022pawn pushing good, forking is cool, don\u0027t capture defended pieces with your queen\u0022. Could be improved by encouraging moving pieces to safety."},{"BotID":"Bot_205","AuthorName":"vinctus","BotName":"vinctus","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"i only used myself and chatgpt, no other information"},{"BotID":"Bot_206","AuthorName":"Austin","BotName":"Maple","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This was my first big coding project, before this I had only done beginner projects like calculators and stuff. I\u0027ve been tinkering for a few years, so I\u0027m not 100% new. I used Chat GPT to help me with a lot of my code. I had to handle most of the logic and make the code work together. But when I started I didn\u0027t really have to know the syntax, and I still need it to some errors. \n\nI started the project by asking what I needed to build a chess computer and it gave me the basic steps, some of which I chose to use. I added to my function based on what was most important at the given moment. to start with, I built an evaluation function and set it to count the length of available moves. I hopped that would be easy enough to implement, and it would give me a spacial advantage. then I added piece values to the evaluation, and chat gpt built me a minimax function that I didn\u0027t understand yet. \n\nFrom here it started to actually look like it knew what it was doing. It started to make moves that looked like chess and had center control etc. though it still wasn\u0027t very good. \n\nFrom there I went bug hunting, I improved my code based on what was the most urgent improvement I needed. When I noticed my King just liked to move without any benefit, I changed the position value to 0 for a king move (that was mostly the number of available moves for each side) I wanted it to be possible to move the king, but have no advantage in itself. \n\nThen I focused on the openings because it didn\u0027t have any kind of opening theory. My pieces didn\u0027t have any kind of center control, so it felt very weak because of that. I didn\u0027t have the space to make an opening database and I couldn\u0027t think of how to say \u0022if any of these specific pieces has control of the center...\u0022, so I looked into my options and realized I could make a single Piece Square Table(PSQT) to cover every piece on the board. I made played out a chess opening on my physical chess board and looked at which squares would be the most commonly used in the opening. I then multiplied the values of the PSQT by the values of the piece bitboard, so that if there was a piece on any of the recommended squares, it would give me points. I wrote some code to encourage castling, and I made the queen square worth 200 points to discourage queen movement in the opening. This has the tradeoff of being more valuable than a pawn, so the queen might not move to take a pawn, but it will possibly move to take anything else. After board.PlyCount == 16, I no longer use the PSQT. \n\nWhen adding to my evaluation later on I found that anything that changed the evaluation in the opening tended to be harmful, so parts of my evaluation are only applicable if PlyCount \u003E 16, this includes increasing the depth.\n\nMy endgame theory was the next big hurdle. I found that I could often take all the pieces of previous iterations of my code, but I would draw through 50 move rule. I tried to implement a function to force the enemy King to the edge of the board, but that didn\u0027t work. Then I saw the code from the Coding Adventures chess bot video where the distance between Kings is measured and minimized. I could probably improve my endgame theory, but that was all I needed to convert a completely winning position into a win. When playing against itself, my code almost always either wins or loses, it draws very little, though it can try to draw if it thinks an evaluation of 0 is better than the alternatives.\n\nNext I mildly encouraged pawn movement, and encouraged promotion. \n\nI wrote some code that improves King safety by encouraging it to be next to my own pieces. I add value based on piecevalue \u002B= 120/piecevalue. So a pawn gets the most points if it protects the King, and the queen gets the least. This encourages my stronger pieces to protect the King if they have nothing better to do, but gives the most value to the weaker pieces.\n\nThen I focused on speed, I cleaned up a lot of if statements and for loops, and that made me about 20% faster on its own. \n\nI wanted a more efficient search algorithm, so I switched to alpha-beta pruning. At this point I was starting to understand C# much better, and was able to understand what I was getting from Chat GPT. I felt like I understood my code much better than Chat GPT did, and was able to understand the syntax much better as well. I could follow most of the logic from the alpha-beta pruning, but it\u0027s still kind of magic how it decides to prune some branches that it knows won\u0027t be the best move.\n\nI added code to search promotions and captures first so that the alpha beta pruning would be faster.\n\nI messed around with the depth function to find the optimal depth and I adjusted the depth based on time remaining and the amount of pieces on the board. I tested the depth against an identical evil bot with a slightly different depth function until I found a bot that had an optimal depth vs itself with a different depth. It has a variable depth count based on how much time is on the board, though I doubt it would have much improvement after the time limit reached 10-20 minutes, as the depth won\u0027t increase past 4.\n\nMy code was over the token length, so I copy and pasted the three functions, think, evaluate, and minimax, into chat GPT and told it to keep the same logic, but lower my token count.\n\nIt helped me to condense my functions so that I wasn\u0027t repeating myself. I made multiple if PlyCount \u003E16 statements into one piece of logic, it created Ternary statements instead of if statements. I was able to define variables in the line they were used rather than in a separate line. and I was generally able to condense things down. overall this increased my speed as well as helped me get into my size limit. \n\nI played against my bot with about the effort I could put into a 5-10 minute game while my bot had 1 minute. It beat me, so I\u0027m guessing it would be rated around 1200 on chess.com\n\nOverall it was a fun project and I\u0027ve been wanting to make a chess bot for a long time. The API was very helpful, and I don\u0027t think I would have done it without it at this point in my coding experience. 1024 tokens was a good length for the project, because it was short enough that I felt I would have the time and ability to write something, but long enough that I could actually build a somewhat capable bot. \n\n "},{"BotID":"Bot_207","AuthorName":"Steven","BotName":"StevenBot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"I decided to write a bot that attempts to play chess the way I (a very bad chess player) plays. I first wrote out my typical thought process for playing and tried to translate that to code. I think the most crucial thing is that I never really think more than a move or two ahead. Obviously this leaves a lot to be desired if you\u0027re actually trying to be good at chess, but it pretty reliably beats the naive bot included with the repo. It\u0027s not too bad for a bot whose really only mainly thinking about the current state of the board. The main gap is that sometimes, retreating a piece opens a more valuable piece to attack. I had plans to fix this but never got around to it."},{"BotID":"Bot_208","AuthorName":"Maddisch","BotName":"HekMate","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I couldn\u0027t beat my own bot after like the second iteration which was before I implemented minimax. \nIt seems moderately competent against EvilBot (IT CAN FINALLY CHECKMATE) so I am curious how it will go against other bots :)"},{"BotID":"Bot_209","AuthorName":"GinoPerrotta","BotName":"SimpleMCTS","SearchKind":"Monte Carlo search (random playouts)","EvalKind":"Handcrafted evaluation function","Description":"Aiming for the smallest code (as measured in this event) that forms a decent MCTS bot."},{"BotID":"Bot_210","AuthorName":"Dane Smith","BotName":"mini_yoda","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Alpha beta pruning with some move ordering optimizations based off of captures and killer moves. Simple evaluation of pieces and square position."},{"BotID":"Bot_211","AuthorName":"PatrickTalksALot","BotName":"Lord Chester of Ply5","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"First time doing anything like this! Had a lot of fun, and it also got me into the game of chess itself. I got to a point where any gain in elo would require a lot of work and school was getting to me, so I stopped. I could have improved it a good amount more, but the amount of work that I would need to do to get to that point was simply to much so I ended it here. I estimate an elo of 900\u002B. It can beat me at chess that is for sure, which was one of my main goals. Thank you so much for making this challenge! It was a great opportunity to get back into the coding space after such a long break! Would totally do something like this again!"},{"BotID":"Bot_212","AuthorName":"ZTS439","BotName":"Scarlet","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Just some goofy thing"},{"BotID":"Bot_213","AuthorName":"qumquat","BotName":"Some rules bot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Other","Description":"Has some rules to gives moves a priority, checkmate is best capturing high value is good, moving a piece out of danger is good and so on. If it isn\u0027t possible to make a \u0022good move\u0022 it tries to make a move that, if the opponent does nothing, on the next turn would allow for a \u0022good move\u0022. "},{"BotID":"Bot_214","AuthorName":"mdrwsh","BotName":"DareWitch","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"First time making a chess engine and learning C#, loving the experience, thanks for the opportunity!"},{"BotID":"Bot_215","AuthorName":"gml16","BotName":"gml16","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Thank you for organising this challenge :)"},{"BotID":"Bot_216","AuthorName":"","BotName":"Average Chess bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Trying to find out what features actually improved the bot was a pain. I still feel like my Transposition table is kind of underwhelming. When i tested a version with a Transposition table against one without it, i had to decide whether i would give the bots more time which would take really long or give them so little time that it kind of screws the results."},{"BotID":"Bot_217","AuthorName":"Paul Smooth","BotName":"BOTvinnik","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Just some random stuff, worked best in tests"},{"BotID":"Bot_218","AuthorName":"George Bland","BotName":"Epimetheus","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Be nice to my little chess halfwit :)"},{"BotID":"Bot_219","AuthorName":"TimFW","BotName":"Supertask-Time-Troubles","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Hey! Everything about the bots implementation is written in comments in the .cs file. But some more thoughts on the challenge as a whole:\n\nFirstup: Thank you for doing this! It was both educational and a lot of fun and it really inspired me to think about challenges that I could design myself (for now only in small scale, in my friend group).\n\nChess was a really interesting pick for a challenge. I like chess and I really liked learning about how chess-bots work, but I feel like there is not much creativity to explore *if* you want to be somewhat competitive. I\u0027ve been stumped many times trying to come up with something creative, because the basic mini-max search that most enemy bots will have implemented, completely stomps so many cool ideas. All the while you have to have some kind of mini-max search coded in yourself, because chess is just waaay to complex for anything remotely \u0022hardcoded\u0022. It feels like the \u0022personality\u0022 you can reasonably give your bot boils down to tweaking values and somewhat changing the evaluation. I feel like my entry gets around that by just being a bit of a \u0022nerdy joke\u0022. The bot itself doesn\u0027t have much personality, but the rules by which it plays are changed in a fun way, making it interesting to think about while being somewhat competitive, still.\n\nI am very ready to be proven wrong about my point though, when your video about all the other entries drops! That\u0027s just my impression .-.\n\n\nSoo thanks a lot for both your awesome videos (I took a lot of inspiration) and this beautifully created challenge. It\u0027s very clear that you designed it with tons of care and love. All the best \u003C3"},{"BotID":"Bot_220","AuthorName":"TimFW","BotName":"The Grandma","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Hey! I already submitted another bot, the \u0022Supertask Time Troubles\u0022 Bot. This bot is quite close in design to that other bot, with the difference that this one is actually fit for competition.\n\nIt\u0027s The Grandma Bot because it really takes its time to maximize the search depth, being quite unfazed by the timer. Just like a Grandma counting pennies at the checkout. There is definitely room for improvement in this bot, but I think it checks all the boxes for a decent entry and I\u0027m excited to see how it performs!\n\nI\u0027ve written my thoughts about the competition in the entry for the Supertask Time Troubles bot, so I won\u0027t repeat them here, other than: Thank you so much for creating this awesome challenge! It was lovely \u003C3"},{"BotID":"Bot_221","AuthorName":"Skae (Francesco)","BotName":"Spaghetto","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Well, after a certain point the challenge felt to me more like a code shrinking challenge than a bot creation challenge. This is the best I could do without further going into code shrinking :)"},{"BotID":"Bot_222","AuthorName":"PecanPie","BotName":"PecanPie","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I had never tried to build a chess engine before but it was something I\u0027ve thought about from time to time, and this was a very fun challenge. I tried a number of techniques to improve the engine from what I\u0027m submitting but I couldn\u0027t get any pruning or evaluation tuning to result in a noticeable difference to the strength of the engine. I don\u0027t think I have any sort of clever or groundbreaking approach but I\u0027m pretty happy with the number of search features I was able to pack into the token limit."},{"BotID":"Bot_223","AuthorName":"Orniflyer","BotName":"Smiley","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"Instead of trying to win the game, this bot tries to generate a smiley on the board. It\u0027s really bad at it though. Developing the bot was quite fun and I think this is the first time I\u0027ve ever used a bitwise operator since university. I was thinking about implementing a serious chess engine approach, just for predicting what the opponent would most likely play, to increase the chances of getting the smiley pattern. Since the bot was just a silly idea I decided against it and kept it as simple as I could."},{"BotID":"Bot_224","AuthorName":"Matt Enad (RobProductions)","BotName":"RP Bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This challenge truly tested my understanding of minimax and chess programming, and humbled me to a pretty huge extent. In the past few years, I\u0027ve developed games released on Steam that focused on chess-like segments as a major mechanic, and your Coding Challenge videos helped inspire that process. When I started coding for this challenge, I thought that I\u0027d have something usable in no time, but it turns out that I had to go back to the basics and ended up pouring a ton of time into debugging and understanding minimax even more so than before haha. \n\nThe \u0022RP\u0022 (RobProductions) Bot is built using similar techniques that I discovered while creating the aforementioned games. First, it does a really shallow search using minimax which gives a baseline result. I used a negamax approach with alpha beta pruning for performance. Then, a series of heuristic modifiers are applied for each move based on its potential, including its position on the board, whether it corners the opponent king, and whether it puts a friendly piece in danger (to avoid needless even trades). After these calculations are done, the highest value move is selected. Finally, some tricks are used to give the bot an edge such as increasing the depth of the search during the endgame and entering \u0022panic time\u0022 when the timer value is almost 0, so that a random move is selected quickly in order to avoid running out of time. \n\nAlthough this little contest truly stumped me and challenged me as a programmer, I\u0027m glad to be taking part in it. Best of luck to everyone that participated!"},{"BotID":"Bot_225","AuthorName":"GreenSalad_","BotName":"MinimalBot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"I was inspired by Tom7\u0027s \u0022Elo World\u0022 video, especially the \u0022min_oppt_moves\u0022 bot he made, and in that video the bot performs pretty well, so I want to see how this bot will performs in this challange.\n\nI use the same principle, plus some by me. So it\u0027s not 100% copy of that bot. But I think it\u0027ll be cool if it is actually performing good. I also like to see my bot in a YouTube video. Even if it\u0027s performing bad (or even become the worst bot), I think it\u0027ll still be cool."},{"BotID":"Bot_226","AuthorName":"Evan Leach","BotName":"Bob","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This bot is named after Bobby Fischer and also my dad. This bot always plays e4 as white (best by test!), and for the rest of the game also plays similarly to Bobby Fischer. My bot goes with its gut and aims for complex and tactical positions. It plays aggressively, and occasionally lucks out with a beautiful attack. More often than not, though, its calculations are horribly wrong and bring about a gruesome demise.\n\nI really enjoyed this challenge! Thanks for organizing it!\n\n-Evan"},{"BotID":"Bot_227","AuthorName":"pwahs","BotName":"ConvolutedBot","SearchKind":"Some form of minimax search","EvalKind":"Machine learning evaluation function","Description":"My main motivation in this challenge was to get some neural network experience, so I tried hard to make it work, even though the other bots on the discord were a lot better.\nThe token limit made me think that a convolutional net would have an advantage, since it reuses weights in multiple places, so you get more milage out of the same number of weights. The final architecture is mainly this:\n12x8x8-\u003E8x4x4-\u003E8x2x2-\u003E8x1x1-\u003E1\nwhere each layer are 8 2x2-filters, with no padding and stride 2. I tried stride 1 at first, but then the network would have 7 instead of 3 convoluted layers, and the additional weights and computational time made slightly better evaluation not worth it.\n\nAdditionally, I added a material component in the evaluation, i.e. counting material. I trained it separately (as a convolutional net with a 1x1-filter, followed by a pure linear layer). I used to use this because an earlier version of the net would suck in the endgame and never promote pawns to queens since the game is won either way. So if the game is \u0022won\u0022, I would flip over the evaluation to pure material, so that it captures enemy pieces and promotes pawns. Later versions of the net had better endgame behavior, so I stopped doing that.\n\nThe network is trained on 5.9 million \u0022quiet\u0022 board positions, i.e. positions without hanging pieces and where the side to move is not in check. This relies on the search implementing quiesence search, where the search depth is extended until the position is quiet. I was proud to come up with that idea myself, but of course there is nothing new with chess bots, it is apparently close to the standard way of training nets. Same applies to all search techniques I tried out. The ones that worked were just the standard technique.\n\nI tried to make the net incrementally updatable, but that used 200 additional tokes, and even made the whole bot slower. It apparently does not pay of at those tiny net-sizes.\n\nI also tried different network sizes. I had 10 or 12 filters per layer at some point, but going down to 8 made everything faster and freed some tokens. I suspect going further down would be even better, but at some point, it\u0027s not really a neural net anymore (-: \n\nTraining was done in python with tensorflow and keras. Target value was the sigmoid of the stockfish evaluation, because whether a winning position is \u002B15 or \u002B25 shouldn\u0027t matter, but without the sigmoid, a lot of the optimization effort went into that kind of thing."},{"BotID":"Bot_228","AuthorName":"Buildasaurus","BotName":"Buildabot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I had no experience coding bots before this challenge, so i got a lot of help from the discord server, which made the challenge a lot more smooth. It also made me capable of making quite a strong bot, even managing to beat yours! (which i\u0027m quite proud of)\n\nSo please do more of these challenges, it\u0027s great to have a goal to reach and a friendly community where you can ask for help, and quickly learn a lot."},{"BotID":"Bot_229","AuthorName":"DeveloperPaul123","BotName":"Leonidas","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This was quite the challenge! But I learned a lot and enjoyed applying search and evaluation algorithms to the bot. The token limit was quite the challenged, but I learned some interesting techniques in C# for concise code. "},{"BotID":"Bot_230","AuthorName":"Lauri R\u00E4s\u00E4nen","BotName":":3","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Very cool challenge for getting into chess programming!\n\nSubmission code also available at https://github.com/laurirasanen/Chess-Challenge"},{"BotID":"Bot_231","AuthorName":"Sixteen","BotName":"NotHuman","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I loved the challenge! The 1024 tokens forced me to be creative with my solutions."},{"BotID":"Bot_232","AuthorName":"Elliott D","BotName":"Wandering King","SearchKind":"Other / Idk","EvalKind":"Other","Description":"This is my first chess AI I\u0027ve ever made, and its behavior is simple. It always tries to move the king whenever possible. If the king can capture a piece (completely ignoring the type of the other piece), it will do that.\n\nWhat usually happens when I run this against EvilBot is the king will sit around at the start of the game, maybe capture something like the queen if it teleports to the other side of the board, let its entire army be destroyed as it moves back and forth in the starting area, then wander around the board capturing pieces. There are times where it can take out almost the entire enemy army by itself.\n\nMaking a meme chess AI was more entertaining than making an actually good one. I loved this challenge."},{"BotID":"Bot_233","AuthorName":"J-Square","BotName":"Little Brother","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"It just repeats whatever move the opponent makes. And if that move is not legal a random move is chosen. Back when I was a kid I used to play like this thinking it\u0027s smart(I am still bad at chess)"},{"BotID":"Bot_234","AuthorName":"Mikolaj W","BotName":"Shallow Blue","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I never used C# before so I was a bit slow to start, but your functions and their documentation were very helpful.\n\nI have build a probably pretty standard iterative deepening min-max algorithm with alpha-beta pruning. I sort the moves before branching in search and also consider what captures are possible when the search reaches the depth limit. I adjusted the reward system using my heuristics whenever I felt something was missing like pawns pushing forward towards promotion or king helping out with mating.\n\nThe biggest downsides are that the depth reached is not fantastic (usually 5-6) and there is no sense of what are good positions for specific pieces.\n\nIt was a lot of fun to write this code and see my bot improve! Thank you for organizing this!"},{"BotID":"Bot_235","AuthorName":"Ben","BotName":"Goldibot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Not too hot, but not too cold either. It beats me but probably no other bots"},{"BotID":"Bot_236","AuthorName":"Trololp","BotName":"DeadlineNightmare","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Uses some array magic for debuts."},{"BotID":"Bot_237","AuthorName":"OutdoorsyEngineer","BotName":"DeepDumb","SearchKind":"Monte Carlo search (random playouts)","EvalKind":"Handcrafted evaluation function","Description":"Focusses on rapid Monte-Carlo evaluation of legal moves, prioritized by a simple/naive move scoring function. There is no board evaluation per-se. The search tries to go all the way to the end of the branch and uses the numbers of wins/losses/ties over many runs to evaluate the root move. Before trying Monte-Carlo I first do some lookup for common early-game positions, then look for any immediate mate opportunities (win), then try to filter out moves that offer up an immediate mate response (loss)."},{"BotID":"Bot_238","AuthorName":"Soul Senshi","BotName":"AUR Chessbot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_239","AuthorName":"MrQui","BotName":"LetMeAlive","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"nice challenge but next time something different than chess. something more easly"},{"BotID":"Bot_240","AuthorName":"Felix","BotName":"Sir Checkmates-A-Lot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I followed your general implementation from your YouTube video (great videos btw). One unique thing is that the evaluation function values getting all pieces closer to the enemy king. That helps pieces move during opening play and slowly approach the king. Then it was some threshold thrashing with the timers to finish the games in time."},{"BotID":"Bot_241","AuthorName":"MV974","BotName":"AlphaBetaZero","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"My Bot is quite simple, it has the two usual components :  \n\n- the static evaluation function.\n- the search function.\n\nI started by implementing the search function and refine it the best i could with only the material count as static evaluation.\n\nThen I started to experiment with things I could add to the static eval. \nI tested a lot of things but most of them wouldn\u0027t strengthen my Bot because their effect would depend too much on the situation.\nFor example about king safety I gave an eval bonus if the king was surrounded with pawns of pieces. It would be very good in certain situations as it would give better defense but in others it would hurt, and adapting to situations would take too much code, so overhaul the effect wasn\u0027t that good for the amount of code it would take.\n\nTherefor, I tried to focus on things that would \u0022always\u0022 have positive effect. Those are :\n\n- The material, of course.\n- The pawn structure, detect passed pawns and doubled pawns.\n- The center control, the control of the four center squares plus the ring around it.\n- The king safety, it counts the number of squares around the king that are under attack.\n- Plus, this is not in the eval function ; I added an incentive to castle and not move the same piece twice in a row.\n\n\nFor the search I implemented the alpha beta search as I couldn\u0027t do better. \nBecause time is limited I implemented iterative deepening.\n\nFinally, for time gestion, it is really simple the Bot uses the minimum amount of time between two options :\n\n- Time to play a 70 moves game, so StartTime/70 at most.\n- Or, if time gets too low, it always saves time for 30 moves in the future, so CurrentTime/30.\n\n\n\nPS : Thank you for this challenge, it was really fun looking into that, and I\u0027m sure I\u0027ll continue bettering my Bot. \nI love your videos they are amazing !\nAnd sorry if my code is horrible, I only learned C# for this challenge and hadn\u0027t really coded for a long time.\nThank you again !"},{"BotID":"Bot_242","AuthorName":"0xFF","BotName":"SlothBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Bot based on Tyrant\u0027s bot. If this gets on the video credit them instead. If it wins anything give it to me."},{"BotID":"Bot_243","AuthorName":"PAN","BotName":"PAN","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_244","AuthorName":"Tree","BotName":"KnightToE4","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"It was proper fun, my first experience doing a collaborative coding project and my first time doing c# :D. Awful lot of reading."},{"BotID":"Bot_245","AuthorName":"Pressgoal","BotName":"Gen-Eric","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"First of all, thank you for hosting this. After watching your videos, I have wanted to try building a chess bot for some time, but I didn\u0027t want to set up the framework for playing chess. This was the perfect opportunity then for me to participate in an event and build a chess bot with a deadline, and I\u0027ve had a lot of fun with it. My bot went from consistently losing to the default bot, to now beating it 800 times and losing 6 (sadly it can also beat me at times).\n\nThe method is fairly simple, but it largely relies on looping through all possible moves and for each one, adding a score based on who it captures, and then subtracting a score based on who the enemies can capture. Then if the enemy can capture it where it has moved too, it performs that move for the enemy, and checks if it can capture the piece they just moved and so on until no more captures can be done on that tile. Afterwards it adds up the scores of all of the pieces who were captured (adding for its captures and subtracting for the enemy\u0027s) and adds that score to it\u0027s total. If the enemy couldn\u0027t counter, then instead, it adds a score for each enemy that can be captured from the new position with a 0.5 multiplier."},{"BotID":"Bot_246","AuthorName":"Aedan Smith","BotName":"James","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"The source code has a brief overview and some notes on implementation."},{"BotID":"Bot_247","AuthorName":"kai","BotName":"unicorn","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_248","AuthorName":"Karl Jungtow","BotName":"SimpleMinds","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I just implemented the most obvious things (Minimax, pruning, a hash table etc. ). Sadly, I\u0027m not skilled enough to have my evaluation function be optimized by machine learning, so it just reflects my evaluation process. "},{"BotID":"Bot_249","AuthorName":"Bora","BotName":"damlamen","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_250","AuthorName":"","BotName":"Corrosiver","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_251","AuthorName":"Daniel L.","BotName":"The Red Crayon","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"The bot will try to Minimize the distance between it\u0027s pieces and the enemy king. This should allow the MinMax search to find a Checkmate if one exists."},{"BotID":"Bot_252","AuthorName":"trueberryless","BotName":"#enpassant4ever","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"En passant is one of the best moves in chess, trust me!"},{"BotID":"Bot_253","AuthorName":"David Giesegh","BotName":"Squeedo","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Simple minimax with pruning using a handcrafted evaluation including material count (considering hanging pieces), simple positioning and mobility. Also tried some fancy stuff like killer heuristic and aspiration windows but I didn\u0027t manage to get significant performance improvements out of them so I left them out. With more time investment this bot could probably have been much improved (I\u0027m also convinced there are some bugs lurking in the evaluation), but as it stands I would guess it plays somewhere between 1200 and 1500 level. Anyway, had a lot of fun working on this and I\u0027m stoked to see how my bot gets demolished in the competition :)"},{"BotID":"Bot_254","AuthorName":"Jo\u00EBl","BotName":"Rubber Ducky","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"As for my bot:\nI tried to implement a itterating depth minimax function, with evaluationtables approximated as formulas with weights based on how close to the centre a piece is, and its current rank. It has some quiesence search, which uses the same minimax algorithm function to save tokens. It also has a transpositiontable and basic time management. I named it after my rubber duck, who helped me a lot during debugging. It is definitly not efficient or fast or creative, but it is the best I could come up with.\n\nAs for the challenge itself:\nI started off with the challenge not knowing how to code in c#, hoping to create a bot that makes semi logical moves. I did understand how the inner working of a bot worked, but I have only used Python or Matlab before for any programming. Knowing that I would probably forget about the project less then a week in, I tried to settle for a charming little bot with no intentions of winning.\n\nIn the end, I wrote 95% of my code in the first week of the challenge. After which University started to divide my attention and I lost dedicated programming time. I am somewhat dissapointed in myself, as I know I could make it better if I would just work on it for some more hours, while on the other hand, I got a lot further than I thought would have at the start of the challenge. \n\nWhile I know for sure that my bot won\u0027t be competitive against bots written by experienced programmers, I am proud to know that it is mine. Thank you Sebastian for hosting this Amazing challenge, and I would love to participate in a similar challenge again!"},{"BotID":"Bot_255","AuthorName":"N1kkj","BotName":"Pawntress","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Hi, I m glad to participate in this competition. Didn\u0060t have much time to code due to university and other stuff, but still happy with the result. I wrote this whole bot by myself, didn\u0060t look to the internet, just wanted to use my chess exp(1400 on chess.com). This bot sees only one move deep and doesn\u0060t like moving pawns into opponents territory. Overall, it beats some of my friends who tried playing it. I also like playing the bot, cause it doesn\u0060t miss a good capture or one move combinations. Wanna be in the video and watch what other developers did in this time! Good luck u all!"},{"BotID":"Bot_256","AuthorName":"Gulcar","BotName":"GulcarBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Thank you for making this challange! Learned a lot because of you! Love your videos!"},{"BotID":"Bot_257","AuthorName":"Loca1Gh0st","BotName":"MrMeow","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I tried my best, It was a fun challenge."},{"BotID":"Bot_258","AuthorName":"Bear","BotName":"ThinkerBot5000","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"A bot that thinks 5 ply, hence ThinkerBot5000. It is a small bot only taking up 420 bot brain capacity but somehow it works!"},{"BotID":"Bot_259","AuthorName":"Darn","BotName":"DarnBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_260","AuthorName":"Voxeled","BotName":"Jerome","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"It checks what move gets the most points and if the opponent can get more points after that move."},{"BotID":"Bot_261","AuthorName":"Thomas","BotName":"SummerBoty","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Starting from basic minimax search, then improving evaluation function based on piece type and position on board. Optimizations to keep it under 1024 tokens. I barely know chess rules so nothing groundbreaking in my algorithm ;)"},{"BotID":"Bot_262","AuthorName":"","BotName":"Chessburger Bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_263","AuthorName":"Jewel","BotName":"Concrete","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Never used C# before so this was fun, the though process was to make a bot that does as well as possible without any lookahead and then add lookahead. Moreover I focused on adding features to the evaluation function that I hoped would cause as many emergent properties as possible, I can still beat it so either I\u0027ve learned a lot about chess from this project or its fairly weak. Either way I am proud of it"},{"BotID":"Bot_264","AuthorName":"JaPa","BotName":"KurentPosition","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Classical minimal implementation of chess bot: negaMax search, TT, PeSTO evaluation, move ordering, iterative deepening. I have zero experience with programming chess bot. I had idea to program my chess bot when I was a student, but I never tried before."},{"BotID":"Bot_265","AuthorName":"Tim Zollner","BotName":"SimpleBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Experience was really nice, i learned a lot but i had some trouble getting alpha beta pruning to work. I\u0027m still not sure if it works correctly"},{"BotID":"Bot_266","AuthorName":"Game Tech Explained","BotName":"Game Tech Explained Bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Most importantly, my bot\u0027s code looks like a pawn.\n\nI loved the challenge! Originally, I started a machine learning based bot, but ended up with something far more traditional, because it worked better.\n\nI actually made a short video about this journey for my micro-channel on youtube: https://youtu.be/5vsLmM756LA\n\n(The video is set to \u0022unlisted\u0022 until the competition deadline passes)"},{"BotID":"Bot_267","AuthorName":"Thomas Dvorak","BotName":"TimsBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I started this project in August. \n\nEven though I know that my bot will most surely lose, I am still very happy and proud of the work that I\u0027ve done. This was also my first time using C#, and I plan to also try using C# in Unity (I can\u0027t get Unity to run properly on Linux). I have learned a ton from this project and have discovered that it is very similar to Java.\n\nI was trying to make transposition tables, but I just can\u0027t find out how to (there isn\u0027t enough time for me to try to figure out, but if I do I will be making another submission). I will learn how to through. I also wanted to implement square tables, but that took up too much space. I also need to work on the minimax function because it seems to only support black. \n\nI\u0027m not done with this bot after this submission. I will continue to work on this bot until it is significantly better than me. School has kept me very busy, but when I have time I will work on this. I don\u0027t know if any other people my age are doing this...I\u0027m 17 (almost 18) (please tell me if there is!).\n\nI would like to thank you for giving me the chance to make a chess bot. I have wanted to make one, including the setup, myself, but I would never know how to start or complete it correctly. Thank you for making the setup. Thank you for inspiring me to make a bot. \n\nIf you have any questions or comments, email me with the email used for this submission."},{"BotID":"Bot_268","AuthorName":"Selim Sheta","BotName":"Captain Botvious","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This bot sucks but I had fun making it! I thought I would make a bot that optimises the search by prioritising \u0022obvious\u0022 moves. Turns out it doesn\u0027t work that well ;-o"},{"BotID":"Bot_269","AuthorName":"Augs","BotName":"AugsBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Search: Minimax \u002B alpha-beta \u002B transposition tables\nEval: Packed piece tables \u002B Doubled pawns \u002B bishop pair"},{"BotID":"Bot_270","AuthorName":"Nico","BotName":"wahtye","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Was a great entry level drug into the rabbit hole of chess programming, thank you!"},{"BotID":"Bot_271","AuthorName":"zappynou","BotName":"DoesTheBotNameHasACharacterLimitBecauseIAmSureThisCanGetInterestingAndIAmNotTalkingAboutTheBotIMeanSeriouslyTheBotIsBasicalyUselessButThatWasFunnyThanksSmileyFace","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"I thought it would be a good approach, but it seems it mostly attempts to capture all enemy pieces with the King... which is kind of fun :)"},{"BotID":"Bot_272","AuthorName":"Daugsilius","BotName":"CrystalBowl","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Very crude minimax \u002B alpha-beta pruning exploration with caching, with basic time management"},{"BotID":"Bot_273","AuthorName":"Giorgio","BotName":"Monte Carlos Little Brother","SearchKind":"Monte Carlo search (random playouts)","EvalKind":"Handcrafted evaluation function","Description":"I was very enthusiastic but then became a bit frustrated after a month. So heres the best i got."},{"BotID":"Bot_274","AuthorName":"Carson Bates","BotName":"BoringBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"My bot loves to play the worst possible opening move, but it\u0027s really good at endgames. I\u0027ve also used every bit of the bot\u0027s brain capacity."},{"BotID":"Bot_275","AuthorName":"Sidewinder7","BotName":"Simple Minimax","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_276","AuthorName":"PhilipK","BotName":"Ookttahbahblah","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This bot knows almost nothing about openings or good game theory, instead it tries to look as deep as possible given the time remaining and evaluate mainly based on material. I added some incentive for it to corner the king to help with end games and to increase the value of pawns the closer to the end of the board they are. Fun challenge!"},{"BotID":"Bot_277","AuthorName":"JoeyZeeeeeee","BotName":"Zambroni V.4.1.4","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Was very helpful to have a discord of resources :)"},{"BotID":"Bot_278","AuthorName":"CreeperXD","BotName":"Bongcloud enthusiast","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Other","Description":"I actually started out trying to implement a real evaluation function, but my sloppy programming skills and lack of experience with chess bots meant that I just I couldn\u0027t get it work as I wish. Since I\u0027m not succeeding anyway, I decided to comment out my spaghetti and made the bot play the best chess opening to stun and amaze everyone."},{"BotID":"Bot_279","AuthorName":"CosmoDM","BotName":"CosmoDMBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Bot first does a breadth search, then switches to a depth search when half of the allowed time per move is up. Scores are evaluated at each step and sorted. Ideally, the weights used in determining the scores are calculated by playing the final algorithm against itself many times (a poor man\u0027s machine learning), but a single game takes too long for that."},{"BotID":"Bot_280","AuthorName":"Johan Zetterlund","BotName":"DeltaWeakness","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This was my first time doing any development in C# and it has been a fun challenge!\n\nI\u0027m not evaluating the board in my search function, but only the moves - hence the \u0022Delta\u0022 in the bot-name!\nI do a simple evaluation of the board before the searching (so the bot will know if it should accept a draw or not) but then only evalute every move as it occur in search. I do this to try saving time and also to sort the moves before \u0022making\u0022 the move when searching.\n\nI\u0027ve made a custom way to save position values for all the pieces packed in ulongs, I do this to save tokens. The array will be unpacked before the bot starts moving.\n\nThe bot uses iterative deepening, and if the same move is occurring on top (with at least a pawn value better evaluation than the next-best move) four times in a row, the bot considers the move \u0022obvious\u0022 and returns it immediately to save time.\n\nThe bot also has a small opening book of four moves!\n\n"},{"BotID":"Bot_281","AuthorName":"Gourab Ghosh","BotName":"timecat-mini","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I am excited to share that I was able to capture the positional scores of all the pieces for all the squares (both the opening and endgame score) with total of 768 values in just 24 ulongs and 16 ints. This algorithm did 32 times compression (which is 768 / 24). All my creative techniques and optimisations and how these ideas came to my mind, everything is written in the start of the code as comment."},{"BotID":"Bot_282","AuthorName":"MonteDegro","BotName":"Hippo","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"The bot prefers closed positions with massive pawnchains. It tries to apply constant pressure on enemy king. Usually avoids exchanges. Is weak in endgame, but not terrible."},{"BotID":"Bot_283","AuthorName":"Phnx","BotName":"BasicBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_284","AuthorName":"Arctiform","BotName":"Arctiform\u0027s Bot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"I\u0027ve focused on using a weights system for the ai to make decisions from. Certain moves weight is increased or decreased depending on if it captures, checks, promotes, or blocks the opponent. My main goal was to create a bot that would win at least 90% of the time against the evil bot and lose 0%. After 1k games it won 97% of the games and lost o.6%."},{"BotID":"Bot_285","AuthorName":"Diego campione","BotName":"Scorraccio possente","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_286","AuthorName":"Nat","BotName":"Headless Chicken","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"The bot uses a mix of material evaluation and a rough implementation of mobility score. I didn\u0027t think I\u0027d have space to add tables for optimal piece positioning or to add an opening book so I tried to craft the mobility score in such a way that the bot would be encouraged to follow decent opening principals (develop pieces, control the center, etc...). I\u0027m not thrilled with how it turned out; it likes to push the h and a pawns and leave knights on the rim, but it\u0027s miles better than it performed with no mobility score. \n\nAn earlier version is outperforming this version of the bot on the leaderboard but I\u0027m not sure how much I trust those results for a variety of reasons."},{"BotID":"Bot_287","AuthorName":"Ragdoll","BotName":"Ragdoll\u0027s Ragdoll","SearchKind":"Monte Carlo search (random playouts)","EvalKind":"Machine learning evaluation function","Description":"The concept of this bot is simple, a novel approach of greedy playouts supported by an odd neural network. Given how small, fast and efficient this bot is, it is unreasonably good at playing chess, though will be trounced by any bot that can look more than about 3 moves ahead. "},{"BotID":"Bot_288","AuthorName":"Chris Pontius","BotName":"Running Bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Running Bot got its name from its \u0022runningEvaluation\u0022 variable.  Every move has a calculated change to the evaluation, which is used to sort it against other moves for move ordering.  The bot has no function that evaluates an entire board, rather it updates its evaluation as moves are made and undone.  Hence it keeps a \u0022running\u0022 evaluation.\n\nI ran out of tokens, so there\u0027s some oddness to the bot.  For example it has separate early and lategame evaluations but the only difference is that the lategame bot is willing to move its king forward.  I also had to cut some features, which is sad but part of the fun of the challenge.\n\nI\u0027m an indie game developer, cofounder of a company called Fun Freighter Games.  I programmed the enemy AI for our game Scrap Seas, so there\u0027s some bot programming pride on the line here.  Hopefully my bot does well.\n\nThank you so much for running this challenge, I\u0027ve had a lot of fun!"},{"BotID":"Bot_289","AuthorName":"Saihaj","BotName":"Foresight","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"I evaluate every move there is and my bot determine what it think is bests, not very good in openings, but very fasts. An evolved bot from EvilBot, that EvilBot can no longer touch. \nI edited my response and added mated in 2 but I am out of idea, only think left is to make it efficient"},{"BotID":"Bot_290","AuthorName":"Aurora","BotName":"Blizzard","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"This is my first time making a chess bot and the biggest problem I had was finding mates late game\noften times the bot will just make a draw from a completely winning endgame"},{"BotID":"Bot_291","AuthorName":"Bob","BotName":"Tim","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"Tim is possibly the simplest a functional chess bot can be."},{"BotID":"Bot_292","AuthorName":"Io","BotName":"Oh stupid one","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Very fun challenge, a great community around it in the discord, would love if there were any sort of similar challenges (regardless of topic) in the future"},{"BotID":"Bot_293","AuthorName":"Jinan Dangor","BotName":"NinjaBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I tried to make my evaluation function as simple as possible. My primary heuristic is available moves - since this naturally encourages many desirable chess strategies (controlling the board, restricting your opponent\u0027s movement, pinning pieces, checking, etc). I then added material advantage to encourage my bot to capture (and keep) pieces.\n\nFor my search function, I initially searched three moves in the future and choose whichever move lead to the best result. However, I decided to modify this significantly. My bot evaluates a position based on its evaluation function, but at any time it may \u0027investigate\u0027 that position, instead evaluating it based on the best response its opponent has to it. This continues recursively - with investigations travelling down lines of moves until they hit a move whose responses haven\u0027t been evaluated, then travelling back up the line - changing the evaluation of the moves in the line.\n\nMy bot constantly \u0027investigate\u0027s the best line available. This means it does not pursue all lines equally - if Line 1 (10 moves long) evaluates better than Line 2 (3 moves long) it continues to pursue Line 1 until this is no longer the case. This aims to prevent the bot wasting its time evaluating junk positions - if the first move in a line is blundering a queen, other lines that don\u0027t blunder queens will take priority to be investigated.\n\nIn addition, my bot keeps track of all these lines and keeps all the ones corresponding to the moves it and its opponent makes. This saves a lot of work, especially if the opponent chooses a move on a heavily investigated line."},{"BotID":"Bot_294","AuthorName":"Sweet","BotName":"Sweet \u03B6 985","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This is my sixth (Zeta) iteration, the Alpha, Beta etc versions where posted into the unofficial  https://chess.stjo.dev/ but for some reason that site stopped processing games correctly.\nMy first versions were not so good, but I have high hopes for Sweet \u03B6 which uses 985 tokens. \uD83E\uDD1E\n\nIt was a really nice journey, and I learned a lot about chess programming in general.\nI used ChatGPT to flesh out the skeleton code, but I lost trust in it because some code of the minimax where really not good generated code \uD83D\uDE05\n\nIn last versions I focused on getting the evaluation function as fast as possible, the profiler showed that was the most costly function. But I found that the more speed you want, the more less abstraction you should use.\nI also tried to vectorize the calculations but that was using too much tokens to be justified.\n\nI have also spend a lot of time to compress my position tables, I think I have come a long way \uD83D\uDE2C\n\nThanks for this chess coding challenge!\n\nCheers, Ryan"},{"BotID":"Bot_295","AuthorName":"Kaydon Sloan","BotName":"One-Line Chess","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"At some point, I had the absolutely *brilliant* idea to make a bot in only a single statement! It (annoyingly) ended up as two statements. I decided to make it a traditional Negamax. I forgot that recursion needs at least two lines until it was too late to start over. So here we are.\nIn retrospect, this was a dumb idea (creating something so complex in a single statement), but I learned a lot! Before this challenge, I had little more than heard of Linq, let alone used it! I also learned of other very handy gems in C# \u2014 tuples being a big one!"},{"BotID":"Bot_296","AuthorName":"Josh Odom","BotName":"Black Magic","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"It\u0027s a pretty typical engine:\n\n* Negamax with AB pruning\n* Quiescence search with delta pruning and zugzwang protection\n* Null move pruning\n* MVV-LVA capture ordering\n* History heuristic\n* Check extensions\n* LMR\n* Transposition table (only used for move ordering)\n* Hand-crafted algorithmic piece-square tables for mid- and late-game, with tapered eval\n* Mid-game king pawn-shield heuristic\n* Panicking (spends more time) while the score is below the last iteration\u0027s score. This is an indication that the last iteration\u0027s PV wasn\u0027t as good as we thought.\n\nIn addition to this, I added extensive debugging functionality. Bugs, if present, will destroy an engine\u0027s strength. All debugging functionality has been stripped from the submitted engine, including:\n\n1. Printing data about each search at a particular depth (including PV, score, branching factor, move order accuracy).\n\n2. The debug version of the engine is fully deterministic. That way when the engine makes a questionable move, that particular search can be debugged. In order to find questionable moves (indicating a bug), I would analyze its tournament self-play games through an engine.\n\n3. Dumping the search tree to disk, at a specific position, at a specific depth, as XML data. This allowed me to use my text editor to fold everything except for the relevant branches, to figure out where precisely the error was happening. Once identifying where the error was happening, I could break in my debugger using the zobrist hash of the position.\n\nI spent a few weeks testing, refining, simplifying, and debugging my engine. I started simple and kept adding new features, trying to prioritize features which would have a large ELO:token ratio. I made concessions in terms of theoretical correctness in order to maximize playing strength.\n\nProbably the next improvements that could be made would be to improve the static evaluation (perhaps add a few more terms, like bishop pair bonus), and to use automated parameter tuning on the static evaluation constants."},{"BotID":"Bot_297","AuthorName":"RedRRVJ","BotName":"notBlue","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"It\u0027s my first challence. I tryed to make a bot with a logic like mine in playing chess so it will save Piece in priority (Normaly...) and attack if he can attack without be kill unless the opponent piece is better than it. Also, piece don\u0027t move for give access for that a better piece  to be attack by opponent."},{"BotID":"Bot_298","AuthorName":"b.maroti","BotName":"WhiteTide","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Special Mini Max with dynamically adjusting width not just depth."},{"BotID":"Bot_299","AuthorName":"Markus Grand Petersen","BotName":"MaterFromRadiatorSprings","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Its a simple Minimax with alpha beta pruning at a depth of 5, wanted to do quiescence search to avoid horizon effect but didn\u0027t have enough time as I discovered this challenge quite late. Very vulnerable to bots who take advantage of this horizon effect. Also wish I had more time to craft a better heuristic.\n\nVery well made challenge with all the setup already done, and was amazing to be able to work on only the fun part of the challenge. Very easy to understand since its just a single file where you just need to return a move, love that."},{"BotID":"Bot_300","AuthorName":"Flo","BotName":"Bob (Looser)","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"My implementation is probaply one of the worst implementations from all. It is so bad that most times it can\u0027t even win against itself lol. I only wanted to particepate in a code project but somehow forgot about it :)"},{"BotID":"Bot_301","AuthorName":"Grobert","BotName":"Grogros","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Search:\n- Negascout\n- Quiescence search\n- Transposition table\n- AlphaBeta \u0026 NullMove prunings\n- Iterative deepening\n\nEvaluation:\n- Pieces value\n- Piece-Square table\n\nOther features such as killer moves have no been implemented:\n- Either it was not working well (probably because not well implemented)\n- Or too many tokens used for the feature\n\nEvaluation could have been greatly improved, but keeping it fast in a few tokens is difficult, and seemed not to be the best choice over search improvements.\n\nOverall not the most original bot, but at least it can play \u0022decently\u0022"},{"BotID":"Bot_302","AuthorName":"Valentin","BotName":"Valibot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I decided to do a novel approach and write a custom evaluation function to not use the quite common approach in the competition which uses compressed pesto tables. However, by using a well written presto table, the bot could gain ~250 ELO, while keeping the same amount of code tokens.\n\nThe evaluation function is based on the following features:\n * Pawn/piece values\n * Pawn position: 1 centipawn per square moved forward\n * Pawn/piece freedom: 0.5 centipawns per possible moves\n * Pawn/piece attacks: 1.5 centipawns per possible enemy attacks\n * Pawn/piece defense: 1.5 centipawns per defended own pawn/piece\n * Checkmate: Prefer checkmates in fewer moves\n * Endgame evaluation: When one side only has 1 king left, a mop-up evaluation with center manhattan-distance is added to force the king in a queen/rook endgame to the side.\n\nThis leads to the emergent behaviour of:\n * Reasonable pawn structure, as pawns want to defend themselves\n * Opening: (almost) reasonable piece development, as pieces want to \u0022see\u0022 the board\n * Knights: Prefer center squares, as they have there more freedom/attacks/defenses\n * King: After castling, the king prefers to stay behind 3 pawns (because there he defends the pawns and still has some freedom). However, when the king didn\u0027t castle, he often moves 1 square forward to get more freedom and to defend developed pawns/pieces. I think, this not good behaviour can not be easily fixed by using only a few code tokens."},{"BotID":"Bot_303","AuthorName":"Valentin","BotName":"Electric Shockwave Gambit","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Variation of Valibot with with \u0022Electric Shockwave Gambit\u0022 Joke Attack\n\n     \u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\n     \u26A1\u26A1  Electric Shockwave Gambit                                                                                                                \u26A1\u26A1\n     \u26A1\u26A1                                                                                                                                           \u26A1\u26A1\n     \u26A1\u26A1  In the mystical realm of Chess Bot Battles, where algorithms clash like titans, a new strategy emerges - the Electric Shockwave Gambit!  \u26A1\u26A1\n     \u26A1\u26A1  Picture it, Trainer of the Virtual Chess Arena, as you unleash a surge of digital lightning upon your unsuspecting opponent.             \u26A1\u26A1\n     \u26A1\u26A1                                                                                                                                           \u26A1\u26A1\n     \u26A1\u26A1  Attack Name: Electric Shockwave Gambit                                                                                                   \u26A1\u26A1\n     \u26A1\u26A1                                                                                                                                           \u26A1\u26A1\n     \u26A1\u26A1  Description: Your Chess Bot emits a devastating Electric Shockwave with a chance of paralyzing your rival Chess Bot,                     \u26A1\u26A1\n     \u26A1\u26A1  sending a bolt of surprise down their virtual circuits. The opposing bot may be left powerless and dazed for multiple seconds,           \u26A1\u26A1\n     \u26A1\u26A1  giving you a precious time advantage to plot your next move and seize victory.                                                           \u26A1\u26A1\n     \u26A1\u26A1                                                                                                                                           \u26A1\u26A1\n     \u26A1\u26A1  Caution: Beware, brave Trainer, the electric shockwave is not without risk!                                                              \u26A1\u26A1\n     \u26A1\u26A1  The sheer force of the attack carries the potential to backfire, paralyzing your own bot due to the chaotic electric discharge.          \u26A1\u26A1\n     \u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\u26A1\n     * (wording assisted by ChatGPT)\n\n/* @SebLague: Please don\u0027t include this bot in the official leaderboard, as it is in my opinion violating the implied rules (but probably not the written ones).\n         * I really don\u0027t want to defeat more serious bots in the challenge, but I wanted to try out this novel strategy.\n         * Maybe you might create a separate leaderboard for bots that are interesting, but not really good/fair. ;)\n         * However, computer science is always about exploring the limits and doing shortcuts to overcome them, and I think this bot is a good example for that.\n         * \n         * Why is using the GC class technically not breaking the game rules?\n         *   The GC class is inside the System namespace (like the Math class), which usage is allowed according to the rules.\n         * \n         * Why is using the finalizer technically not breaking the game rules?\n         *   Finalizers get called on the GC thread. The GC thread is an intrinsic part of the .NET CLR.\n         *   Depending on how literary you read https://github.com/SebLague/Chess-Challenge, this strategy does not \u0022create any new threads or tasks\u0022,\n         *   as the GC thread is already created by .NET itself and is therefore not _new_.\n         *   \u0022create any new threads or tasks to run code in parallel/in the background\u0022 defines literary only the creation to be not allowed, not the execution itself. \n         *   Of course, the finalizer executes code in the background, but not in a newly created thread/task.\n         * \n         * I didn\u0027t find any approach to defend against this attack, except by counterattacking with the same attack.\n         * Not even TryStartNoGCRegion() can defend against it, as the GC is started in this bot, and no further GC needs to be triggered afterwards.\n         */"},{"BotID":"Bot_304","AuthorName":"Semirose","BotName":"SemiroseBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"the search function uses Principal Variation Search with Aspiration windows, Transposition table, killer and history heuristics, quiescence search, Reverse futility pruning, Null move forward pruning, Futility pruning, Check Extension, And PSQ evaluation function.\nOn Lichess, it has a 2100elo rating in bullet and blitz, and 1900elo rating in rapid, each with more than 100 games. was hoping to implement more like neural network evaluation(witch i almost got working), reductions and pruning(LMR), and static exchange evaluation, however i can\u0027t focus on my studies and work on this bot at the same time, so i stopped working on it over a month ago. nevertheless i\u0027m satisfied with how the bot turned out to be, and i hope it performs well in the tournament."},{"BotID":"Bot_305","AuthorName":"Zhanybek","BotName":"RandomUnoptimisedBot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"My first programming challenge, failed completely but it was fun!"},{"BotID":"Bot_306","AuthorName":"dotpy/jayden van zuydam","BotName":"czechmayte","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I\u0027m happy with how I stored piece square tables, in longs, to reduce the number of tokens drastically. It was a fun challenge!"},{"BotID":"Bot_307","AuthorName":"Elijah Bradshaw","BotName":"Stephanee","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Not too complicated. Minmax with some mild positional knowledge. 0 opening knowledge."},{"BotID":"Bot_308","AuthorName":"Nova \u0026 Professor Sexy","BotName":"xXBotXx","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"Our implementation is focused on very simple rules for various aspects of the game with as little of a look ahead as possible."},{"BotID":"Bot_309","AuthorName":"JuNi","BotName":"Mirror Bot","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"It tries to mirror the opponents move if it can but otherwise will pick a sort of good move."},{"BotID":"Bot_310","AuthorName":"Gary Lynch","BotName":"LynchBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"basic negamax and compressed pesto tables from the community with a few tweaks ov my own and a very basic opening book to save a few seconds on the timer"},{"BotID":"Bot_311","AuthorName":"Jake Forsey","BotName":"MyFirstChessEngine","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I learned a lot about: C, search and encoding data inside longs! Unfortunately I ran out of time to do anything really interesting!"},{"BotID":"Bot_312","AuthorName":"TBMPFW","BotName":"TBbot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_313","AuthorName":"Leo","BotName":"Minerva","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"It was my first project in C# (normally I program in Python). I enjoyed the creation of this simple minimax search based chess bot."},{"BotID":"Bot_314","AuthorName":"Folke","BotName":"Folke","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I had a lot of fun doing this challenge. Thank you for this and all your great content!"},{"BotID":"Bot_315","AuthorName":"Nathan","BotName":"BadMeetsEvil","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Other","Description":"My second time ever using C# and definitely my first time trying to create any sort of chess bot. I took the code of Evil Bot and just tried to expand upon in using only my own knowledge. In the future if I try again, I\u0027ll likely do some research regarding how to actually search and evaluate, but it was fun just using my own head to make things work. Bot makes a lot of random moves, but it will take hanging pieces and try to prevent moves that put its own pieces in danger."},{"BotID":"Bot_316","AuthorName":"Sky64Redstone","BotName":"Sky-Bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"NegaMax - QSearch - Transposition table - Killermoves - History Heuristics"},{"BotID":"Bot_317","AuthorName":"torbenikum","BotName":"Basil","SearchKind":"Some form of minimax search","EvalKind":"Other","Description":"I liked the challenge. Unfortunately didn\u0027t have enough time to really handcraft an evaluation function myself, so I borrowed one here: https://www.chessprogramming.org/PeSTO%27s_Evaluation_Function\nIt quite fun to find a way to compress the piece square tables such that they fit into the token limit."},{"BotID":"Bot_318","AuthorName":"Piele","BotName":"LoserNotDrawer","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_319","AuthorName":"Goyo","BotName":"GOYO Bot v1.1.2","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Challenge was pretty fun. We had a big summer vacation so we did most of the work during it. We basicly just started with a very similar algorithm to EvilBot which we then played against and saw what fatal flaw we needed to fix each time...\uD83D\uDE12 The final bot does most of the calculations on the current turn, although it does use some basic minimax to help it get a mate in 2. \nIn the we think the bot is pretty good and we hope to see how far it gets (or in other words we hope the we won\u0027t lose immediately in the first round, although it might just happen )."},{"BotID":"Bot_320","AuthorName":"bbb908","BotName":"lowEloBrain","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"I wanted to learn some c# while making a chess bot, which I did, idk how good it will be against the others but as of the version it is at while I am submitting it I can beat it most of the time but sometimes fail (my elo is around 900). It\u0027s called \u0022lowEloBrain\u0022 cause it only thinks about it\u0027s move and doesn\u0027t consider the opponents move."},{"BotID":"Bot_321","AuthorName":"Jakub Skop","BotName":"Reverie VI","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I\u0027m making a chess engine for a game of mine named Reverie Chess. This was just a proof of concept. I had a hard time getting the transposition table to work, and even now, I\u0027m not 100% sure why it wasn\u0027t really adding much speed. Also, my time control is extremely crude, and I wondered about how to do that with pausing the AB negamax halfway through execution."},{"BotID":"Bot_322","AuthorName":"Bobitsmagic","BotName":"BarschBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I can only say that after all the hours i spend on the chess programming wiki i finally understand what you said in your video about it being a total rabbit hole. I had a great time coding and optimizing this bot and i can proudly say that i cant beat it myself anymore."},{"BotID":"Bot_323","AuthorName":"devLIPEr","BotName":"Quantum","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_324","AuthorName":"Shahriar Rayed","BotName":"RayBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"It was very fun! Would love more challenges like this!"},{"BotID":"Bot_325","AuthorName":"InfuehrDaniel","BotName":"InfuehrDaniel","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Would have loved GetLegalMovesNonAlloc to not resize the span and return an int.\nWould have loved Square to be a vanilla integer"},{"BotID":"Bot_326","AuthorName":"KaraokeCzar","BotName":"Jbot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This is only my second attempt at building a chess bot. I tried building a chess variant a couple years ago in Unity and needed a computer. I only went as far as implementing an alphabeta search. \n\nThat project was a mess though. So I focused a lot on the basics. I\u0027m not yet done, but I\u0027m in the middle of implementing a quiescence search for the first time. Overall I think it\u0027s been a good learning experience for me.\n\nPS idk if it\u0027s important, but my repo is over on gitlab instead of github: https://gitlab.com/JohnC1992/Chess-Challenge"},{"BotID":"Bot_327","AuthorName":"Paul Spooner AKA Dudecon","BotName":"FunBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This bot only looks one move ahead, so it\u0027s fun for beginners to play against, but won\u0027t let you get away with any nonsense."},{"BotID":"Bot_328","AuthorName":"Loai","BotName":"Not At All","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"Not at all"},{"BotID":"Bot_329","AuthorName":"KingPRS","BotName":"Whatevs","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"- I tried many clever things. C# is not my strongest language but I still gave it a go. I tried to store piece square tables as variable names and then turn those variable names into strings. One of the biggest trends you\u0027ll probably encounter is how well people found loopholes to hack the token counter and store more code or information in their result. This is what I tried to do with the variable names. I also tried generating them with a mathematical function during runtime but I didn\u0027t have enough time to find a suitable function for that. Overall really enjoyed it. Working two jobs did not allow me to spend as much time on it as I wanted to unfortunately. Looking forward to watching your video with the results !!! All the best !"},{"BotID":"Bot_330","AuthorName":"Isaac Sterling","BotName":"Quinchessential","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_331","AuthorName":"Dovakin7","BotName":"YAMMB ","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"YAMMB (yet another min-max bot). The challenge was a really cool idea. I just ended college and took the summer. It was a fun little project to do on the side. It would be nice to have more challenge like this in the future"},{"BotID":"Bot_332","AuthorName":"CowSoCool37","BotName":"CalcCheck","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"CalcCheck is pretty much just a standard minimax bot with alpha-beta pruning and lookup table. The most interesting part about it is probably how it evaluates positions. It gives a bonus to evaluation for each legal move available depending on the type of piece, the idea being it should make the bot develop pieces to where they are more active. It sorta works sometimes but it\u0027s still quite terrible at openings. Anyhow it can beat me most of the time (even if that isn\u0027t a very high bar), so hopefully it isn\u0027t too awful."},{"BotID":"Bot_333","AuthorName":"Goose","BotName":"Rules_Of_Thumb","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"One of my favorite books is \u0022The Wisest Things Ever Said About Chess\u0022. It shows how many parts of chess can be simplified into rules of thumbs, such as bishop pairs are better than knight pair, knights on the rim are dim, use the king in the endgame. I\u0027ve put as many of these rules as I could into this bot. Despite the primitive minmax searching, limited depth of five, no use of bitboard helpers, and no real attempts at minification, I\u0027m hopeful this bot will perform surprisingly strong."},{"BotID":"Bot_334","AuthorName":"battlecoder","BotName":"StackFish","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I\u0027m not great player, but I love Chess, and I love programming so I felt extremely compelled to participate. My two goals were: Having fun and making a bot that was able to beat me at chess (again, I\u0027m not a great chess player so the bar was set very low) and I accomplished both. (While I have defeated my bot, it\u0027s not easy for me, and if I\u0027m not fully focused I get my ass kicked). A secondary objective for me, as a programmer, was using as little code as possible, with the simplest implementation I could come up with, and since my bot is currently sitting around half the allocated tokens, I\u0027m happy with that. I loved the challenge, and streamed the progress of my entry on Twitch. The bot is not related in anyway to Stockfish, by the way, just someone in chat misheard me say \u0022stackfish\u0022 when I was talking about well known Chess engines, and I found the name hilariously apt for a simple bot. I\u0027m also integrating my entry with Twitch chat, so viewers can play against my bot. I can definitely say that I\u0027ve enjoyed participating of this challenge. Thanks for creating this."},{"BotID":"Bot_335","AuthorName":"Headyyy1337","BotName":"Der wilde Kaiser","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"The difficulty was to find a good logic in the few tokens in order to be able to correctly judge this score of moves. Unfortunately, it was absolutely not possible to implement this perfectly. But that was surely your idea behind the challenge ;-p\n\nIn any case, I had a lot of fun programming. Thanks for the great idea and I look forward to more videos from you. You are truly an inspiration!"},{"BotID":"Bot_336","AuthorName":"aymco","BotName":"EpsilonCheck","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_337","AuthorName":"Madhu","BotName":"SepukuBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This is a bot that can beat the EvilBot"},{"BotID":"Bot_338","AuthorName":"Gonumen","BotName":"Cosmos","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"First of all I want to say I had a blast doing this challenge. I was completly hyperfixated on it for a few weeks and I can\u0027t remember when was the last time I\u0027ve learning so much about a topic like this.\n\nWhat I think makes my implementation special and worth showcasing in the video is the way I store Piece Square Tables. My method is, as far as I know (as an active discord server user), the most token efficient method (it uses 29 literals and is 26 tokens less expensive than the other state-of-the-art compression method with minimal Elo loss). It\u0027s based on matrix factorisation, genetic algorithms, clever data packing into as few literals as possible and several other tricks. I\u0027ve written a document detailing my method here https://github.com/krezelj/Chess-Challenge/blob/main/PSQTFactorisation.pdf\n\nFull implementation of the method can be found here https://github.com/krezelj/psqt-factorisation\n\nI hope it interests you too and if you decide to show it in the vidoe and have any questions about it I would be more than happy to answer all of them :)"},{"BotID":"Bot_339","AuthorName":"","BotName":"TinyNoTimeToCodeChessEngine","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_340","AuthorName":"Noano01","BotName":"PacifistBot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"This bot will only ever capture other pieces in self defence."},{"BotID":"Bot_341","AuthorName":"A\u00EBldrexan","BotName":"AelChess","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I have kind of given up at some point\nI can\u0027t reach a good enough depth, I am probably doing something very wrong\nMoreover my bot often crash / lose on time\n\nSearch : \nNegamax featuring \n- alpha-beta pruning, \n- moves ordering, \n- iterative deepening,\n- quiescence search\nDepth adapting on time left\nOn a 1 minute match, average depth is ~6 (\u002B quiescence search)\n\nEval :\nPiece-square table, favouring:\n   - occupying the center (pawns, knights and to a lesser extent bishop)\n   - advanced pawns (especially in endgame)\n   - rook on the seventh rank\n   - king in castled position (opening and mid-game)\n   - centralizing king (endgame)\nMobility (clumsy)\nIn quiescence search: ultra simple material evaluation\n\nMy bot does not know about king safety, pawn structure, trapped pieces, ...\nIt is unable to mate with two bishops, bishop \u002B knight, and sometime even king \u002B rook"},{"BotID":"Bot_342","AuthorName":"Uls","BotName":"GenerousBoi","SearchKind":"Monte Carlo search (random playouts)","EvalKind":"Other","Description":""},{"BotID":"Bot_343","AuthorName":"Kongo Landwalker","BotName":"Freedom_Fighter v.83","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Never before have I programmed any bots. And never touched C#.\n\nAt first I tried an Evaluation, which would give more points to situations where opponent has less moves and my Bot has a lot of freedom. In theory with perfect implementation it would lead to stalemate and mate (with no opportunity to distinguish them). But the opportunity to check and force opponents to move his king makes the method useless on low deepness.\nThe thing evolved into Evalute_freedom with a very small influence on the total evaluation. My solution eventually converged to minimax as each small twist in that direction was beneficial against Evilbot."},{"BotID":"Bot_344","AuthorName":"DigestDig9","BotName":"DD9\u0027s chess bot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Other","Description":"I started coping the code from the EvilBot and then I improved it."},{"BotID":"Bot_345","AuthorName":"paper98","BotName":"Lundqvision","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"the eveal function calculates 3 values and then returns the vealuation depending on the parameters. The three values are material, \u0022vision\u0022 which is how many squares each piece can move to and agression which is each colors average distance to the opossing king. "},{"BotID":"Bot_346","AuthorName":"siued","BotName":"Butter Bot, the bot with the butter on him","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I did this in an afternoon and there is 0 chance it will be any good. I just wanna see if it can win at least one game. The challenge idea is great tho and the framework you provided is amazing. "},{"BotID":"Bot_347","AuthorName":"Broguld","BotName":"GM Manneken pis","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"It was really fun to try and make something work. The biggest issue for me was the time management because it will run at different speeds on different machines. I know my code could be optimized a lot but I\u0027m already happy having something that works."},{"BotID":"Bot_348","AuthorName":"Rick Schaffer","BotName":"SimplerBot","SearchKind":"Some form of minimax search","EvalKind":"Machine learning evaluation function","Description":""},{"BotID":"Bot_349","AuthorName":"August","BotName":"ABot","SearchKind":"Other / Idk","EvalKind":"Other","Description":"Short description:\nV1.20\nMy bot basically just checks if it has a hanging piece, if so try to move that piece, else check if a piece can deliver checkmate, if so do that, else check for captures and so on. It is honestly really bad and highly inefficient, but good enough for me (my bots stats against EvilBot are about: 346 W, 462 D, 192 L). I have never taken part in any kind of coding challenge, so this was my first experience and I had some fun programming.\n\nBest wishes,\nAugust"},{"BotID":"Bot_350","AuthorName":"Sep","BotName":"InsufficientBot","SearchKind":"Monte Carlo search (random playouts)","EvalKind":"Other","Description":"its purely random"},{"BotID":"Bot_351","AuthorName":"Mat\u011Bj Fencl","BotName":"Capybara","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"First of all, Hi!\n\nCapybara consists mostly of negamax with alpha-beta pruning, iterative deepening, quiescence search, transposition table, principal variation, late move reductions, extensions, move ordering MVV-LVA, killer moves, null move pruning, and static evaluation with piece-square tables, doubled/tripled pawn penalty, rook on open file bonus, mobility bonus and king safety bonus. I hope I didn\u0027t forget anything. With all of that It sees cca. 9 - 12 moves ahead in middlegame.\n\nI also tried some form of Monte Carlo tree search but I think that with 1024 tokens the only competitive algorithm is minimax.\n\nTo keep the code small I reused variables, packed all PSTs into decimals which AFAIK can hold most bits per one literal and therefore per one token, removed blocks where possible, used the \u0022using static\u0022 thing, and generally wrote the code in C style. And than I removed some token optimizations to get exactly 1024 tokens because why not. I also tried to use Linq as much as possible to save tokens but I was surprised how slow the code ended up being, so only Linq I ended up using is in the PST unpacking code.\n\nI really loved the challenge, I like to write small compact and weird code so it was right up my alley. And I am now starting to see chess pieces in my dreams too, so thank you for the experience :)"},{"BotID":"Bot_352","AuthorName":"NameGoesThere","BotName":"NameGoesThere\u0027s bot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"My bot is based off of a \u0022dynamic\u0022 system, where it changes evaluation scores based off of how much time / how many pieces are left."},{"BotID":"Bot_353","AuthorName":"migrin","BotName":"Hrustco Bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I didn\u0027t have much time to do this challenge, but it surely was a blast either way! Please do more challenges like this!"},{"BotID":"Bot_354","AuthorName":"fominvic81","BotName":"FomBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_355","AuthorName":"Dhruv S","BotName":"Golden_Chess_Requiem","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_356","AuthorName":"Arttu Halonen","BotName":"AlaskaBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This rather naive bot loops through all pieces to evaluate the board state with set values for pawns as well as minor and major pieces, as well as a set of custom evaluation functions for pawns, knights, and bishops (all I could fit under 1024 tokens) based on the square of the piece. The bot looks 4 moves (two for each player) ahead and determines the \u0022best\u0022 move to be the move which has the best outcome for us, when we assume the opponent to make the best available countermoves.\n\nIf the bot is able to make moves in a very short time (perhaps there are not many pieces left, or perhaps the hardware is so strong), the bot will increase its search depth from 4 moves ahead to 6 or even 8 moves ahead. Similarly, if the move took too long to generate, the next move shall have reduced depth, down from 8 to 6 or 4 moves ahead. There is also a \u0022panic mode\u0022, where all search depths are reduced if the our timer falls below 10 seconds (this triggers even in the middle of move generation).\n\nThe bot attempts to advance its pawns, bring knights to the center, and to develop bishops somewhere in its own half of the board. The bot does not evaluate king safety. The bot is able to find and perform checkmates in the middlegame, but struggles in the endgame.\n\nI was planning on naming the versions of my bots alphabetically with a theme of American placenames, but unfortunately my first \u0022main idea\u0022 A ended up being the strongest one, and thus my entry is called AlaskaBot. BaltimoreBot copied AlaskaBot, and added evaluations for rooks, queens, and kings, but somehow AlaskaBot still ended up being the stronger of the two. ColoradoBot had a \u0022groundbreaking\u0022 lookup table of pre-calculated piece evaluations based on the square of the piece, and the evaluation of the board only changed with the difference (or \u0022delta\u0022) of the move that was played. While this was faster than AlaskaBot\u0027s full loop evaluation, still somehow AlaskaBot reigned supreme."},{"BotID":"Bot_357","AuthorName":"CT424","BotName":"Hot Garbage","SearchKind":"Other / Idk","EvalKind":"Other","Description":"Worked on this for a day"},{"BotID":"Bot_358","AuthorName":"_deeznuts420","BotName":"BackupBotCuzIDeletedPreviousGoodOne","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I deleted my better bot unfortunately and this is my backup, i am really sad"},{"BotID":"Bot_359","AuthorName":"Shlynz","BotName":"FENcer","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Loved the challenge, it was very fun! I used to code along to some of the Coding Adventures anyway, so this was a nice step up from there, would love to see more like these!\nEven tho this is my first real C# dev experience, it was entirely worth it to try. And to be honest, I think learning a new language while doing it added some additional fun :)\n\nSince I don\u0027t really know how to play chess well, I didn\u0027t have a specific or clever idea for the search and haven\u0027t really implemented one of the usual algorithms for this before, so I just went with a tried and true one.\nFor the evaluation, I had an idea from a code golf exercise though. The exercise was about counting the material advantage from a FEN-string, so I took that idea and ran with it. Slightly expanded and sprinkled with some bit shenanigans to add piece-square tables, but nothing more. But I feel like it performs quite well for its size. Certainly better than I thought.\n\nMaybe add some other way to submit the code? Just pasting it in here feels/looks a little bit cursed."},{"BotID":"Bot_360","AuthorName":"","BotName":"the mater","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Awesome challange. Really enjoyed it even though I felt a bit guilty stealing your Pawn"},{"BotID":"Bot_361","AuthorName":"Valentin POQUET","BotName":"Thulium","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Each moves get a number of points and get the average points of all the next moves if the move is done. "},{"BotID":"Bot_362","AuthorName":"","BotName":"nimbot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_363","AuthorName":"randomtestfive","BotName":"letmeout","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"the core idea for this one is that I don\u0027t want to do any actual tree search (besides iterating through the legal moves for this turn), the actual eval is to find the moves that maximize the number of moves you can make minus the number of moves the opponent can make (on the current board. I planned on adding extra heuristics or weighting to modify that score but the only one that made it better was not counting moves that put pieces directly into danger"},{"BotID":"Bot_364","AuthorName":"Ben","BotName":"BongCloudBot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"This well-crafted and elite bot plays the most controversial yet underrated opening in all of chess: The Bongcloud opening. "},{"BotID":"Bot_365","AuthorName":"Daniel Johnson","BotName":"KU_AI_BOT","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"The implementation has alpha-beta pruning negamax, a transposition table, iterative deepening, and MVV-LVA move ordering along with a bare-bones handcrafted evaluation. This work was made in collaboration with the University of Kansas Artificial Intelligence Organization (KUAI), the challenge was a great way for underclassmen to get their feet wet in AI topics :)"},{"BotID":"Bot_366","AuthorName":"Schming","BotName":"Tony","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I started off making the bot at the beginning of summer but then kind of forgot about it, so it isn\u0027t great as I have only actually done a few days work on it. It just uses a simple minimax and is okay. The main problem is it simply doesn\u0027t search deep enough to be good."},{"BotID":"Bot_367","AuthorName":"mathabs","BotName":"TeddyBearBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_368","AuthorName":"Evan","BotName":"Chip","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"First time using C# and enjoyed the challenge. I think the community discord will lead to a lot of very similar bots. A lot of pretentious people on the discord not being helpful to beginners or people first time programming a chess engine. \n\nBot utilizes: Compressed Piece Square Tables, Transposition Table, History Heuristic, Killer Moves, Quiescence Search, PV Search, Late Move Reductions, Check Extensions"},{"BotID":"Bot_369","AuthorName":"Dan","BotName":"shitbot1","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Alpha beta pruning algorithm for search. Uses a really poor evaluation function which I unfortunately didn\u0027t have time to properly make, just subtracts the total material of the opponent from the total material of the player. Also uses transposition tables to save previous positions"},{"BotID":"Bot_370","AuthorName":"code\u003Cmetas\u003E","BotName":"TuroChampEx","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"The bot is just TuroChamp with a few minor additions: Knowledge about draws, Iterative Deepening, AlphaBeta Pruning and very simplistic move ordering(tt move first, then captures sorted by captured piece value, then all others)\n\nThank you very much for the challenge, it was a lot of fun and quite educational!"},{"BotID":"Bot_371","AuthorName":"Nathan Woloshyn","BotName":"Onion","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This was my first experience with chess programming, and was mostly focused on getting the basics from Chess Programming Wiki working. Onion uses Principal Variation Search with all the standard tricks (Null Move Pruning, Late Move Reductions, Futility pruning etc.)"},{"BotID":"Bot_372","AuthorName":"Reckoner (Robyn)","BotName":"CrimesAgainstDotNet","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Transposition tables took a long time to get working, but the gains were so slight. I ran out of time before I managed to get iterative deepening working."},{"BotID":"Bot_373","AuthorName":"Parborway","BotName":"One step at a time except sometimes","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"This bot will make any capture avaliable. Barring that, it will first choose a random move that is 1 tile forewards. If that is not possible, it will make the longest (vertically speaking) move possible. If there is more than one longest move, it will pick the one that is first in the index."},{"BotID":"Bot_374","AuthorName":"SpoXe","BotName":"JazzBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This is a really basic bot, but i definetly enjoyed the challenge. I\u0027m really interested in the general field of game automation/ai so this challenge was really fun. Also the community around this challenge was so great, the people in the discord actually helped me a lot to understand principles like qsearch."},{"BotID":"Bot_375","AuthorName":"Crazyfly072","BotName":"Hello there","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I\u0027ve never done any bot like this before, it was a fun competition but I don\u0027t expect much of my bot."},{"BotID":"Bot_376","AuthorName":"David M. B.","BotName":"OrneryFellow","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I kept trying to tweak my numbers (in my piece square table etc.) and the bot only got worse. I have no idea why, but shooting from the hip was the best I could do.\n\nAlso don\u0027t judge my indentation... I can\u0027t stand when the entirety of a file is indented 3 layers deep."},{"BotID":"Bot_377","AuthorName":"Nathaniel D","BotName":"Big Carl","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Attempts to maximize the value of pieces attacked by it\u0027s team, and to a lesser extent the center of the board. I think it would have been strong with some more refinement."},{"BotID":"Bot_378","AuthorName":"Yajwin Grover","BotName":"IDK What I Was Doing","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"It was a really fun challenge to do and I would love it if you could do more later down the line. Unfortunately I am a junior in high school and I didnt get much time to work on this bot but it was a fun learning experience and I thank you for creating this challenge. Thanks from America."},{"BotID":"Bot_379","AuthorName":"Pedro Contipelli","BotName":"BIG CHUMPER V6.0","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Super fun. Loved the API to lower barrier of entry and abstract out the annoying parts of writing a chess engine. Way too many hours spent. No regrets :)"},{"BotID":"Bot_380","AuthorName":"Sky Sherwood","BotName":"Funko Bot","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"It\u0027s a funky piece of code I made. I can\u0027t remember if it works, I\u0027m very sorry for this piece of garbage."},{"BotID":"Bot_381","AuthorName":"Fioume","BotName":"Scouty","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"So my bot is named Scouty after the negascout algoritm that it is using. I\u0027v added incrementally aTransposition Table, Quienscence, Score ordering, and Pesto Piece Square Table compressed. I\u0027ve tryied null move pruning and killer move ordering but without big success.\nHere is my fork : https://github.com/Lucas-dominguez/Chess-Challenge\nI begin from scratch without help, inspired by rustic chess engine, and then took idea from the discord like the compressed pst etc. It was really fun as I was unexperience with chess coding. Thank you very much for this challenge. Best regards"},{"BotID":"Bot_382","AuthorName":"K\u00F6k\u00E9nyesi Attila (UltraGeek)","BotName":"Bob","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"Bob is a simple bot, he will follow the basic rules of chess: Checks,Captures,Attacks(kinda). He will choose only based on the current turn. He will take trades of atleast equal material(well, as far as he sees). He will make random moves if CCA doesn\u0027t apply and he will prefer pawn moves over other piece moves if there are only a few pieces remaining and in the first few turns. He also tries to get his hanging pieces to safety while (mostly) avoiding repetition"},{"BotID":"Bot_383","AuthorName":"Lino","BotName":"Bobobot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Hi Sebastian,\nI really enjoyed participating in the Chess Coding Challenge even though my bot doesn\u0027t play nearly as well as other bots. It\u0027s my first Coding Challenge ever so it was a new experience for me.\nI started out by coding something which worked somehow but it didn\u0027t include Minimax algorithms and thus had no big potential to get better. So I decided to try making a Minimax algorithm with alpha beta pruning like you did in your coding adventure video.\nFirst it was very hard and frustrating but the more I worked on it the more I learned about how the algorithm actually works.\nMy final bot still has big problems and flaws like placing the queen in front of the king without being protected by any other piece. I have no idea why this happens all the time but still I decided to participate even though my bot will become last place or something because I worked on it so much.\nNow I wanna thank you for hosting this Tiny Chess Bot Coding Challenge because it really is a creative idea.\nGood luck to all other participants!"},{"BotID":"Bot_384","AuthorName":"Dimitri","BotName":"Baloo-D","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"About the bot : Simple negamax bot (alpha beta pruning \u002B quietSearch) with heuristical evaluation (try not to draw if winning, try to draw if loosing, position and material difference calculation...).\nAbout the challenge : I have a BS in computer science in France and it was really fun to work during my vacations. I loved the idea of limited token. I saw a lot of theorical things as transposition tables, differents heuristical evaluation, time managment..., but I think I would have liked to work in team, I find difficult at some points, some issues with my quiet-search function for example, and how to choose weights for evaluation, but I hope my bot can win some games ! \nThank you for the challenge, can\u0027t wait to see your video !"},{"BotID":"Bot_385","AuthorName":"Mark Grennan","BotName":"3D.Opening Bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"The challenge was really fun it\u0027d be cool to see another challenge like this, biggest problem with this ai is its understanding of the middle game and positioning which was hard to implement with not much space left"},{"BotID":"Bot_386","AuthorName":"Saharsh","BotName":"Dream","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_387","AuthorName":"Erik \u0026 Pascal","BotName":"Sven","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Our approach is a classic minmax search through the game tree. We spent a lot of time optimizing the search to increase the search depth as much as possible. The evaluation function takes into account piece value, placement of certain pieces and own/opponent\u0027s king\u0027s position during the endgame to guide the bot towards a checkmate. We adapt the search depth to the remaining time based on some testing and the hope that the tournament machine will not perform significantly worse than ours.\nThis is our first attempt ever at a chess bot and it defeats me so I\u0027m happy :)."},{"BotID":"Bot_388","AuthorName":"britboy3456","BotName":"British Sandstorm","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_389","AuthorName":"ArxelBlw","BotName":"BoyaChess v5","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Hey! I learnt C# from scratch while making this bot. I also learnt a lot about chess programming and stuff. This was very fun!"},{"BotID":"Bot_390","AuthorName":"Scott Ward","BotName":"BuiltCleverBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"A complex but simple bot, using MinMax, alpha beta pruning, iterative deepening, quiescence search, transposition tables, square weight tables with a pretty basic evaluation.\nIt plays pretty well but the basic evaluation means it has a horrible end game. \n\nI spent way to long figuring all this out but had heaps of fun (and some nightmares).\nThis has been a very interesting project, I have learnt a lot from it.\n\nI have coded a chess game before this challenge (not the bot part) just a 1 or 2 player chess game that uses stockfish for the computer AI).\nI am making it to be an interface with a physical chess table me and my girlfriend are building that lights up and will move the real pieces on the board with magnets and motors (not quite finished yet as I keep getting distracted by things like a three month chess bot building challenge :) )\nif you are interested or want a bit of a laugh seeing someone code a chess game before knowing about bitboards, etc just purely figuring it all out as I go,\ncheck out our small channel @builtclever on YouTube. specifically the \u0022Programming a chess game\u0022 video\n\nwith issue #490, if you were interested I uploaded my full code and this comment (had to shorten it also) to my web site at http://www.builtclever.com/ChessChallengeBot.html"},{"BotID":"Bot_391","AuthorName":"Andro 65","BotName":"Monster Queen","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"My idea was to make the bot thing about most basic rules of chess like checks, captures and promotions, if nothing better is found, it plays \u0027best\u0027 other legal move. \nI also want to say that I\u0027m 13 years old and I started programming 3 years ago. C# is not my first language, but I want to make games in unity like you. \nSo I need it and this competition is great idea if you ask me. \nIf I get in the video, that would be a big accomplishment for me, so thank you for the opportunity that you gave us all."},{"BotID":"Bot_392","AuthorName":"iudwgerte","BotName":"Uranium","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"The name Uranium comes from a series, the element series.\nThe element series starts with Lithium, followed by Sodium, Magnesium, Chlorine, Potassium, Calcium, Iodine, Barium, Radium and Uranium.\nUranium\u0027s development cannot be achieved without community support. Thanks to Tyrant, a talented developer and musician. During the development of the bot, most of the source code and ideas came from him.\nWith the end of this challenge, I will also return to a brand new project of my own, Feather, a real chess engine.\nThank you very much for this challenge, which introduced me to chess programming.\n\nAlert: this bot uses this bug: https://github.com/SebLague/Chess-Challenge/issues/489, if this violates the rules, please tell me on a09701070@gmail.com, and I will send an code without this bug in use."},{"BotID":"Bot_393","AuthorName":"Marcin","BotName":"John","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_394","AuthorName":"JustAdy","BotName":"Why Use Full Brain","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"I could have created much better bot, if i wanted."},{"BotID":"Bot_395","AuthorName":"Matt W","BotName":"MattWBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Was a fun challenge, I didn\u0027t have much time to work on it, so don\u0027t expect to be winning! Mostly just used it to challenge myself, it uses a quite straightforward evaluation function based on piece values multiplied by a position value (stored in a compacted piece square table).\n\nI attempted a few things to make it \u0022smarter\u0022 (evaluating pawn structure, king safety, passed pawns etc.) but they all seemed to make it perform worse, and I didn\u0027t have time to debug them. Hence why I\u0027m quite far under the token limit!\n\nThanks for the fun challenge idea."},{"BotID":"Bot_396","AuthorName":"Jonas Tyroller","BotName":"Baby Squid","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"THANK YOU!\nThank you for hosting this competition. The 1024 tokens made it enjoyable to experiment. I appreciate your effort and hope for more events like this. Suggestion: Consider live streaming the playoffs for the bots.\n\nABOUT THE BOT:\nI implemented Negamax search with Alpha-Beta Pruning. The bot uses available moves and piece values for position evaluation, promoting piece development and limiting the opponent\u0027s moves. My main optimization is avoiding a full board evaluation at the end of each search branch. Instead, the bot evaluates scores as the search progresses. I focused on time management, enabling early search cancellation in two scenarios: a clear best move and when reaching diminishing returns. Despite experimenting with other optimizations, only a small openings table was added. Excited for the bot\u0027s performance against others. :)"},{"BotID":"Bot_397","AuthorName":"tr00","BotName":"TinyLispChessBot","SearchKind":"Other / Idk","EvalKind":"Other","Description":"I was more interested in finding a way around the token limit rather than actually implementing the best possible bot. So I came up with the idea to embed a lisp interpreter and squish all the bot logic into decimal packed lisp bytecode (: unfortunately I didnt have much time and could only spend a bit more than a week on this project, so the interpreter and all that works but the actual lisp code doesnt even exploit the fact that I can effectively gain tokens. Im gonna write a proper explanation in my repo when I find time. https://github.com/tr00/Chess-Challenge"},{"BotID":"Bot_398","AuthorName":"DeepGoldenCrown","BotName":"ChessGPT","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"Hi there Sebastian. I watch many many videos of you even though I am not a programmer. I have a great interest in it, and in the past maybe did a few python codes but nothing serious. Used to make some websites with HTML and PHP but that is as far as it goes. \n\nI have used ChatGPT to help me with my code. But don\u0027t think too lightly; without any knowledge of C# it took me many days to make this. \n\nI have to say, have implemented minimax, evaluation, pawnstructures and more; ALL were losing to EvilBot.\n\nWhen I deleted all (and this was A LOT - I started from scratch again - and - got something winning in 85% of the time. \n\nAfter this I wanted to improve again, build on top of this. Nothing I did was succesfull. After one week of working on it now the day has come to submit the code I have. As I said I hoped to make something more. I have dreamed of many tactics but unfortunately without the experience I could not get ChatGPT to help me make what i wanted. \n\nThank you for this challenge and I had great fun making it!\n\nNicky"},{"BotID":"Bot_399","AuthorName":"Quinten F","BotName":"Sleepy panda bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I\u0027ve learned to play chess mostly after I\u0027ve written this bot, so when I wrote it, I thought it was pretty good. Playtesting with other people revieled that it is not toat hard to beat."},{"BotID":"Bot_400","AuthorName":"Cyang946","BotName":"Yangbot V1","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This challenge was pretty hard, but I\u0027ve definitely learnt a lot. I\u0027ve also tried implementing many features but decided to remove them because they were somehow worsening the playing strength of my bot \u003C-- still unsure why (If you see a Yangbot V2 somewhere, I might\u0027ve kept those changes in). \n\nSome cool features of my bot:\n\n- Somewhat compressed Piece square table that I\u0027m very proud of.\n- Light weight evaluation and move ordering\n- Interesting time management tactics. \n\nFun challenge!"},{"BotID":"Bot_401","AuthorName":"Mk-0","BotName":"BlindfoldBot","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"I tried to make a (relatively) good bot that does as little searching as possible - this one will only evaluate its immediate moves and check the opponent\u0027s response once. In order to not lose horribly, it instead analyses the board\u0027s attacked pieces and \u0022simulates\u0022 possible capture chains. It\u0027s probably not that good at chess, but working around the limitations and optimizing the token amount was pretty fun!"},{"BotID":"Bot_402","AuthorName":"Ludovic Debever (Lxdovic)","BotName":"Lxna (V4)","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"First of all, great idea for a challenge! I loved taking part, it was a good opportunity to go further into chess programming, so thanks for that. However, I think 1024 tokens is a bit much, it didn\u0027t force me to optimize the tokens as much as I\u0027d hoped. IMO something like 512 would be a bit better, but I understand that this challenge is supposed to be open to everyone, including code beginners.\n\nHere are all the techniques i was able to implement:\n\n- Iterative deepening\n- Negamax\n- Alpha beta pruning \u0026 Move ordering\n- Transposition tables\n- Quiescence search\n- Aspiration Windows\n- Null move forward pruning\n- PeSTo\u0027s Evaluation Function (with compressed pesto tables)"},{"BotID":"Bot_403","AuthorName":"Bobinou","BotName":"Better than my maker :p","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I loved it and I would like to do similar challenges more often. \nAbout my humble bot: I previously made a TicTacToe bot using minimax with alpha beta pruning so I knew how I could implement that for this bot but I hit my limits when increasing the search depth as it obviously takes more time. So for the time being the bot can only reach a depth of 4 iterations, which is fine but not enough for the competition.\nStill, the bot beats me and the evil bot so I am pleased with the result :)"},{"BotID":"Bot_404","AuthorName":"Will D","BotName":"Chessi","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Most of the numbers for start/middle/endgame are arbitrary. Hope they work well! "},{"BotID":"Bot_405","AuthorName":"Arshia","BotName":"noobot v1","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"i code it then i couldnt improve and now im thinking about improving it"},{"BotID":"Bot_406","AuthorName":"Kayinth","BotName":"GenericBoringbot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I think the only noteworthy bit is that it tries to copy the enemy\u0027s thinking time, I wanted it to try and stall out the enemy if they\u0027re particually slow but I no longer remember how the code works so... eh"},{"BotID":"Bot_407","AuthorName":"4a0I","BotName":"simple chess bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_408","AuthorName":"Deepfriedice","BotName":"CombEaredSkink","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"The evaluation function doesn\u0027t care about pieces at all. Instead, it looks at the difference between the number of moves the current player can make, vs the number of moves the opponent could make if it skipped a turn. This causes a bunch of interesting behaviours, some of which aren\u0027t blunders.\n\nOther than that, it\u0027s pretty normal. The search is done with Alpha-Beta Negamax, and an evaluation cache is used to reduce calls to GetLegalMoves(). Rather than implement iterative deepening, the elapsed time after each move is used to adjust the search depth.\n\nGithub repository: https://github.com/Deepfriedice/CombEaredSkink"},{"BotID":"Bot_409","AuthorName":"Ben Clingenpeel","BotName":"Ben\u0027s Bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"The evaluation function tries to avoid using piece-square tables by counting the number of squares each piece attacks, the idea being that this should naturally get pieces that can attack more from the middle of the board into the middle of the board. Unfortunately this causes the king to want to move slightly inward as well, so the evaluation function also considers the rank of the king and the number of pawns in a sort of \u0022king safety zone\u0022 (it adds points for the king being on its starting rank and takes away points for the enemy king being \u0022safe\u0022). It\u0027s not an incredible bot, but I had a lot of fun making it!"},{"BotID":"Bot_410","AuthorName":"Morra","BotName":"Lamorran","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_411","AuthorName":"Ean","BotName":"StallerBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"General principal of my bot was to attempt to win on time - on the assumption I could beat any bots which did not have a proper timer system built in. I assumed iterative deepening would be too hard to implement within the token limit for most bots, so hopefully that means there are poorer time management bots out there.\n\nThis bot has a similar AlphaBeta search and evaluation structure as your videos. It has added increase in evaluation for keeping the King back and putting pieces near it. I was in the process of adding a bias towards moves which created a greater number of lines to evaluate, as well as tweaking the depth of search in a more sophisticated way. My C# isn\u0027t great, so I encountered MANY bugs (with limited internet access while on holiday) and ended up with what I have here.\n\nLots of fun doing this! But I unfortunately didn\u0027t have enough time to put as much into it as I wanted. Thanks for organising this, I hope you host things similar in the future!!"},{"BotID":"Bot_412","AuthorName":"Josiah Jordan ","BotName":"MilkMindV1","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This was my favorite coding challenge I have ever done. Even after posting my first video on my channel about it (TheCalculatedCreativeCoder) I knew it was going to be the hardest coding challenge I had ever done. Thank you for this challenge!!!"},{"BotID":"Bot_413","AuthorName":"TeamDman","BotName":"TrainedLikeTeamy","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Machine learning evaluation function","Description":"Getting the weights to fit in the token limit, training the weights, was fun but I kinda gave up but still wanted to submit. It was trained on my own games, so it was meant to play like me, but I couldn\u0027t get it to work with such a small neural net"},{"BotID":"Bot_414","AuthorName":"Aron Martens","BotName":"Aron\u0027s engine","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I made this bot during the summer, because I was bored there not being school. It was a real challenge, since I never wrote in C# before (except from copying stuff from your video\u0027s into unity :D ). I am a tournament chess player, so I know a bit about chess. I think my bot is pretty garbage since I can beat it easily.\nThe last 6 weeks or so were pretty tough, because my bot never worked and I started over again at least 5 times, this made me give up and I bug fixed the bot today, which was the last day of the challenge.\n\nThank you Sebastian for making this challenge, where I learned a lot about how chess engines are made. I\u0027d love to see more community challenges!\n\nKind Regards\nAron Martens\nBelgium"},{"BotID":"Bot_415","AuthorName":"YannM","BotName":"SYSMER","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Machine learning evaluation function","Description":"Hi, french student here, i loved your challenge even if I could only work on it not much time. I tried to make an IA base en renforcement learning with my bot confronting older version of itself. Sorry my code is really messy.\nThx a lot for your work."},{"BotID":"Bot_416","AuthorName":"Staicu Ciprian","BotName":"ReturnOfTheQueen","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Very time consuming"},{"BotID":"Bot_417","AuthorName":"Vaggelis Softsis","BotName":"ShallowBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"It\u0027s a realy simple rushed implementation of a MiniMax search algorithm with alpha-beta pruning and a crappy evaulation function that doesnt take many things into account.\nIts depth is very low cause of speed limitations and It\u0027s exceptionally bad at checkmating the opponent :p"},{"BotID":"Bot_418","AuthorName":"Samm","BotName":"Wee fella","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"I\u0027ve written a somewhat primitive evaluation function that just takes into account a few basic chess principles. I could never implement functionality to detect which squares were attacked by what pieces and how many of them, I feel this could have made it many times stronger but bitboards were a bit too much for my head. It struggles in the opening and endgame a lot but it takes about 500-600 wins against the default EvilBot to about 50 losses which I\u0027m fairly happy with. Overall very fun and I\u0027m definitely tempted to write my own engine from scratch this time.  "},{"BotID":"Bot_419","AuthorName":"Bowser Bowering and Allyn Lloyd","BotName":"PrincessAtta","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"Our Approach:\nIn my Swarm Intelligence class, we read a paper called \u201CWhen ants play chess (Or can strategies emerge from tactical behaviours?)\u201D. This paper describes an agent-based approach to evaluating moves using the following algorithm:  \n\n- \u002B10 points for every one of your pieces that sees the square and -10 for every one of your opponents pieces that see it\n- If an opponent\u0027s piece is on the square, add its material value * 2\n- Add the material value of every new piece that would be threatened/defended\n- Subtract 10 and the material value of the moving piece (since making the move would relinquish its control of the square and risk its own material)\n- Pawns add points equal to the rank of the square to encourage promotion\n\n\nFirst iteration\nFor our first bot, we faithfully implemented this algorithm since we wanted to see how it performed and maybe get an ELO estimate for it.  \n\nWhile this algorithm works, we identified several problems with it:  \n- It has no concept of space control\n- It doesn\u0027t account for the pieces it stops defending\n- It doesn\u0027t factor in cases where a move \u0027defended\u0027 a piece that was already defended by the moving piece\n- It doesn\u0027t consider how many pieces are already attacking the piece\n- It doesn\u0027t consider the pieces that will be threatened if the move is made\n- There is not much of an incentive to castle\n- For promotions, all pieces are sometimes favored equally\n- It can\u0027t see through pieces (i.e. batteries)\n\n\nSecond iteration\nFor our second iteration, we added calculations for most of these, weighted by arbitrary constants. We could not figure out how to identify batteries or re-defending pieces, but the other factors were enough to improve its performance.\n\n\nThird iteration\nFor our third iteration, we attempted to use a genetic algorithm to optimize the weights for each of the factors in evaluating a move. We would make each genome in the population play 10 games against PrincessAtta v2 and fitness would be determined by the win/loss rate. We were able to achieve weights that achieved a score of 6.5/10, though it was not clear if these weights actually performed better on the leaderboard since we were only training against the same algorithm which was already very passive.\n\nFourth iteration\nFor our final iteration, we looked for other approaches to agent-based chess engines, and found a paper called \u201CMulti-Agent Based Chess Move Generator System: Taking into Account Local Environments\u201D that extended the algorithm from the first paper. The idea this paper presented was that instead of the agents deciding on moves based on their marks, they give all the information to the King who then makes the decision. In short, they used the evaluation function from the first paper to guide a minimax tree search with alpha/beta pruning.  \n\nWe implemented this algorithm using our improved evaluation function and a negamax tree search, which is just a simplified minimax tree search for zero-sum games like Chess. This algorithm was significantly stronger than our previous iterations at depths of around 8, however it was much more computationally expensive. Since the chess framework for this algorithm was not designed for our algorithm, many of our evaluation factors were very costly to compute, so the bot frequently reached the end of its time limit at depths of 5\u002B. There might be some clever bitboard math that could speed it up but we couldn\u0027t wind anything.\n\nDue to the 4th version frequently timing out, we submitted the 3rd version. All the versions can be found here if you\u2019re curious: https://github.com/rhit-bowerirn/Tiny-Chess-Engine\n\n"},{"BotID":"Bot_420","AuthorName":"_Mus","BotName":"NostradamusChessNN","SearchKind":"Some form of minimax search","EvalKind":"Machine learning evaluation function","Description":"Mix of ideas from CPW, some stolen code and stupid En-Passant detection NN"},{"BotID":"Bot_421","AuthorName":"Outer Cloud","BotName":"Lila","SearchKind":"Other / Idk","EvalKind":"Machine learning evaluation function","Description":"I learned a lot in this challenge, especially since I\u0027ve never attempted to make a chess bot before, thank so much for providing the API and framework to make this thing possible.\n\nHere are some of the interesting / unique concepts that I\u0027ve incorporated into my bot:\n\nThe goal of Lila is to fit as large of a neural network into this challenge as possible inspired by LeelaChessZero.\n\n1. Best first search\nLila uses something like upper confidence bounds. Basically I tried making an especially small search that could still take advantage of the AI\u0027s judgement of a position.\n\n2. Dense Layer Convolution Layer Hybrid\nI originally wanted to create an AI that used a combination of convolution and dense layers, but the code for a convolution layer was MASSIVE. So, I\u0027ve made small dense layers that run over the board in a 3x3 kernel which all pool into one 72 input layer \u002B 1 input for who\u0027s move it is. After that is a normal dense layer that outputs the prediciton on the evaluation of the position from white\u0027s perspective.\n\n3. Training Data\nAll the data was trained using quiet positions, and the dataset was kindly provided by Jw. I wanted to add some non quiet positions to the dataset, but I didn\u0027t have time. The network was completely trained using Pytorch, and I extracted the parameters of the model and reimplemented the functionality of the dense layer in C#.\n\n4. Parameter Compression (THE MOST INTERESTING PART)\nShort answer: cut 64 bit floats down to 6 bits, map them onto odd exponential function, quantize and pack into decimal data type that allows for 192 usable bits, fitting 16 parameters to a single token.\n\nThe hardest part of this challenge for neural networks is fitting lots of parameters into tiny tokens counts. My neural network is 4927 parameters that is compressed down into 307 tokens. HOW IS THAT EVEN POSSIBLE?\nWe can\u0027t possible store each parameter as a raw number in an array. Instead we\u0027ll first look at fitting more floats into a single token. The decimal datatype allows for 192 usable bits that we can compress into. My idea was to chop down the 64 bit float parameters of the network, into a mere 6 bits each, allowing us to fit 16 parameters to a single decimal token. The problem is this allows for only 64 possible values of the float when quantized, not nearly enough for proper network accuracy without a trick. The trick I used was to map the parameters onto the function x^3. I picked this function because the density of parameters in my network looks like a bell curve centered around zero. x^3 allows most of the accuracy to be \u0022spent\u0022 around the number 0 where most of the parameter values are. This allows the network to stay surprisingly accurate despite the massive amount of compression.\n\n5. Speed\nOne of the problems with the network was that inference was slow. I was created float arrays multiple times each time I wanted to inference the network. To solve this I pre allocated all of the arrays, and simply copy values between them using Array.Copy. This roughly doubled inference speed and as result, increased playing power.\n\n6. Misc token optimization\nI didn\u0027t want my code to become an absolutely unreadable mess like some of the super heavily optimized bots, so I didn\u0027t spend too much time into optimizing small token amounts. Mostly I just create multiple variables at once, and combine two for loops into a single one when iterating over x and y.\n\nCool thing about bot:\nIt has a super cool play style where it \u0022shuts down\u0022 the board with pawn structure and long diagonals. It has some of the coolest and weirdest openings I\u0027ve ever seen.\n\nIssues with this bot:\nThe search is simply not powerful enough. Matched with a slightly scaled down version of the same model using standard alpha beta min max, this bot loses most of the time. Probably because it misses some tactics. That\u0027s why I wanted to add some non quiet positions into the dataset. My goal with this bot was to make something that had hopefully, the largest neural network in this challenge that could play decently. (It beats me and my dad with 100% win rate).\n\nThank you so much Sebastian for creating this challenge. Hopefully this explanation wasn\u0027t too long to read for you. Look forward to seeing your video!\n\nFinal Credits:\nAll code was written completely by me. Thanks to Jw for training dataset."},{"BotID":"Bot_422","AuthorName":"Omsk","BotName":"FloppyChess 4.2","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Principal Variation Search with a bunch of pruning methods and heuristics and a compressed PESTO evaluation. Saving tokens was pretty difficult as I wasn\u0027t used to C#."},{"BotID":"Bot_423","AuthorName":"Matthias Kruis","BotName":"NightBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Thanks for the challenge, it was super fun!"},{"BotID":"Bot_424","AuthorName":"Wincent01","BotName":"ILVM","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This bot is a Virtual Machine for the .NET Intermediate Language. The bot itself it quite poor, I know too little about chess bots to make it good, but the concept is unique, I hope. This challenge had a limit of 1024 language tokens. That limits the amount of logic which can be put into the bot. So what if, instead, the logic of the bot is to run a VM.\n\nThe bot code itself is compressed to 128-bit decimals for storage. The code is compiled from .NET IL (Common Intermediate Language). Each instruction is 8-bits with 6-bits for the type of operation, and 2-bits for how to handle the result.\n\nIn the submitted version the bot does a 3-deep minimax search with a hand-crafted evaluate function.\n\nThe VM works with dynamic typing to avoid token-heavy type casting. This is slow. In a new version of the bot which I was unable to finish in time this is solved by instead only working with 64-bit longs. In this version the compiled code is not stack based as it is in this version. Engine calls are done by writing to specific addresses instead of how it is done now. https://pastebin.com/fCcQaF9k\n\nThanks for the challenge! Hopefully I will have the motivation to finish the new version in the future."},{"BotID":"Bot_425","AuthorName":"ErwanF","BotName":"200 Tokens Monstrosity","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This bot only uses 200 tokens! I tried pushing it to the extreme, to see how far it could go. A previous version of this bot won the NanoChess tournament hosted by a community member, and I further improved it later to gain about 100 more elo.\n\nFeatures:\n  - alpha-beta search / negamax\n  - move ordering similar to MVV-LVA\n  - iterative deepening with time management\n  - quiescence search\n  - material evaluation (with accurate piece values, slightly inacurate for promotions but good enough)\n  - mobility evaluation (makes the bot play human-like by trying to control the board)\n\nIt was extremely challenging to fit everything in 200 tokens, and I used lots of tricks to save tokens and maximize the performance. I\u0027m overall very satisfied by how it turned out,and I think I spent more time on it that on the 1024 tokens bot... I guess 1024 was not challenging enough!"},{"BotID":"Bot_426","AuthorName":"Soma Nyiro","BotName":"ItBeatsMe","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Implemented a simple variation on SOMA algorithm, mostly as a learning experience. Aligns with my name nicely hehe. It was lots of fun. :)"},{"BotID":"Bot_427","AuthorName":"Beaud R\u00E9mi and Mechulam Antoine","BotName":"LeMaire","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"LeMaire is based on the classic negamax and alpha beta algorithm. It evaluates positions according to material, positionnal and endgame data.\nThank you for the challenge, it was really interesting to create this Chess AI with a limited amount of code!"},{"BotID":"Bot_428","AuthorName":"Skelecat","BotName":"Valkyrie","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This was a lot tougher to make than I thought it would be. I haven\u0027t implemented any algorithms I don\u0027t understand, and a key one I am missing is quiescence search (it never clicked for me). I tried to understand the transposition tables with negamax, but I couldn\u0027t get my head around that either.\n\nTo solve the problem of the evaluation function leading the search to hang pieces (due to the lack of a quiescence search), I put a \u0022ignore hanging pieces\u0022 factor into my evaluation function. This ended up working quite well actually!\n\nI had a lot of trouble with the bot\u0027s time management. It would search too deep for unimportant positions and too shallow towards the end of the game where there\u0027s a lot of tension (due to running out of time). I came up with if it decides upon the same move twice in a row after a certain depth, then it stops the iterative deepening and just plays the move. It works okay, but it still has time problems and I don\u0027t know how to make it better.\n\nIt is called \u0022Valkyrie\u0022 because it seems to like moving the queen in the early game. And initially, I thought it would be funny to hard-code the wayward queen attack opening, but I ran out of tokens and removed it later.\n\nI feel I have made a rather mediocre bot here. It doesn\u0027t do anything crazy, it isn\u0027t particularly good, but it\u0027s okay, and I am proud of it. It destroys every human person I\u0027ve thrown at it at least! Thanks Sebastian for the cool challenge!\n\nP.S. The memory usage shouldn\u0027t exceed the 250mb limit, but the de-referenced objects between turns might (it clears the transposition table at the start of think). Depends when the garbage collector runs. Hope this is okay."},{"BotID":"Bot_429","AuthorName":"Beaud R\u00E9mi and Mechulam Antoine","BotName":"LesMoutons","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"\u0022LesMoutons\u0022 is based on a very special algorithm : the meanimax! It works a bit like the classic minimax, but uses the mean of the child evaluations to evaluate positions. It allows this bot to make a lot of threats, and capture pieces if the opponent is not looking! It plays pretty well against humans, we will see how it plays against bots :)"},{"BotID":"Bot_430","AuthorName":"Dom","BotName":"KnightMare","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I play chess and got frustrated early on with how little progress I was making. Unfortunately \nI picked it up too late again. The time I spent on it though was super fun and it was great seeing how the community got together on the discord.\nI would definitely take part in future challenges as well!"},{"BotID":"Bot_431","AuthorName":"TSDT","BotName":"r\u00F8hgryd me\u0027 fl\u00F8e ","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_432","AuthorName":"J\u0026J Cervenan","BotName":"NIWTFWD","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Me and my brother we loved the challenge. Even though we had little to no experience with this kind of programming (also with programming as a whole), trying our best got us to this bot. Sadly, we weren\u0027t able to successfully implement iterative deepening - thus sticking with ish-deepening :D Enjoy and thank you for your time you gave us. I really appreciate your work, keep up! "},{"BotID":"Bot_433","AuthorName":"superplink","BotName":"PlinkBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Pretty simple, uses minmax algorithm along with a piece square table."},{"BotID":"Bot_434","AuthorName":"ranger6777","BotName":"penny trader","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"my pathetic attempt at getting the most depth possible(hence the name). Averages 8-9 depth, but I\u0027ve seen bots with over 10. Its because I do minimax search as opposed to negamax, which took too many tokens and prevented me from using more tricks to get deeper. Tricks: Minimax, Quiescence(I think?), Null move search, Transposition, Iterative Deepening"},{"BotID":"Bot_435","AuthorName":"TSDT-Silly","BotName":"r\u00F8hgryd me\u0027 fl\u00F8e made in China","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This bot tries to play the worst move everytime"},{"BotID":"Bot_436","AuthorName":"Team Thursday","BotName":"King Shuffler","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This was made by a group of friends that meets on thursdays to code fun projects together."},{"BotID":"Bot_437","AuthorName":"TSDT - F","BotName":"bl\u00E5 gr\u00F8\u0027 med r\u00F8g b\u00E6rr","SearchKind":"Other / Idk","EvalKind":"Other","Description":"This bot fell asleep, so it just stalls forever"},{"BotID":"Bot_438","AuthorName":"Tadeam","BotName":"Malina","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"Hi i am from Czech Republic and this is my frist project in c#. My bot can only relly see about to a 2 of depth,, to get around this limitation of not wanting to make a minmax algorithim it has the bool function canReCapture with no limit to depth alowing the bot to see littel bit more to the futere of captures chains, and i hope taht this will reduce the plunduring. And i am happy that it actully works. The other evalution functions are moveIsCheckmate; moveAllowsCheckmate if the move lets or makes checkmate posible it will get -10000 of score points. And also every move has a check to se what piece can be easli taken taht also is added to score. Them there is the amout of enemies side controled whitch i dont know if it even works. \n\nWell anyways i enjoyd this coding chalenge.\n"},{"BotID":"Bot_439","AuthorName":"Nolan","BotName":"Hershel","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I used a NegaMax search using PeSTO\u0027s evaluation function for the heuristic function."},{"BotID":"Bot_440","AuthorName":"Sanfordpox","BotName":"ItBeatMyFriend","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I focused mainly on board evaluation."},{"BotID":"Bot_441","AuthorName":"Mathias Elgaard","BotName":"RigidBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"My implementation is a traditional minimax search. I managed to pack the search with a bunch of optimisations, such as\n\n* alpha-beta pruning\n* quiescence search\n* transposition tables\n* move-ordering using the transposition table \u002B MVV-LVA \u002B history heuristic\n\nMy bot also has some very basic time management, which I haven\u0027t properly tested at all. Hopefully it doesn\u0027t spend too much time per move!\n\nThe evaluation function consists only of material count \u002B piece-square tables. It does have two sets of piece-square tables though, one for the middle-game and another for the end-game, and blends between them based on the phase of the game. I had to encode the piece-square tables into an array of 64-bit numbers to make room for it.\n\nI was originally planning to use machine learning, or some other optimization algorithm to tune the values in the piece-square tables, since effectively, piece-square tables can represent a mini neural network (one weight for every piece for every square, with a single output neuron representing the predicted outcome of the game). I didn\u0027t have great results with this though, so I ended up just using hand-crafted tables. This is why I have two distinct sets of tables in my bot (middle game and end game), with the idea that these sets could be tuned separately. Right now only the king and pawn end-game tables are actually different than the mid-game tables, so all the other tables are a bit wasteful, but oh well.\n\nTo make room for all of these features, I had to make the code very compact... I am currently only a handful of tokens shy from the limit. This does make the code hard to read/understand in certain areas, but I made sure to leave some comments to (somewhat) clarify the madness. :)\n\nI had a great experience with this programming challenge! It was really fun to come up with a strong bot. I liked working under the limit of the bot brain capacity, it meant I had to think a little more creatively about how I approach the challenge. I ended up testing a bunch of different features to make the chess bot stronger, but then I had to make careful decisions about which ones to keep and which ones to throw away, which was very enjoyable! \n\nThroughout this process I had many surprising results too, for example in a previous version I implemented the killer move heuristic, but it didn\u0027t seem to help the search much, in fact it made the program search slightly *more* positions than otherwise, which was unexpected! Maybe I just implemented it wrong, but in any case, the history heuristic seemed to help a lot better, so I left that in!"},{"BotID":"Bot_442","AuthorName":"Taras Vuk","BotName":"Tarch","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_443","AuthorName":"LunarTech","BotName":"LunarBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Logic/functions based on coding adventure videos. Trying to cramp in as much functionality from these as possible using uint64 values to encode data etc."},{"BotID":"Bot_444","AuthorName":"Lev and Yoaz","BotName":"Super-Centre","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"We tried to make a minimax algorithm (with many weird bugs), assessing the board to extent (almost nonexitent).\nOverall it was a fun and challenging experience, way off our daily routine. It also enabled us to join forces as father and son."},{"BotID":"Bot_445","AuthorName":"Jakob","BotName":"KunoVonHagenBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Thank you so much for creating this challenge. I wanted to something like this for a long time now and finally got an awesome chance. Anyways, this was my first attempt on chess programming so I kept it simple with a MinMax search with qiescence search at the end with a minimal transposition table, and some basic evaluation for piece placement, mobility and material difference."},{"BotID":"Bot_446","AuthorName":"Pierre Girardeau","BotName":"Quinn","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I implemented a chess bot using negamax search with iterative deepening and alpha-beta pruning. I had plans to enhance the evaluation function, focusing on king safety and pawn structures, but I hit a roadblock due to the bot\u0027s brain capacity limit.\n\nCurrently, the evaluation function considers material, activity, and control of the center, but I\u0027m unsure about the ideal weight for each component. There may also be some bugs causing occasional strange behavior, which I did not have time to iron out.\n\nNevertheless, I had a blast! Thanks a lot for putting forth this challenge :)"},{"BotID":"Bot_447","AuthorName":"Jonas // dotwalking","BotName":"DotBot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"This is the first time I have ever participated in any coding challenge and this was a really great experience. I am in college for computer and data science and started getting really into chess a few months ago, so this challenge was right up my alley. Unfortunately I had to work on my bachelor thesis during this time, so I only had the past two days to really work on this. The DotBot will probably perform accordingly in the tournament, but I just had to participate. \nEn Passant is of course \u0022forced\u0022 (the way I implemented it, not really, but it\u0027s the first thing the bot checks for every move). It also checks for mate in one, two, three, and sometimes four. All other moves are evaluated using a custom evaluation function, which checks captures, hanging pieces (but not well), mates for the opponent, and other stuff. The bot is not optimized at all and some functions do not work entirely how I want them to yet, but I am going to keep working on it after the challenge ends and also want to try an AI approach. I also want to have some friends do their own bots using your project and then have a little tournament. So thank you for this, I hope for future coding challenges from you and am also eagerly waiting for a new chess coding video (or any really) by you. It was a really fun first time!"},{"BotID":"Bot_448","AuthorName":"Kekz","BotName":"Paradox Bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I mostly looked up how other engines are working and what the basic implementations are built on. I just wanted to try and implement as much as I could find. One problem were the tables for each piece since they would take a lot of brain capacity, I wish I had more time to squeeze things up, but that\u0027s just how things end. I had quite fun working on my bot and seeing how much better each version got, I really appreciate you for doing this kind of stuff and I\u0027ll happily accept another challenge if there will ever be one. Take care!"},{"BotID":"Bot_449","AuthorName":"Broxholme","BotName":"Sardine","SearchKind":"Some form of minimax search","EvalKind":"Other","Description":"Started with JW\u0027s example bot after it trounced my initial implementation of negamax.\nAdded precisely encoded PeSTO tables (based on a Discord suggestion by folke), made the evaluation semi-incremental (since removed) and added small tempo bonus for the side to move.\nAdded killer move heuristic and history heuristic based on Chess Programming Wiki.\nAdded principal variation search based on Discord and Chess Programming Wiki.\nCopied null move pruning and some sort of futility pruning (which I don\u0027t fully understand, but which adds ELO) from, IIRC, Selebot.\nOptimised code a little for speed and token limit (e.g using ref keyword for the transposition table) with help from a relative.\n\nCouldn\u0027t decide what to write for \u0022how does your bot evaluate positions\u0022. I suppose PeSTO is a machine-learned evaluation function (\u0022tuned\u0022 in chess programming parlance), but I didn\u0027t do the machine learning and it\u0027s not a conventional neural network. But neither is it handcrafted: I just copied it (now from TOANTH, who has retuned PeSTO with a phased bishop pair bonus also).\n\nSince writing the above I have done a few code optimisations and added basic late move reduction, aspiration windows which I took from Tyrant\u0027s excellent bot, and a bishop pair bonus. And slightly different TT logic from Weiss."},{"BotID":"Bot_450","AuthorName":"Adt","BotName":"Optimus","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_451","AuthorName":"Kokken","BotName":"GreGory","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I\u0027m not the smartest, but I tried and I had fun; and that\u0027s all that matter."},{"BotID":"Bot_452","AuthorName":"Danny Boy","BotName":"Midnight Oil","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Step 1: write a killer 2k token bot. Step 2: Pull an all nighter on your anniversary taking everything out that made it good to submit at 23:59."},{"BotID":"Bot_453","AuthorName":"Nicky Kitchingman","BotName":"Chessica","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Just did a basic maximising of useful seeming atrributes of gameplay a few moves ahead"},{"BotID":"Bot_454","AuthorName":"Coding With Avaclava","BotName":"The Mad King","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"Hello, This bot was made in the last 4 hours of the coding challenge (I kinda forgot about it lol). It uses a very simple \u0022move good do it, move bad avoid it\u0022 kinda mentality. It does look 1 turn into the future to check if the move is gonna result in a checkmate (both enemy or friendly) or a piece being taken. The bot has a variable that every second turn makes it want to move the king piece a bit more than the others (just a bit, since if the value is higher than that, the bot becomes quite bad lol), hence \u0022The Mad King\u0022 inspired by the game I\u0027m currently developing. In the code, I also added a debuff score when the king has moved the same type of piece multiple times in a row. It also has a scoring system to determine if its losing and if it is, it will try to force a stalemate. I did try to make it look far into the future but i kinda ran out of time (shocking ikr.) that\u0027s also the reason why the scoring on the pieces, capturing... and stuff like that is a bit off but good enough. (ps dont read the code lol)"},{"BotID":"Bot_455","AuthorName":"thesharpestknife","BotName":"Reaper","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I chose to calculate \u0027evaluation = (ourValue - opponentsValue) * 65536 / (ourValue \u002B opponentsValue)\u0027, which nicely encapsulates the advantage of trading material when you\u0027re better. The 65536 constant is just to ensure granularity, as removing it would make the division return 0.\nThe version I have submitted was slightly weaker in testing than a different version I made, which used a completely different evaluation scheme but the same search. I preferred the playstyle of this version though, so here you go.\nThis has been a great way to become familiar with both chess programming and c#"},{"BotID":"Bot_456","AuthorName":"Hikushii","BotName":"HikuBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_457","AuthorName":"Whoever","BotName":"Version 8","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_458","AuthorName":"Guigui","BotName":"Mischievous bot","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"Cool challenge, first time using C# and it was a nice way to start!"},{"BotID":"Bot_459","AuthorName":"Diplomancer","BotName":"StockShrimp","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This was a bit of a rushed product considering I programmed the majority of the bot before the school year started and then kind of forgot about it until late September. I wish I could have used my excess brain capacity to hand program in my favorite chess system(probably the King\u0027s Indian) for a personal flare but while sitting down on September 30th I realized the implications of the task. Nevertheless, I am still happy about the final product. I feel like I learned a lot about how to manage minimax searches. Ironically, only like a month or two before the competition announcement, I was working on a similar algorithm for a chess-like game in Unity, so you can imagine it was pretty exciting when one of my favorite YouTubers started to host a competition for that exact same thing. Anyway, this was a really fun challenge that gave me a deadline and something to do, so thank you for hosting it."},{"BotID":"Bot_460","AuthorName":"Ludovic Debever (Lxdovic)","BotName":"PixelArtist (sort of)","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"As the name suggests, this bot doesn\u0027t aim to checkmate its opponent, its only goal is to draw a nice pixel art for you. Now here\u0027s my idea:\n\nMy first idea on how my bot would work was this: \n\nInstead of starting from the chess start position, it would start from the desired position and find the path that would take this position as close as possible to the classic chess start position, after this, reverse the order of the moves and it\u0027s basically almost solved. Now after some thought, this would probably need a custom engine since pawns move only forwards. And the only way i could make them go backwards was by undoing a move, which would require to know how it got to this position initially. Also, I thought castling could be a problem. So i gave up on this idea completely.\n\nNow here\u0027s how I did it instead: \n\nThe desired position is represented as a bitboard, where set bits define what squares should have a piece on it. I created a custom evaluation function that counts how many pieces are on the desired squares and how many are not. Hook that to a classical chess engine search and here\u0027s the result.\n\nNow it\u0027s not perfect, far from that, it makes lots of sub-optimal moves. But when playing against itself, it often gets close to the desired position  and sometimes, achieve its goal. And when it does, it plays an illegal move, thus forfeiting the game and keeping its precious art.\n\nHere\u0027s a game it played against itself, trying to display a simple smiley :)\n\n1. Nc3 Nc6 2. Nf3 Rb8 3. b3 Ra8 4. d3 f5 5. Be3 Kf7 6. g3 Ke6 7. a4 Kd6 8. Bc5\u002B Kxc5 9. e3 Rb8 10. Kd2 Ra8 11. Kc1 Nf6 12. Kb1 b5 13. h4 Rb8 14. Kc1 bxa4 15. Rxa4 Rxb3 16. Kd2 Ba6 17. Qe1 Qa8 18. Kc1 Kb6 19. Qd1 Kc5 20. Qd2 Qb8 21. cxb3 Qxb3 22. Rg1 Qb2\u002B 23. Kd1 Qa2 24. Kc1 Kb6 25. Rh1 Kc5 26. Kd1 Kb6 27. Ke1 Kc5 28. Bg2 Kb6 29. Rg1 Kc5 30. Kf1 Qb2 31. Ke2 Kb6 32. Kd1 Kc5 33. Ke1 Kb6 34. Ke2 Kc5 35. Kf1 Kb6 36. Ke1 Kc5 37. Kd1 Kb6 38. Re1 Kc5 39. Ke2 Kb6 40. Rea1 Kc5 41. Rc1 Kb6 42. Kd1 Kc5 43. Ke1 Kb6 44. Kf1 Kc5 45. Kg1 Bxd3 46. Kh1 Qb1 47. Kg1 Qb3 48. Kh1 g5 49. Kg1 Rg8 50. Kh1 gxh4 51. Qxd3 Rxg3 52. Kg1 Bh6 53. Kf1 Bxe3 54. Ke1 Rxg2 55. Kf1 Rg3 56. Ke1 Bxc1 57. Kf1 Bd2 58. Ke2 Bc1 59. fxg3 Bb2 60. Kd2 Ba1 61. Ke2 a6 62. Kd2 Bb2 63. Ke2 a5 64. Kd2 Ba1 65. Ke3 Bxc3 66. Qxd7 Kb5 67. Qd1 Kc5 68. Rxh4 a4 69. Qb1 Kb5 70. Qf1\u002B Ka5 71. Qb1 Kb6 72. Qf1 Kc5 73. Qd3 h5 74. Rh1 h4 75. Ra1 Kb4 76. Rb1 Kc5 77. Rh1 Kb4 78. Ra1 Kc5 79. Rb1 Kb4 80. Ke2 e6 81. Ke3 Kc5 82. Ra1 Kb4 83. Rh1 Ka3 84. Rb1 Kb4 85. Ra1 Kc5 86. Rb1 Kb6 87. Rh1 Ka5 88. Ke2 Kb4 89. Rxh4\u002B Kc5 90. Kf2 Kb6 91. Ke3 Kc5 92. Ke2 Nb4 93. Kf2 Nxd3\u002B 94. Ke2 e5 95. Kxd3 e4\u002B 96. Ke2 e3 97. Kd3 c6"},{"BotID":"Bot_461","AuthorName":"bull313","BotName":"CopyBot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Other","Description":"Behaves much like EvilBot (tries to checkmate or capture best), but otherwise it will try to copy the opponent\u0027s previous move (e.g. white plays e2e4, black plays d7d5). If it is unable to copy, it will play a move at random."},{"BotID":"Bot_462","AuthorName":"Rafael","BotName":"quick and dirty","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"super nice challenge, unfortunately too little time... hope you will be doing something like this again in the near future! also thanks for all the great content over the last years! very inspiring!! (:"},{"BotID":"Bot_463","AuthorName":"Thunderous Echo","BotName":"J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J J","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"The garbage flinger flings garbage by flinging garbage. It"},{"BotID":"Bot_464","AuthorName":"MDM","BotName":"Indian_Liver","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_465","AuthorName":"Joshua: Use \u0022Names\u0022 as a nickname if possible or necessary. Thanks!","BotName":"Larry","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"Sorry for the longer description. XD\n\nHey! I\u0027m a young programmer (starting college studying Comp Sci this year!) and have never coded in C# before so this was a great experience to try and learn (although it is very similar to many other coding languages so it wasn\u0027t too steep of a learning curve). I\u0027ve also never used VSCode (never had a good reason to) so it was good to learn that too, despite not really using any of its features. Unfortunately, because I was moving into college during this time and things were crazy, it\u0027s not finished to the point that I want it to be, but I\u0027m turning it in for fun anyway (:\n\nAs for the Bot: I definitely went more for a fun approach than a good approach XD. Basically, the main idea of the bot is to always go for the scholar\u0027s mate. I\u0027m hoping that enough entries in the competition aren\u0027t good enough and will fall for it (no clue if that\u0027s true or not though). After it attempts every variation of scholar\u0027s mate it knows, then it just converts to a basic algorithm to determine what a \u0022good\u0022 move is. I analyzed moves instead of boards (which was a mistake for many reasons, despite being simpler) but it is what it is now. I think I caught most of the edge cases in the scholar\u0027s mate but I don\u0027t know that for sure, so it could also just leave the queen hanging XD. \n\nEither way, I had fun doing it, and I\u0027m excited for the video! I hope that Larry makes an appearance. (:"},{"BotID":"Bot_466","AuthorName":"RB","BotName":"ItPlaysBetterThanMe","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"This was fun. Youtube showed me the info video with 2 days left in the competition, so this is a very basic submission. I thought of adjusting the weights using a basic reinforcement learning technique, but didn\u0027t have the time so I just guessed at some numbers. This looks like it would be great for a programming class, a good introduction to algorithms and machine learning."},{"BotID":"Bot_467","AuthorName":"G0ldSt0ne","BotName":"Basic Bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I\u0027ve never coded with C# or C\u002B\u002B before but had a ton of fun with this challenge. My strategy was to check every single possible move within a given depth in order to not miss anything. Although I couldn\u0027t figure out how to improve the search algorithm efficiency, I am overall proud of the code I created."},{"BotID":"Bot_468","AuthorName":"Col\u00E9gram","BotName":"Col\u00E9gramBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_469","AuthorName":"ComplexSymbol","BotName":"ThrowverEngineered","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Lovely challenge, thank you Seb, I learned a lot during this challenge and I hope you make more in the future! (I would love a Go bot challenge!)"},{"BotID":"Bot_470","AuthorName":"Nepiceo","BotName":"Hopeless Bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I\u0027m new to C#, and I struggled with this challenge. From my testing, it could barely beat the EvilBot, so I don\u0027t have high hopes for this."},{"BotID":"Bot_471","AuthorName":"Lucas","BotName":"ABadBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Had a lot of fun and learned a lot - ran out of time to make the bot of my dreams though.  Thanks for putting this together.\n\nI ended up doing a basic minimax with alpha beta pruning and a simple eval function.  Due to my limited c# experience, I never found a great way to debug / test.  I wanted to make an eval function that created PST\u0027s as piece value propagations for each board, but couldn\u0027t get it to fit in the token limit and be performant in terms of time (and therefore depth).\n\nThanks again!"},{"BotID":"Bot_472","AuthorName":"Lethal Chicken","BotName":"En Croissant","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I just tried to make something that plays chess, but prioritizes en passant over all else. It vaguely works as black, though it is absolutely awful, but it just does not work as white. I would consider this a failure."},{"BotID":"Bot_473","AuthorName":"Feeding Plants","BotName":"Mulch Winnums","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Sweet Challenge!"},{"BotID":"Bot_474","AuthorName":"Legend","BotName":"Good Bot Bad Bot (But Really, Both Are Terrible Bots, Also This In The Parenthesis Is Part Of The Name)","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Other","Description":"This bot has a good cop/bad cop mentality. The good cop isn\u0027t very aggressive, EXCEPT when going for a check by capturing a piece. The bad cop is very aggressive, EXCEPT when going for a checkmate by capturing a piece. This bot is terrible at playing, except for those strokes of brilliancy when they involve capturing and checkmating. I\u0027d be very interested in seeing how this bot fares against other bots, and the interesting little quirks that are exposed. Also, 252 tokens, woohoo!"},{"BotID":"Bot_475","AuthorName":"Bryn and Josh","BotName":"whitecap \uD83C\uDF0A","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Thoroughly enjoyed the challenge but wish we had more time to work on it."},{"BotID":"Bot_476","AuthorName":"Tamplite Siphron Kents","BotName":"Minirose V2.23","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Basic negamax AB engine with compressed piece square table bonuses and basic king safety evaluation. Also has a simple time management to move faster in the opening."},{"BotID":"Bot_477","AuthorName":"EZDragon","BotName":"Thrower","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"The main idea was to create a bot that works using only a simple evaluation function such as how many pieces are still left for each side, how may squares does each side cover, and how many pieces are protected by each side. However, it turns out that the resulting bot chooses many throwing moves such as queen sacks. Maybe my search algorithm sucks or such a simple evaluation function just doesn\u0027t provide enough information to be a good heuristic."},{"BotID":"Bot_478","AuthorName":"Kristian Mischke","BotName":"KBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I started the competition late (with only a week before the end), even though it was on my radar since the video came out. I experimented with some neural network approaches, but they were slow to calculate and didn\u0027t surpass my handcrafted evals, so this is what I ended up with. It was a great learning experience, especially seeing how everyone else on the community discord was approaching the problem"},{"BotID":"Bot_479","AuthorName":"Artour","BotName":"Timepinch","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Alpha beta pruning as I understand it, sorting moves to help pruning. Incremental depth, search. 2 types of move sorting, a fast one for when moves are just fetched, in any part of search, and one based on eval which happens in the root level on every depth increment. In endgame, considers how close pawns are to promotion. Base eval considers material and possible captures by both sides. All captures and best capture are evaluated differently. Dynamic time management with some tricks to prevent timeout and wasting time. Does not have depth extensions."},{"BotID":"Bot_480","AuthorName":"DegaLaman","BotName":"Look Ma, No Piece Square Table","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I opted not to use a Piece Square Table. That may have cost me my sanity.\n\nI have learned several things over the course of this challenge:\n1. I should have set up a proper testing environment. Having to wait 4-5 hours to test a minor change really set me back.\n2. I do not understand Primary Variation Search. Every time I attempted to add it, I lost 10 to 20 ELO. Why? \u00AF\\_(\u30C4)_/\u00AF\n3. I learned fairly quickly how incredibly important move ordering was. But unfortunately, I was not able to accurately implement additional move ordering strategies to my bot in time.\n\nDespite the setbacks, I learned a lot, and will likely attempt another chess bot as a future project. It was fun."},{"BotID":"Bot_481","AuthorName":"Joshnaks","BotName":"Just Alright... Kinda... (JAK)","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"I really, desperately wanted to store the values of the Piece Square Tables as Polynomial functions in order to save space, but it unfortunately would have used way more space than just storing the raw values. I settled for using half the table, since the tables I found were symmetrical. "},{"BotID":"Bot_482","AuthorName":"JubilantJanitor","BotName":"Pacifist","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"Introducing \u0022Pacifist\u0022, the strategic marvel in the fascinating world of Chess bots. Pacifist embodies sophisticated artificial intelligence, coupled with a unique playing style that distinguishes it from your typical Chess bot.\n\nPacifist embraces an innovative non-combative strategy. Unlike conventional bots that perceive capturing the opponent\u0027s pieces as a dire necessity, Pacifist takes a contrasting path. Symbolizing a true game virtuoso, it prioritizes preserving its own warriors on the chessboard over aggressively capturing the opponent\u0027s pieces. \n\nEquipped with a well-defined value system for every piece, from the humble pawn to the mighty king, Pacifist masters the art of evaluation. It astutely assesses every potential move\u0027s impact discerning whether it leads to a victorious checkmate or successfully forces the opponent to surrender their high-value pieces.\n\nOne of Pacifist\u0027s key strengths lies in its decision-making process. It weighs and judges every possible move accurately, yet it elegantly maintains a backup plan, always ready to fall back on a randomly selected move to prevent stagnation.\n\nFar from being a passive player, Pacifist intelligently navigates the board with meticulous patience and solid defense. It seeks to outmaneuver the opponent, directing the flow of the game. Pacifist\u0027s subtlety is its power, making every game a nail-biting spectacle.\n\nPut simply, Pacifist isn\u0027t just any other Chess bot. It\u0027s a master tactician that embodies the essence of strategic, thoughtful, and evolutionary gameplay in Chess. Will you rise to the challenge of playing against the Pacifist? Prepare to be riveted by the Spartan serenity of its gameplay.\n\nDisclaimer: You may do whatever you want with this bot."},{"BotID":"Bot_483","AuthorName":"Tisajokt","BotName":"Velocity\u002B\u002B","SearchKind":"Some form of minimax search","EvalKind":"Other","Description":"Will edit this description later if I have time, it\u0027s 1 in the morning on Oct 1st and I want to make sure I get the submission in. Participated in the community-driven discord server, worked closely with creator of the Tyrant engine. Didn\u0027t do anything especially interesting, but I learned a whole lot! You could probably get a whole video series out of the topic of chess engines, you only scraped the surface of all there is to it, it\u0027s fascinating. Interested in the idea of making a chess engine which can handle arbitrary variant rules. Please try and cover the results of the community mini-tournaments - there was one with a 200 token limit, and the winning engine is insanely compact!"},{"BotID":"Bot_484","AuthorName":"Zui","BotName":"Zui Bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"It was really fun trying to do this challenge as I\u0027m taking a data structure and algorithms course in university. It also got me back into playing chess. It\u0027s my first time building a chess bot so I\u0027ve challenged myself to only use chess programming wiki as a reference. There are still problems with the way I\u0027ve implemented the logics but the bot should still be able to play decently.\n\nThis bot uses:\n\u002B Handcrafted evaluation function (material, legal moves, attacking squares, attacked/protected pieces)\n\u002B Piece square table\n\u002B Alpha-Beta\n\u002B Quiescence Search (check, promotion, capture)\n\u002B Move ordering (MVV-LVA captures \u003E promotions \u003E other)\n\u002B Transposition Table (stores evaluation, always overwrite, no clear)\n\u002B Iterative deepening search (with time limit and depth limit)\n\nSome problems I\u0027ve encountered during development:\n\n- Applying boolean algebra to combine if statements to save tokens\n\n- Combining Alpha-Beta and Quiescence Search into 1 function to save tokens: The idea is that the two functions are mostly the same, so I just added a boolean parameter to determine if the function was doing Quiescence Search or Alpha-Beta.\n\n- Figuring out how to implement transposition table into the Quiescence Search:\n\u002B Before implementing transposition table, the Alpha-Beta function would just extend the depth by 1 whenever the move was promotion, capture, check. However, this would mean that the depth recorded in the transposition table was not accurate.\n\u002B The solution was to combine Alpha-Beta and Quiescence Search into 1 function and allowed the depth to go negative. The boolean parameter \u0022quiescence\u0022 would be true whenever depth \u003C 1.\n\n- When using Alpha-Beta, I used Int32.MinValue for alpha. When trying to reverse the sign by subtracting, it would cause an overflow and resulted in  -2147483648 instead of 2147483648. This means any depth larger than 1 would result in alpha and beta being equal and the function would always return beta.\n\n- During endgame, the bot would always avoid checkmate until it tries to avoid a 50 moves draw. I couldn\u0027t figure out why so I\u0027ve implemented a very basic solution:\n\u002B Search extension if move is check\n\u002B For every checkmate found, reduce the evaluation by the depth it was found at, this encourages the bot to checkmate with fewer moves and also avoid being checkmated for as long as possible."},{"BotID":"Bot_485","AuthorName":"Rayansh","BotName":"Search 1.0","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_486","AuthorName":"CantWontDo","BotName":"QuaviverBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"it was my first time using c# in such a complicated project. the chess programming discord was really helpful!"},{"BotID":"Bot_487","AuthorName":"Chipperphilly","BotName":"Rodders","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Very fun to do!"},{"BotID":"Bot_488","AuthorName":"","BotName":"devi1.02","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_489","AuthorName":"F\u0026F","BotName":"NoTimeLeft","SearchKind":"Monte Carlo search (random playouts)","EvalKind":"Handcrafted evaluation function","Description":"Hey Seb, amazing challenge! Didn\u0027t have much time, but created a base MCTS \u002B basic eval func. Performs pitiful, so let\u0027s go \uD83D\uDCAA\uD83C\uDFFB"},{"BotID":"Bot_490","AuthorName":"Zaph","BotName":"Trogdor","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_491","AuthorName":"QuarksandAces (YT)","BotName":"SmallSearchAll","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Searches all moves till depth ~3 (halvemoves).\n\nLoved the challenge. I\u0027m a beginner in programming and always wanted to create a chess engine. But i didn\u0027t have the skills to create the board,rules etc. (i tried).\nI sadly only got to the fourth iteration of this engine, but I look forward on improving it.\nMany Thanks for this opportunity and all the work u have done. I love ur videos.\nGreetings from Germany"},{"BotID":"Bot_492","AuthorName":"pnathan","BotName":"pnathan","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Did it last minute... :) tried to follow your tips on minimax but struggled with constant repetition draws :("},{"BotID":"Bot_493","AuthorName":"Gurad","BotName":"BockFish","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"No fancy methods. A pretty avrage bot. I\u0027m sure there is gonna be many very simular bots"},{"BotID":"Bot_494","AuthorName":"NatheSpike","BotName":"Nathe-Bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"As someone who does a lot of C# coding and had no experience in chess dev, this was very fun, the API was usable and simple to use. "},{"BotID":"Bot_495","AuthorName":"Vadim and Yazeed","BotName":"Albertron","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_496","AuthorName":"Atad","BotName":"Ace V1.0.0","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"cheers to lynx for like 4 commits\ncheers to loads of people for helping me, all of them are already mentioned in tyrants engine except jeffrey\nthis engine is one of 2 engines i have worked on, the other made in conjunction with jefflegendpower"},{"BotID":"Bot_497","AuthorName":"Big Nerd","BotName":"Garbage Bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"The bot uses the value of a piece that is captured and the value of a piece that was promoted to determine the value of a move. If the move causes a draw, the value of the move will decrease. After this, the program will calculate the value of the opponent\u0027s best move (however, whether or not the move is a draw or check is not considered for this). The opponent\u0027s best move will be subtracted from the move that is currently being evaluated. After this, the bot repeat this for every legal move, and make a list of the moves with the highest value. There may only be one move in the list if no other moves have the same value. Finally, one of the moves will be chosen from the list at random (the randomness is probably unnecessary, but it helps prevent the bot from being to predictable). However, if the bot finds checkmate, it will skip all other evaluating, and simply play that move."},{"BotID":"Bot_498","AuthorName":"Skolin \u002B World \u002B Abyss","BotName":"Kinglet","SearchKind":"Some form of minimax search","EvalKind":"Machine learning evaluation function","Description":"We implemented Alpha-Beta search with a lot of common search enhancements. The ones that we are most proud of and hopefully stand out most are:\n- very very compact tuned piece square tables with tapered eval (unpacking the table from a decimal array with only 15 tokens by the use of a transpose)\n- history heuristic with negative plausibility\n\nThe challenge was really fun! In the end we still had some tokens to spare but ran out of time. Hopefully Kinglet will still be a strong force!\n\nLinks to more documented code:\nhttps://pastebin.com/0FyLtk07\nhttps://github.com/SebLague/Chess-Challenge"},{"BotID":"Bot_499","AuthorName":"ErwanF","BotName":"ErwanF","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"It is a relatively normal bot, with all of the usual features:\n- alpha-beta search / negamax\n- iterative deepening with time management\n- quiescence search\n- evaluation is material and Pesto piece-square tables\n- transposition table\n- principal variation search\n- reverse futility pruning\n- extended futility pruning\n- null move pruning\n- move ordering with MVV-LVA \u002B promotions \u002B killer moves \u002B history heuristics\n- move ordering using a selection sort which is much better\n- late move reduction\n\nAnd lots of tricks to fit this in 1024 tokens.\n\nThanks for the challenge, was really fun learning all this!"},{"BotID":"Bot_500","AuthorName":"Yannik Bleilinger","BotName":"WitwerMacher","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I used the alpha beta pruning algorithm that uses Move Ordering, Transposition Tables, Iterative Deepening and and handcrafted evaluation function that tries its best to consider the development of minor pieces and in the endgame pushed pawns and king distance. It sometimes throws away pieces for some reason but I could not figure out why this was happening. All 1024 tokens got to use in my bot :)"},{"BotID":"Bot_501","AuthorName":"bombard1004","BotName":"Cheriny","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Cheriny \uCCB4\uB9B0\uC774 = Chess \uCCB4\uC2A4 \u002B Child \uC5B4\uB9B0\uC774 / In Korea, child is friendly term for a newbie.\n\nMinimax with alpha-beta pruning, move ordering, piece-square tables, iterative deepening, quiescence search,\nand also optimization inspired by the fact that the state of the board changes few for each move (I don\u0027t know the term)\n\nPlanned but canceled (due to token limit): Transposition table, tapered eval (based on pesto)\n\nDefeated Noam bot (2200) from chess.com with a 1-minute time limit.\n\nThank you so much for organizing this coding challenge! It was a lot of fun! I\u0027ve always wanted to build an engine someday, and now I\u0027ve made it happen. It was also a great opportunity to familiarize myself with the C# language. It was informative and interesting in many ways. If you organize another coding challenge in the future, I would definitely like to participate."},{"BotID":"Bot_502","AuthorName":"Brent Mardell","BotName":"Stickleback2","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Stickleback2 uses a minimax search with alpha-beta pruning, move ordering, killer heuristic and a transposition table. The board evaluation is incrementally updated with each move. Piece-square tables decompressed with a simple decompression algorithm when the constructor is called."},{"BotID":"Bot_503","AuthorName":"Tejas","BotName":"Max-Max-Bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Dunno if it counts as a min-max bot, the bot just tries to maximize its own score?(Hence max-max). Basically every side evaluates for itself, with positive score if it is winning.\n\nTried adding alpha-beta pruning to it, I couldn\u0027t figure out how to do it, because both are trying to maximize their scores, and there is no distinct score for the opponent? Not sure what I am talking about anymore while writing this. \n\nThe bot does care about the time. If its low on time, it wont search deep. \n\nNot a very powerful bot, i think probably around the rating of 500 elo, though idk.\n\nI did add little strategies, like incentivizing early pawn push, giving checks, and promoting the pawns near the end."},{"BotID":"Bot_504","AuthorName":"Ccookie","BotName":"Ccookie","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"My bot is just a min-max search of depth 3, with a pretty simple evaluation function. \n\nIt was really fun to work on it because I had just learnt to play chess this year, and also thanks to your API which was really clean and made it super simple to start from scratch.\n\nJust two remarks :\n- I really love bots challenges like on Codingame, where you discover an unknown game, and spend a lot of time thinking about the best strategy. Here, Chess is so famous that I feel there wasn\u0027t much room for creativity. I never even got close to the token limit, so it didn\u0027t impact me very much. I\u0027m very curious to see your video about the best bots, but I feel like we won\u0027t be surprised by some crazy strategy no one had thought about (I might be wrong)\n- The duration of the challenge was a bit too long for me, and we don\u0027t really have anything to compare ourselves with (except against our improved code, which was still a pretty cool idea). Again, on Codingame, you can see your ranking all the time, and see yourself climbing it up, which really helps to stay motivated. I understand it\u0027s probably not easy to do on your side. Maybe it could have been nice to have different rounds of a few weeks, with a ranking after each round to better see where we were compared to others.\n\nIn any case, thanks for organizing this, and thanks for all your great videos!"},{"BotID":"Bot_505","AuthorName":"Slayer8274","BotName":"Terminus","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Wanted to make best bot I could, Using stuff like ChatGPT and CPS."},{"BotID":"Bot_506","AuthorName":"Filip","BotName":"maff-chess","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_507","AuthorName":"Lapdok","BotName":"Mini Lapdok","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"The bot performs two searchs; one small and one big. The small one sorts the best moves and the big one analizes these moves in more depth.\nIf a move was preceded by a long combo of checks, captures, promotions or threats the program will keep searching at least one more move (to avoid missing a fork, pin... after a long simplification). *A positition is considered a threat if in the small search some moves had a very different evaluation from other moves.\nThe evaluation part look at the difference in the piece value, the amount of doubled and isolated pawns, the position of the pieces in the board, the space behind the pawns and the rocks and queens in the open files."},{"BotID":"Bot_508","AuthorName":"Luca Voros","BotName":"Plumbo","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Erm, I just wanted to participate and spent a few hours on this submission cause I love your channel"},{"BotID":"Bot_509","AuthorName":"Map","BotName":"MapBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I\u0027ve mostly looked at other bots and on the chess programming wiki for algorithms, also tried implementing a Neural Network 5 days prior, but didn\u0027t manage to get it playing good.\nCredits to toanth for helping me and other participants with many things and also credits to tyrant7 whose evaluation function i stole. Also credits to JW for helping me and explaining stuff about his Neural Network Bot!"},{"BotID":"Bot_510","AuthorName":"Avila","BotName":"Love","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Evaluation:\n - inspired by PeSTO\u0027s Evaluation Function (square values \u002B piece values)\n - mobility score based on the number of legal moves of the side to move\n\nSearch:\n - Aspiration window\n - Alpha-Beta pruning \u002B transposition table\n - Razoring\n - Quiescence search\n\nOpening Book\n - hand-crafted switch-statement for specific positions\n\nI also experimented a bit with killer moves and futility pruning.\nHowever, I didn\u0027t find enough of an improvement to justify the many tokens these methods required. I am sure I just didn\u0027t implement them properly."},{"BotID":"Bot_511","AuthorName":"CLEC","BotName":"roboleon v4.1 bugfixed","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Dear Sebastian Lague,\nLeon and I teamed up together in this competition.We haven\u0027t learnt C# language before this challenge.Because of this challenge, we both learnt a lot of things, like ,minimax algorithm and alpha beta pruning. I hope there is another challenge like this in the future. We will definitely take part in.And thanks for a great opportunity for us to take part in this challenge.\n\n\u0022ROBO-LEOOOOON\u0022~roboleon\n(lol)"},{"BotID":"Bot_512","AuthorName":"Scoutamass","BotName":"LiL Scoot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"In order to check what pieces get taken after it makes a move, it makes the move in the board and then checks what pieces are protected."},{"BotID":"Bot_513","AuthorName":"Minionana","BotName":"Error 404","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"I started the challenge on the first day of the announcement, and then just stopped working on it, till October 1, and I just hurried some improvements."},{"BotID":"Bot_514","AuthorName":"Gediminas Masaitis, Goh CJ","BotName":"smol.cs","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Source code will be available at https://github.com/GediminasMasaitis/Chess-Challenge-Submission/tree/dev . Evaluation is tuned using my project at https://github.com/GediminasMasaitis/texel-tuner . Each change from the start, along with the corresponding ELO tests will be published in a file called SUBMISSION-CHANGELOG.md\n\nELO testing and most of the ELO gaining patches have been added by Gediminas Masaitis\nMost of the token reductions have been added by Coh CJ.\n\nHoping for a win, but if not, coding this was a fun experience for both of us and we\u0027re glad to have participated!"},{"BotID":"Bot_515","AuthorName":"Piotr Bo\u017Cek","BotName":"RedVallium","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"The bot hopes for fast mate, if it doesn\u0027t work just go ahead and change all pawns to queens"},{"BotID":"Bot_516","AuthorName":"Mitch","BotName":"TacTxs","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This was a really fun idea. I did find optimising the 1024 tokens a bit hard - as making the code more concise makes it less readable in places. I think it\u0027s a great solution to how to fairly \u0022cap\u0022 the bot complexity, but it does mean the version of the code I will keep is not the one I\u0027m submitting.\n\nAlso, as this is my first time using C sharp (and I\u0027ve never done any low-level programming before), I had no idea how to ensure the bot\u0027s transposition table didn\u0027t use more than 256mb as stated in the rules. My hope is to ignore that rule and just hope it won\u0027t use that much since it is a pretty simple bot - but I have no knowledge of how to check the sanity of that hopefulness (other than looking at task manager while it plays)."},{"BotID":"Bot_517","AuthorName":"nathan09","BotName":"fun ","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"fun"},{"BotID":"Bot_518","AuthorName":"FancyDefenceFenceFan","BotName":"FancyDefenceFence","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Originally wanted to make the bot live up to its name but in the end I let him focus on evaluating the board and make a minimax search."},{"BotID":"Bot_519","AuthorName":"ThonyDragon","BotName":"BasicAlphaBeta","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"A quick approach to Alpha Betta prunning with some hand crafted static evaluation"},{"BotID":"Bot_520","AuthorName":"SFN","BotName":"SFN v 2.0","SearchKind":"Monte Carlo search (random playouts)","EvalKind":"Other","Description":"Simple MCTS bot that uses path evaluation instead of end game result. Doesn\u0027t work very well."},{"BotID":"Bot_521","AuthorName":"Patrick und Jannik","BotName":"LIA Chess","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_522","AuthorName":"Pydjama","BotName":"Pharouk","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Hi, I\u0027m a young developer, currently in 12th grade. I\u0027ve been following many of your coding adventures which have inspired me in my passion for computer science and algorithms. By the way, thanks for everything !\n\nTo start off, I\u0027m not good at chess. That\u0027s why I initially asked a friend to work with me on the project (he loves chess). This contest was an opportunity for me to reinvest what I know: coding more than chess playing.\n\nI started simply, following the many online tutorials. That\u0027s how I coded my first algorithm: the MiniMax recursive function. It turned out to be quite slow and not very powerfull. Then, I implemented the AlphaBeta algorithm which was much faster and helped me search farther in the tree. After that, I started improving my evaluation function. Since I couldn\u0027t go further in the tree because of the time constraints, I added to my evaluation function the next possible captures to gain a move in the possibilities. The problem I encountered at that time was that my bot ended up winning less than the simple version because it was too slow and timed out. I noticed that I had problems in memory allocation and decided to change some of my \u0022board.GetLegalMoves()\u0022 to \u0022board.GetLegalMovesNonAlloc()\u0022 with a span. With that done, I had the idea of putting my moves in order of how efficient they had been in the past. I would have preferred to implement a reinforce ML algorithm for that, but I hadn\u0027t the time: the contest started during the holidays, but school started (sadly) after. \n\nIn the end, my bot uses the AlphaBeta algorithm, a complex evaluation function, orders moves to gain time in the pruning, and allocates dynamically certain datas. The current bugs/problems are that the bot is too slow and sometimes timeouts, the bot has no real understanding of basic chess strategies since I haven\u0027t added any external data to the bot (no opening or end game moves library, just algorithms). I would have wanted to implement the following features: testing monte carlo search, ML algorithms, better time management (dynamic management of complexity depending on time left), an end game algorithm to avoid iterativeness over check and have more checkmates and the quiescence algorithm. Still I am quite satisfied with the work I hand in seeing the time I have spent on it, it has beaten many of my friend (except the one to whom I suggested the project), and I will continue to work on it. \n\nThank you for everything, I hope you\u0027ll organize a similar event again later. I don\u0027t have high hopes on the results of my bot but I\u0027m still proud of my Pharouk ^_^ (Good luck !)."},{"BotID":"Bot_523","AuthorName":"KszyKszy","BotName":"K53YK53Y","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I tried many different approaches. I tried using some small NN but it wasnt any good so i made HCE that uses activity of pieces - attacks of enemy pawns."},{"BotID":"Bot_524","AuthorName":"danegraphics","BotName":"Myopia","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"A bot that doesn\u0027t directly value having pieces, but instead values mobility, protection, and some positional benefits. It has no search (I couldn\u0027t get around to it), so it REALLY sucks at endgames, even though it can gain a completely winning position."},{"BotID":"Bot_525","AuthorName":"Visiorex","BotName":"Average Joe","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"It was all learning for me. I had never done a chess bot before, so was stoked I got one that performed better than the random bot provided with the example. Super happy with the experience. Thanks for holding the event!"},{"BotID":"Bot_526","AuthorName":"Only_Mayonnaise","BotName":"evilRatBot","SearchKind":"Other / Idk","EvalKind":"Other","Description":""},{"BotID":"Bot_527","AuthorName":"Brent Mardell","BotName":"Stickleback","SearchKind":"Other / Idk","EvalKind":"Machine learning evaluation function","Description":"Stickleback uses a convolutional neural network to evaluate and select the next move. No search is used beyond the next move other than to check for checkmate by the opponent. The network was trained by supervised learning using moves made by Stockfish. To make the most of the limited space the network is compressed and filters are rotated and reflected to reuse parameters. Results are better than expected, but still easily beaten by a simple program that uses a deep enough search. I\u0027m interested to see the competition results."},{"BotID":"Bot_528","AuthorName":"Dirk Farin","BotName":"farindk","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Classic implementation. Alpha/Beta search with transposition table, move ordering and simple evaluation function using material and piece positions."},{"BotID":"Bot_529","AuthorName":"Jamie Whiting","BotName":"NNBot","SearchKind":"Some form of minimax search","EvalKind":"Machine learning evaluation function","Description":"Network architecture is 192 -\u003E 8x2 -\u003E 1, where inputs are ranks/files of the pieces. "},{"BotID":"Bot_530","AuthorName":"White Mouse","BotName":"Algernon","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_531","AuthorName":"Flynow10","BotName":"Comet","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Thank you very much for this challenge! I ended up building a Chess Program for my AP CS project because of your first chess video, so getting to participate in this challenge has been very fun! I know my bot is not nearly the best, nor unique as it uses many of the same techniques that I\u0027ve seen in other bots, but I had a lot of fun building and learning throughout this project."},{"BotID":"Bot_532","AuthorName":"liamkc","BotName":"PracticeBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I just started learning C# and learned a great deal by working on this bot. Thank you for the fun challenge!"},{"BotID":"Bot_533","AuthorName":"Riccardo D\u0027Incau","BotName":"Stoccafisso","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This challenge helped me learn many new things and i enjoied it very much even tho after many hours of work my bot still think he has to give up the king to win."},{"BotID":"Bot_534","AuthorName":"Alfie Elliott ","BotName":"DARKCIDER-9000","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"It sort of just took shape itself, a lot of times I would make a change that I thought would benefit it and it would make it worse, other times I\u0027d make a slight change and it would improve the bot greatly, overall this was a pretty intriguing challenge. The bot uses recursive move checking with some random variance in depth on the moves, evaluating the value of plays until it gets the best move which it executes."},{"BotID":"Bot_535","AuthorName":"Jess Baut \u0026 Hans","BotName":"Fishstock","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"We loved the challenge, though we didn\u0027t get to spend as much time on it as we\u0027d have liked. Our bot is based on \u0022EvilBot\u0022, with a few tweaks to evaluate the overall structure of the board after each potential move."},{"BotID":"Bot_536","AuthorName":"ShadowStar019","BotName":"SSComp1","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I tried to keep my bot under 300 tokens as an added challenge for myself."},{"BotID":"Bot_537","AuthorName":"Daniel Infuehr","BotName":"InfuehrDaniel MCTS","SearchKind":"Monte Carlo search (random playouts)","EvalKind":"Other","Description":"MCTS is infinitely parallelizable while AB achieves parallelism by prefilling the TT through other threads. I predict there will be a switch from AB to MCTS this decade. Hopefully on massive parallelism of GPUs.\nFor example a sneak preview onto my true MCTS engine running in CUDA:\nPERFT 6: 119060324  - 1.852ms. 73781MMoves\n\nThe evaluationfunction (random playout) here is another chess engine playing against itself. We have color agnositcity meaning all sign switches can go away and it is always US vs THEM. (Always our turn). Mybot.cs is really bad unfortunately and single threads can only playout each node once unfortunately. I still hope it shows some interesting things. This approach would start to work once we can have millions of PLAYOUTS per seconds which means somewhere above 1 Billion nps. "},{"BotID":"Bot_538","AuthorName":"Name: Francisco Gaspar      Nickname: James Bond 73","BotName":"Mr. JB73","SearchKind":"Some form of minimax search","EvalKind":"Other","Description":"My bot uses Negamax with AB pruning, Qsearch, Iterative Deepening, Null Move Pruning, Reverse Futility Pruning, Check Extension. \nFor Move Sorting it uses Transposition Tables, MVVLVA, Killer Moves, History Heuristics \nFor Evaluation it uses Pesto Tables with double Pawn detection.\n\nUnfortunately I didn\u0027t have enough time to finish the bot, but I\u0027m still very proud of it!"},{"BotID":"Bot_539","AuthorName":"Sherlock","BotName":"Nautilus","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I loved this challenge! It was my first experience with AI and C# and I am happy about how this bot turned out. I\u0027m pretty sure he\u0027s not the best chess bot in the world, but I really enjoyed the experience of learning and making something new!"},{"BotID":"Bot_540","AuthorName":"Grande Dorgas","BotName":"\u30B7\u30B3\u30DC\u30C3\u30C814\uD83D\uDC80\uD83D\uDE81\uD83D\uDE14\u270A","SearchKind":"Some form of minimax search","EvalKind":"Other","Description":"My approach is a mixed approach between the handcrafted and machine learning evaluation function. It is like a neural network with direct connection from the input neurons to the output neuron. I have 64 input neurons, so I also have 64 weights(actually there are 128 but that is because I separated middle game and endgame weights) and there is no need for biases. I described the input for the neural net in this post:\nhttps://chess.stackexchange.com/questions/42998/a-different-hashing-algorithm-for-chess-positions.\nWhile the discord community told me to use PESTO tables, I tried to come up with this eval myself, but the search was a regular Negamax as most of the other people did, with qsearch, alpha-beta pruning, transposition tables, iterative deepening and move ordering.\nThe weights could be further tuned if I had more time."},{"BotID":"Bot_541","AuthorName":"krox","BotName":"Metis","SearchKind":"Some form of minimax search","EvalKind":"Other","Description":"The terms of the eval function are chosen by hand (very simple ones only), but the coefficients are \u0022machine learned\u0022. (purely linear coefficients, so a couple lines of numpy \u002B python-chess are enough. No fancy AI stuff)."},{"BotID":"Bot_542","AuthorName":"Badoobicus","BotName":"Chessetor, Destroyer of Boards","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"Each turn, the bot evaluates each potential move based on a hand-crafted evaluation function, assigning a score to each move, then plays the best-scored move for that turn. A higher score relates to a better move.\n\nPriority 1: Checkmate the opponent, if possible. Also avoid stalemates.\nPriority 2: Move pieces that are currently under attack. Prioritize saving higher-valued pieces, capturing enemy pieces, and moving towards the center of the board when possible.\nPriority 3: Capture undefended pieces. Prioritize attacking highest-valued pieces first.\nPriority 4: Capture defended pieces where the value of the captured piece is worth less than the attacking piece. Prioritize attacks where the difference in values is greatest.\nPriority 5: Put the opposing king in check, if possible to do so without losing material. Add some randomness to move score to hopefully avoid repetition.\nPriority 6: Advance pawns and move all other pieces (except for the king) towards safe squares at the center of the board, with a small amount of randomness added just for fun."},{"BotID":"Bot_543","AuthorName":"Michael","BotName":"MobiBot 4.2","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Everything is under MobiBot 5.0 submission page. (pleas add both bots to tournament)\nMy main mail: gaster.vb@gmail.com"},{"BotID":"Bot_544","AuthorName":"DATA USP","BotName":"Saint Charles Bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"We tried to use ML techniques on the eval function. Altough, it became very difficult to fit the code in 1024 tokens. Besides it, we had difficult times training the model on C#, and our model was a bit randomic.\nIn the end we are using simple AlphaBeta Pruning and Simple Eval Functions"},{"BotID":"Bot_545","AuthorName":"Theodor","BotName":"Sven","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Been a very enjoyable project with only having to work on the fun part of making an chess bot, the bot it self. The code have been squished with for example the QuiescenceSearch and normal search in the same function. Fun though to get the best performance with little code. I saved my piece tables in only 4 uls per piece type in order to save tokens. Testing different techniques and using the most token efficient ways to improve the bot. Fun to do a heuristic code golfing project! Here is code with comments of id\u00E9as and other stuff: https://pastebin.com/pu1SFCLh "},{"BotID":"Bot_546","AuthorName":"daw._.dev","BotName":"dumber","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"Wanted to finish it but couldn\u0027t :(\nBut the challenge was really fuuuun :D"},{"BotID":"Bot_547","AuthorName":"Taco Olmer","BotName":"NotQuiteRandomGamblerAndPruner","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I started this challenge without searching (choosing what move to play based only on the current position), but since it was difficult to find mate, even when it was mate in 2 or 3, I decided to implement a search algorithm, while working on that I thought \u0022why not just implement alpha beta pruning?\u0022, which led to the new approach. My first approach then helped in the ordering algorithm. Afterwards I thought of an extra (cheap) addition that at the end of searching would make a random move extra, and evaluate that. Then I realised that I had already ordered my array so I can just take a look at the first few moves (as opposed to choosing one at random), which would cost less computing power than looking at the whole moves array. That lead to the final implementation. \nHopefully I submitted in time."},{"BotID":"Bot_548","AuthorName":"Willem Paternotte","BotName":"PAtATtO","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"i started with your example code and tried to add thing onto that untill it got better, in the end its still shit cus its awful code and i dont really understand what i made anymore"},{"BotID":"Bot_549","AuthorName":"ConBomb","BotName":"ConBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"The bot isn\u0027t Great. I just wanted to make a bot that plays like me. So in theory it should be rated about 1600."},{"BotID":"Bot_550","AuthorName":"Andrea Colognese","BotName":"Octobot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"HI SEBASTIAN!!!\n        \n        HERE I GIVE YOU A BRIEF HISTORY OF ME DEVELOPING THE BOT AND ITS MOST INTERESTING TECHNICAL FEATURES.\nWHY OCTOBOT? LIKE AN OCTOPUS, IT SEARCHES DYNAMICALLY THE TREESEARCH WITH ITS TENCTACLES, OF COURSE...\nTHE ONLY REFERENCE I USED ARE YOUR CHESS VIDEOS, BUT FOR THE MOST PART I CAME UP TO IT BY MYSELF WITH A LOT OF HEADACHES.\n        I PUT A FEW COMMENTS TO HELP YOU KNOW WHAT IS GOING ON, BECAUSE I HAD TO COMPACT THE CODE SO MUCH I ENDED UP USING MANY CODING TRICKS, MATH TRICKS AND OPTIMIZATIONS, SO THE READABILITY DROPPED DRAMMATICALLY IN SOME PLACES...\n        IF NEEDED, THE COMMENTS WITH THE TRIPLE \u0022/\u0022 CAN BE UNCOMMENTED TO GET A SMALL BUT MAYBE USEFUL OUTPUT ON THE CONSOLE (TELLS YOU HOW MANY EVALUATIONS HAS DONE, THE DEEPEST TREEBRANCH IT EXPLORED AND THE TOTAL TIME ELAPSED) \n        HAVE A NICE DAY AND GREETINGS FROM ITALY!!! SHISH!!!\n        \n        \n        Andrea Colognese\n        \n        P.S. For any doubt, you may write to colognese.andrea@outlook.it \n        \n        \n        HISTORY:\n         - IN AUGUST, I DOWNLOAED ECLIPSE ON MY LAPTOP;\n         - THEN I BECAME MAD FOR INSTALLING THE TOOLS NEEDED TO CODE IN C#;\n         - OH BOY, WHAT A MESS (THE INFORMATION TO MAKE A GOOD C# SETUP IN ECLIPSE IS NOT EASY TO FIND!!!)\n         - IS IT NORMAL THAT THE IDE DOESN\u0027T HIGHLIGHT SYNTAX ERRORS?!?\n         - WHY DO I HAVE TO LAUNCH THE PROJECT FROM THE COMMAND PROMPT? ARE WE STILL IN THE 80\u0027s?\n         - I NEED SOME TIME TO RECOVER...\n         - OK, IT\u0027S SEPTEMBER: LET\u0027S START THE DEVELOPMENT!!!\n         - *tip tip tip tip tap tap tap....*\n         - YOU LITTLE SILLY EVIL BOT OF MY BOOTS... \n         - OK, FINALLY SOMETHING THAT WORKS!!! LET\u0027S IMPROVE IT...\n         - OH, NOW IT TAKES A LONG TIME TO SEE IF THE TWEAKS ARE ACTUALLY GOOD. THANKFULLY I HAVE A LOOOOT OF FREETIM-[UNIVERSITY STARTS]\n         - OK, STILL IMPROVING...\n         - STILL IMPROVING BUT SLOWLY...\n         - OK NOW ITS OCTOBER 1st AND ITS 8 pm: LETS TIDE UP THE CODE AND... HERE WE GO, I SENT IT!!!\n         - THAT WAS AN EAAAASY RIDE... \n         \n         \n         \n        MAIN FEATURES:\n            \n            * ALPHA-BETA PRUNING \n            * DYNAMIC MINIMAX TREESEARCH\n            * CACHE (TRANSPOSITION TABLES)\n            * RAW STRATEGY TO MAKE/AVOID DRAWS"},{"BotID":"Bot_551","AuthorName":"Achilles","BotName":"AchillesAlpha","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_552","AuthorName":"Atad","BotName":"Ace V1.0.0","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"cheers to all people mentioned in tyrants bot, plus jefflegendpower and others "},{"BotID":"Bot_553","AuthorName":"Antonio P","BotName":"Jack","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"It is a miracle this works at all! spent two afternoons on it, truthfully just by copying your chess bot. Also no comments in the code because im lazy. It was really fun, although frustrating at times "},{"BotID":"Bot_554","AuthorName":"Unodus","BotName":"The Fisher","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Not a great solution on my part, but want to submit what I have!\n\nI liked the idea of a chess AI that \u0022fished\u0022 for good moves, and this was my implementation. The AI starts out with a move budget, which it divides between each possible move based on how interesting they are (can they take pieces, etc). The amount of moves search is divided between the moves, prioritising the moves that are more interesting."},{"BotID":"Bot_555","AuthorName":"Rowburt","BotName":"Guppy","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"A simple negamax bot with alpha beta pruning, some simple extensions and move ordering fitting in 666 tokens. Evaluation is done only with material count and piece mobility. Time management was surprisingly hard to implement well, so instead it uses very little time every move.\n\nOverall theres lots of room for improvement, both in terms of performance and token usage.\nI don\u0027t expect it to get close to winning the tournament, but just want to see how well a simple material evaluation bot does.\nThank you for this fun excuse to mess around with chess engines and C# without having to worry too much about move generation and visuals."},{"BotID":"Bot_556","AuthorName":"Default/IHasBone","BotName":"Knightmare v2","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This is a simple bot that I made, it\u0027s not very good. The reason that I only have around 940 tokens is because I optimized the minimax right before the deadline but didn\u0027t have time to upgrade the bot. Feel free to change the moveTimeModifier variable and the code that is related to it depending on how fast you want it to play. This was honestly really fun and I would love to do it again :) One interesting thing that I\u0027m sort of proud of is that I added a part in the evaluation function to calculate king space for the opposite king in king vs king \u002B rook/queen endgames, which made it really good at mating with just rook or queen."},{"BotID":"Bot_557","AuthorName":"Achilles","BotName":"Achilles Random","SearchKind":"Monte Carlo search (random playouts)","EvalKind":"Handcrafted evaluation function","Description":"Check 15 random moves at each ply and pick the best out of them. Evaluation takes into account center control, piece development, each side\u0027s number of moves, if pawns are pushed and castling"},{"BotID":"Bot_558","AuthorName":"StefanDeSterke","BotName":"ImpossiBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I took a lot of inspiration from your videos while creating this bot, although I still wanted to implement the algorithm myself. Thus the end result is still a bit different from your algorithm. As for my expectation for this bot, I don\u0027t think it will perform incredibly well, although I had a lot of fun programming the chess bot, since I haven\u0027t had much experience doing this kind of thing. I would also love to partake in more coding challenges like these, since I enjoyed it a lot! Lastly, thanks for all the amazing videos you make and for the massive inspiration your videos give me, you are part of the reason why I love computer science!"},{"BotID":"Bot_559","AuthorName":"Team Chark","BotName":"Chark Bot V2","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Love the challenge!  Fixed an illegal move generation issue."},{"BotID":"Bot_560","AuthorName":"Mia Kellett","BotName":"MiaKBotv4.4","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"It was really fun working on this when I had time over my summer break. Haven\u0027t had as much time recently with my computer games programming university course (which we coincidently have been given your chess challenge to complete in our first week back for an task on our ai module which has given me a nice head start XD).\n\nStarting back up but have tried my best to tweak it\u0027s constants as much as possible so it\u0027s as good as it can. It was great to work on this, keeping my mind well practiced on my summer break.\n\nMy evaluation function doesn\u0027t do anything too fancy or some big well known algorithm. I mainly just thought of how when I play chess what would I do in as many different situations as I could think of and check via code using the API you developed. Then when I encountered situations where my bot was doing something weird (like putting the queen next to an enemy piece XD) I would go through my code, figure out why it was doing that and then tweak it until it stopped.\n\nI then recursively went through the evaluation function to do a minimax search to find the best possible move for the bot to make. When my bot is thinking about the enemies I invert the return value so that when a move is good for the enemy, my bot is discouraged from making the enemy able to make that move.\n\nI only ended up allowing a recursive depth of 3 as any more seemingly made the bot time out almost every time. However to allow my bot to check deeper sometimes, whenever a move captures a piece or has a potential checkmate inbound, I essentially do a dice roll to see if it will increase the recursion depth by 1 for that move. This works well so it doesn\u0027t balloon out of scope and timeout but still allows my bot to check many more branches than it would otherwise for potential good moves.\n\nHowever I did not do much to prune many branches. I did try with this but I could not figure out many ways of doing it right. The most I did was exit early on a confirmed checkmate as there\u0027s no point checking any deeper after that. But other than that I did nothing to prune branches. Would have loved to figure that out.\n\nI could probably go into more detail but that\u0027s the main jist of it all. I can\u0027t wait to see what everyone else did with your chess challenge :)"},{"BotID":"Bot_561","AuthorName":"b4ux1t3","BotName":"ONE MOVE TO RULE THEM ALL","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"It plays, more or less, like I do. :) "},{"BotID":"Bot_562","AuthorName":"Tutz","BotName":"Marreco","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"It was fun to learn C# and code a chess engine. I hope you publish some form of ranking or estimated bot Elo to see how we did.\nNothing to crazy about my bot. I did incorporate the idea of square control and center control in my evaluation function and was very surprised to see the bot often played book openings even with no search.\nWhen I implemented depth search I relied heavily on the eval function to narrow candidate moves. at deeper levels I would consider a lot less moves than at shallow levels. Currently I only consider the top ((maxDepth - currentDepth) * 3 \u002B1) moves at each depth"},{"BotID":"Bot_563","AuthorName":"Malcolm","BotName":"Anarchy Bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Board evaluation judges mobility of position for deciding non-material advantage, also my bot loves all stylish moves (en passant, castle with check, under promotion with check) so it plays those when available.\n\nOtherwise fairly standard ab pruned, move ranked, minimax."},{"BotID":"Bot_564","AuthorName":"Elliot Throop","BotName":"Elf-1200","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I really had a lot of fun doing this challenge, and there were definitely quite a few challenges I had while making it. I don\u0027t see this bot as special considering it\u0027s pretty standard, but I do feel like the process of making it was more weird and special than the actual bot itself. For one thing, I spent around 3-4 days trying to figure out how to encode piece square tables in a way that minimized the amount of tokens, but to no avail (There\u0027s probably someone in this challenge that figured it out, and I envy them). I also stopped working on it about one-two weeks after the challenge started, and then stopped until half a week before today when I picked it up again. I assume quite a few other people did this, and I probably could\u0027ve improved the bot by ~300 ELO by not taking this pause. "},{"BotID":"Bot_565","AuthorName":"Magn\u00FAs  \u00C1. Magn\u00FAsson","BotName":"Reckless Ragnar","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"TLDR: I tried cramming a PST into the bot by encoding the information as a series of 64 bit integers, along with alpha-beta negamax with transposition, move ordering, and passed pawn detection. The result is an extremely aggressive bot who will happily exchange any and all pieces of equal value, try to waste time to win on time and technicality, and will leave their queen to die for marginal gains. The true marks of a player too reckless and aggressive for their own good. \n\n===========\n\nI wrote a longer write-up of my strategy, but google forms complained it was too long. I placed it in a google docs document below if you\u0027re interested. \n\nRegardless, I had a lot of fun with the challenge even if I couldn\u0027t dedicate quite as much time to it as I would have liked. Your videos are an inspiration and I\u0027m always glad to see on pop up. Thank you for organising this challenge, and take care!\n\nhttps://docs.google.com/document/d/1nTUmO3L-H4VbrbfNTqAfG77HIyDuMonZcQRidHwif2I/edit?usp=sharing"},{"BotID":"Bot_566","AuthorName":"Tim de Jong","BotName":"LazyBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I got stuck trying to gain performance from iterative deepening search, and transposition table and general debugging is tricky. Sorry, it\u0027s too close to the deadline to clean up the code more."},{"BotID":"Bot_567","AuthorName":"BenLS","BotName":"Traderino","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"My bot tries to play the move that has the best trade value. (the trade search is very limited ^^)"},{"BotID":"Bot_568","AuthorName":"Andrei Taropa","BotName":"R2D2","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"The bot is a negamax algorithm that uses iterative deepening to reach the final depth in the shortest time. At final depth it does a pseudo quiescence search (only looks for captures) 8 moves deep. As for the time management, it \u0022predicts\u0022 how long it will take to compute the next depth based on the previous one and decides if it has time to do it. \nThe challenge was very interesting because one has to optimise the code for speed, but also bot brain capacity. This resulted in the code not being too readable :)"},{"BotID":"Bot_569","AuthorName":"Sliderlo","BotName":"One Line and a Dream","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_570","AuthorName":"shadowcage72","BotName":"Shadow\u0027s Unfinished Bot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"I wanted to spend so much more time on this but it\u0027s been a busy few months. It is blind to forks and discoveries. It does not understand pawn promotions. I regret not having dedicated more time to it."},{"BotID":"Bot_571","AuthorName":"TheChroniclerDelta","BotName":"GoblinArmy","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"\u0022A goblin army marches. Do not underestimate their chaotic nature, they will not fight as we do...\u0022\n\nWhen I first saw the challenge posted, I had watched your videos for quite a while, and was interested, I had a bit of coding experience, let\u0027s see what I could do. When I properly downloaded everything, I had a thought, \u0022What if I just make the most chaotic bot that I can?\u0022\n\nAnd so, here we are.\n\nOverall, GoblinArmy only evaluates the position based on how it currently is, and even then, really only the number of pieces on the board (Except for a checkmate move but yeah). It then (mostly) generates a random move based on these filters (in order how their checked in the code), a non-king move when in check, any move that will check the opponent, a pawn move, and lastly, any move that will capture a piece. Failing those checks, just generating a random move.\n\nAdmittedly, it has been quite fun making the bot, my favorite moment was when I added the function impulsivity() to the bot, basically making even the checks it uses for move filters based on chance. I got quite a scare when it took one of my pieces very quickly, far before it really should have.\n\nAnd ultimately, that\u0027s sort of my goal with this bot, it is rather easy once you understand what it\u0027s doing (Only having a 4% win rate and 20% loss rate against EvilBot), but if you don\u0027t, it can give quite the scare, which I hope you will enjoy, as well as the little Console.WriteLines to keep a little bit of immersion."},{"BotID":"Bot_572","AuthorName":"Joseph Pasfield","BotName":"Vast V2","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This challenge began as the first thing with chess engine development I had done, after trying to make a chess program with Unity. I then got distracted, made my own engine known as Clarity, and then learned c\u002B\u002B and rewrote it in c\u002B\u002B. I then remembered that my challenge engine existed, came back, and made it better than Clarity, and now I\u0027m submitting it and typing a description."},{"BotID":"Bot_573","AuthorName":"N8","BotName":"Poisoned_Offerings","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"The reason this bot is called \u0022Poisoned Offerings\u0022 is because when I started creating it, it would often makes weird plays that almost looked like free pieces. Half of the time they are, but when it plays a cool one its pretty fun to watch. It doesn\u0027t make as many bad ones now, but it does make some interesting moves that I often don\u0027t know why it makes. It also used a rather strange positioning strategy in which the positioning is based solely on the positions of the two kings. The only other unique thing about this bot is that the material value of a pawn is determined by how far it is away from its starting point. Besides that, it is a pretty standard bot."},{"BotID":"Bot_574","AuthorName":"Tyler Branscombe \u0026 Austin Daniel","BotName":"Holy hell","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"We made a bot who\u0027s main objective is to maximize the number of en passants in a game by both players.\n\nWe also implemented an animation which plays in the console when an en passant happens using nameof() before we saw it was against the rules but if you would like to see it here is a pastebin to the code: https://pastebin.com/Rk4qQxQB"},{"BotID":"Bot_575","AuthorName":"MichaelW","BotName":"Michael\u0027s Bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_576","AuthorName":"Noah","BotName":"EvilerBot","SearchKind":"Monte Carlo search (random playouts)","EvalKind":"Handcrafted evaluation function","Description":"I was pretty limited on time, so the AI is just a really basic implementation of Monte Carlo Tree Search, with a handcrafted evaluation function that compares the value of its pieces to the value of its opponent\u0027s pieces. Although I wish I could have done a lot more, I had a great time working on this challenge! I especially like how nice the environment you created for it is, I tried to make a chess bot from scratch a few years ago but my chess implementation was super optimized and buggy which really held the AI back. Overall this was an awesome experience, and I hope you consider doing more challenges like this in the future!"},{"BotID":"Bot_577","AuthorName":"DODIK","BotName":"Butter robot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Started this challenge 15 days ago, and saw this contest as an opportunity to learn ML from scratch, which I spent most of these days implementing. Learned so much about the topic, read dozen of articles, even a book! But couldn\u0027t finish it in time, unfortunately. I have some kind of evaluation function, which would probably learn, if I knew how to structure and feed in the input data to it. I even found database for it. Wanted to participate badly, so I made this handcrafted bot in the last 2 days. Its kinda bad, but gets the job done I guess :D\nYour content\u0027s great. Thanks for everything you do man! Cheers"},{"BotID":"Bot_578","AuthorName":"Evan Rogerson","BotName":"Exceptionally mid","SearchKind":"Some form of minimax search","EvalKind":"Other","Description":"This is my first coding challenge. Its not at all efficient but I\u0027m happy with how it plays. It beats more often than not and I\u0027m happy with that."},{"BotID":"Bot_579","AuthorName":"Simply In Dev","BotName":"Guppy","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This bot uses the negamax algorithm with alpha beta pruning, presorting, quiescence search, and board evaluation based on piece eval tables (including a king endgame table) that are instantiated out of ulongs on initialization. It will search to a depth of 5 but will increase up to 7 as the game gets towards the endgame."},{"BotID":"Bot_580","AuthorName":"Tyrant","BotName":"Tyrant\u0027s V9","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"My bot relies on being the only instance and will generate an error if there are multiple instances of it running in the same instance of the program. Please keep this in mind when running the tournament.\nGedas also warned of potential clones that will be made from my bot. They will likely be based on the V8.6 version, which was the latest version on GitHub up until my submission.\nOverall, thank you for hosting this competition. I had a lot of fun and look forward to your video on it."},{"BotID":"Bot_581","AuthorName":"Dave","BotName":"NotSure","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"It is a fun challenge, my goal is not to come in last, wish I would have been able to spend more time on it."},{"BotID":"Bot_582","AuthorName":"Evan","BotName":"Clyde","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_583","AuthorName":"rocketduck_m07","BotName":"Tiny Chess Duck","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"My overall experience was good. I really liked the token limit; it encouraged me to search for creative ways to implement the techniques I wanted in lesser tokens. One moment of achievement I hold dear from this challenge was when I finally understood how to pack every 8 integers from the piece square tables into one 64bit ulong, I used to practice competitive programming where I learned techniques like bit-masking, it felt really cool using the technique I learned before (bit-masking) to overcome this packing challenge. Learning about transposition tables, alpha beta pruning, quiescent search and move ordering was very informative and eye-opening to the world of chess programming and computer science in general. I would like to thank you, Sebastian Lague, for your efforts in organizing this creative challenge. I also extend my thanks to the community of the Discord server, they were super helpful and friendly throughout the whole duration of the challenge."},{"BotID":"Bot_584","AuthorName":"Arandomnoob","BotName":"Sentinel","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_585","AuthorName":"Zolt\u00E1n K\u00FCrti","BotName":"Negative Depth","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Search:\n-Negamax search\n-Quiescence search\n-Transposition table\n-Move ordering\n-Iterative deepening\n-Bugs\nEvaluation:\n-Material\n-Passed pawns\n-Extremely basic piece position scores\n-Bugs\n\nI am not joking about the bugs. It likes to blunder rooks and queens. I combined quiescence and regular search into one function that behaves as quiescence search for negatve depths. This saves on tokens but slows down the code a bit."},{"BotID":"Bot_586","AuthorName":"AMCR Studios (Heather Costello \u0026 Tesseract King)","BotName":"FINCh","SearchKind":"Some form of minimax search","EvalKind":"Machine learning evaluation function","Description":"The core of our bot is the evaluation heuristic. Some of the best game-playing engines in the world are powered by neural networks, like Leela Chess Zero. Surely we can recreate the same brilliant strategy in our limited space?\n\nWait, Lc0 has HOW many weights in its neural network?\n\nOk, we can trim down. First we need something to match against \u2013 the standard is Stockfish\u2019s evaluation heuristic, which tells you how far ahead White is in centipawns for a certain position. We can get a good amount of the way there just by counting material \u2013 how do we capture the residual? That is, how much does White\u2019s advantage come from position when material is disregarded?\n\nThis is the value we want to estimate. We want to make the most efficient use of our space. Neural networks like Lc0 have gigabytes of weights in their networks, and each of those weights is a high precision floating point number. We can\u2019t guarantee that a neural network is going to be using all of those bits efficiently, so it would be better to have fewer possible values for each weight, and more weights, to make sure we\u2019re using all our limited space. This is where quantized neural nets come in.\n\nQuantized neural nets restrict the range of values a weight can take. The most extreme version, of course, would be restricting to two values. This is exactly what we\u2019ve done! Using a package called larq, we trained our neural network to only use \u002B1 and -1 values. This way, we can implement everything in bitwise operations, and store our weights in unsigned 64 bit ints \u2013 64 binary weights per token is the best we can do.\n\nThe model isn\u2019t perfect by any means, but it gives us a vague understanding of positional value. Adding in the material value gives us a model to estimate Stockfish\u2019s evaluation, and that estimation is what the tree search is based around.\n"},{"BotID":"Bot_587","AuthorName":"wolfuhfuh","BotName":"Magnuth Carlthen","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Traditional chess bot approach, implementation heavily inspired by Tyrant, WindwallV4, Weiss, Alexandria."},{"BotID":"Bot_588","AuthorName":"Gabriel N.","BotName":"Mobilibot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This is my rushed \u0022\u0022\u0022improved\u0022\u0022\u0022 implementation of Tom7\u0027s Min_Oppn_Moves. It uses negmax evaluation of an equation that takes into account both side\u0027s available moves, and uses iterative deepening (there\u0027s something wrong with it, and I don\u0027t do time control with it very well, but it does it\u0027s job) along with quiecence search to better minimize opponent moves (or at least to have more available moves than the opponent). No material gain is ever considered by the bot.\n\nIt\u0027s honestly pretty frustrating to me honestly that I couldn\u0027t bring myself to implement attack tables in time for the tournament, since I wanted it to be able to check if the available moves are to attacked squares (to better judge mobility), or if the squares around each king are being threatened (to judge king safety), so I was unable to provide something more original than what you\u0027ve made in your videos. \n\nAlso, almost forgot to mention, but I really, really liked the idea of the competition. I wanted to do more stuff like that and make novel stuff I\u0027d get more proud of. It was pretty fun."},{"BotID":"Bot_589","AuthorName":"LadyOfSpades","BotName":"Planck Bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Made to be as minimalist as possible."},{"BotID":"Bot_590","AuthorName":"DawnLamp8","BotName":"DLComp2","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I tried to keep the number of tokens in my bot very low while making it still decent."},{"BotID":"Bot_591","AuthorName":"Antares (Github: Alex2262)","BotName":"Rigel","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Rigel is a very strong alpha-beta engine with many standard ideas and other more unique and original ideas sprinkled in. In order to abide by the token restrictions, much of the code is convoluted, but I have attempted to comment in some places to hopefully explain them. Overall the challenge was enjoyable but tiring, as trying to squeeze a token out or another Elo point out of the engine became arduous. My strategy was mainly to strengthen the search algorithm of the engine and use a decently standard evaluation consisting of only Piece Square Tables, material, and mobility. Although I have had prior experience programming a superhuman chess engine, developing Rigel under the token restriction was very different and required me to sacrifice a lot of ideas in place for smaller and possibly more efficient ones. In the end, I have used every last token provided, and Rigel should hopefully be a top competitor in the challenge. I hope it wins as it can serve as a didactic engine to illustrate what ideas are most beneficial\u2014since everything included was maximized for its Elo to size ratio. Finally, I would like to thank you for this challenge and opportunity for everyone to experience some chess engine development!"},{"BotID":"Bot_592","AuthorName":"Team Chark V1","BotName":"Chark Bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Only the coolest bot ever made! Thanks for putting this all together."},{"BotID":"Bot_593","AuthorName":"Steven He","BotName":"Guppy","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Represented pst values as 9 bit numbers (parity bit \u002B unsigned byte) in order to cram more data into each decimal.\n\nI started the challenge a bit late, but overall enjoyed the experience and learned quite a bit."},{"BotID":"Bot_594","AuthorName":"Dimitris Dallas","BotName":"FetaCheese_Bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Hello Sebastian, I am an old time fan, congratulations on everything you do. I was glad I took part in the challenge, really helped me with my chess understanding, I had never studied it before. I was also thankful for having a Token Capacity because I would never stop adding stuff before being completely satisfied with the performance and result. I also had fun with the unofficial live leaderboard, uploading my bot when I had a new version, even if I am not sure its working correctlly. Maybe in your next  challenge you could release an official leaderboard. Lastly, what you will see is a 4 weeks\u0027 work result, luckily I started late because, again, I would have spent all the time given until I am satisfied. Now, for the Bot, the FetaCheese_Bot:\nI was strongly based on your work and I expanded on it. The bot searches with a Negamax algorithm with alpha beta pruning and on zeroth depth it continues with a Quiescence search. Inside Negamax, along with Checkmate and Stalemate check, it also returns Min(0, beta) if a real board repetition position is evaluated. In the QSearch, it uses a Static Evaluation to compute a stand_pat score, and also applies Delta pruning in early game along with alpha beta pruning. I experimented with Big Delta pruning, also in early game, but performance fell so I left it out. Legal moves are ordered every time they are produced, at the start of the Think function, inside Negamax and inside QSearch. Move ordering is basic. If moves with same evaluation are returned, they are stored in a list and a random one is choosed.\n\nRegarding the Static Evaluation, it starts with Material Balance. In Early game it evaluates Center Control, which rewards Pawns, Knights and Bishops to move to middle Ranks and Files, using Central Manhattan Distance. In Endgame, the Static Evaluation has 2 branches. It either does MopUp Evaluation in case of Material imbalance, or if Material is balanced, it evaluates Pieces Mobility. Enemy\u0027s Mobility are evaluated with PseudoLegal moves from the same position with TrySkipTurn. I tried some other staff in the MopUp, like evaluating Manhattan Distance for other pieces along with King (Queen and Rooks). \n\nEndgame, and thus Early game with negation, is decided with 3 conditions. If 1) both players Material is \u003C= 1300(queen\u002Brook), 2) one player has been left with only the King (0 material) so the other side can have \u003E 1300 material and 3) pawnless game, if there are no pawns in the game for either side and so material can be \u003E1300 for both sides. All these conditions result to an Endgame posotion.\n\nLastly, all of it are used with Iterative Deepening, in which the best move of each iteration has priority in Move Ordering. There is also a last minute addition with dynamic Time Management rather than a constant preallocated time to search. It computes the time difference between RemainingTime and OpponentRemainingTime, and the TimeToThink is equal to Max(300 \u002B timeDiff/2, 300). A constant minimum of 300 is selected with trial and error and the timeDiff/2 makes good use of the extra time in clock while also staying ahead of your opponent. Search timeout is check in every move search in the main LegalMoves loop. Once it is elapsed, Iterative Deepening loop breaks.\n\nOverall my bot\u0027s capacity is 1021/1024."},{"BotID":"Bot_595","AuthorName":"sparemind","BotName":"myte","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Fairly standard alpha-beta search and evaluation that was intended to focus on losslessly compressing 64x64 score tables to use in evaluation, tuned using Texel\u0027s Tuning Method with gradient descent. \n\nSince the values in any single piece-square table generally span a range \u003C64, they can be compressed to 6 64-bit int bitmaps, with bitmap n representing the n\u0027th bit (i.e. 2^n). One additional table is then used to store the \u0022zero\u0022 values, as each table will span a different 64 range with a different baseline. As only (6 pieces * 2 phases) = 12 offsets are needed, this table also has free space to include extra data.\n\nIn particular, being lossless means it works well for including non-score data like piece game-phase weights, search reduction tables, etc. that depend on precise values, though these unfortunately didn\u0027t get to the point of implementation, nor were pawn-shield tables able to be included."},{"BotID":"Bot_596","AuthorName":"readerbij","BotName":"Terrible Bot","SearchKind":"Monte Carlo search (random playouts)","EvalKind":"Handcrafted evaluation function","Description":"Great challenge! Learned how to make my very first MCTS (although it is probably wrong somehow as the bot is terrible)"},{"BotID":"Bot_597","AuthorName":"Nia","BotName":"Rob\u00E9rto","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I wanted to have fun with this, so I made the eval function inspired by an rpg. It rates positions based on 5 stats, hp (how many pieces are there, aka how many hits it can take), attack (how many attacks are possible), defense (how many pieces are being defended), speed (how many squares can be traveled to), and dexterity (how many squares could be traveled to if there was no other pieces). I hope you like this presumably unique idea, even if it might not perform as well as if I included standard piece values. More info is in the comments of my code."},{"BotID":"Bot_598","AuthorName":"Benjamin Iserman","BotName":"WingBot","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"I\u0027ve tried to design a bot that performs no board analysis, instead relying only on heuristics (and single depth search for wins/losses) for evaluating moves."},{"BotID":"Bot_599","AuthorName":"ChaosWarrior","BotName":"ChaosBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_600","AuthorName":"Ahmad","BotName":"Edbd","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_601","AuthorName":"GMPrakhar","BotName":"NotThatBad","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"It was great, but would have been better if I didn\u0027t forget to develop this in my free time :) "},{"BotID":"Bot_602","AuthorName":"Connor Cahoon","BotName":"Itty Bitty Botty","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I wrote a bot that was better than I was, then started ripping things out until it was as small as possible. I did a few gross things to get it below 400 tokens. Debugging while I was first building the bot was super tedious, but I got through it. It\u0027s still not super good, but I couldn\u0027t easily train it against any truly good bots. \n\nBecause I removed the random elements, it tends to play super boring moves (Rb1...Ra1) I took advantage of this and made it take a very small time per move in hopes of causing the opponent to flag.\n\nIt\u0027s possible in ripping things out I\u0027ve let some flaw slip in. Hope not."},{"BotID":"Bot_603","AuthorName":"Noah","BotName":"Respect","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I didn\u0027t stray from the beaten path but definitely had a lot of fun with this challenge! It\u0027s beyond satisfying to find bugs, implement new things and watch your new and improved engine beat up its previous versions."},{"BotID":"Bot_604","AuthorName":"American Jeff","BotName":"Thunker Weed","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"late move reduction. razoring based on quiesence score. static evaluation based on mobility, attacks and piece square tables."},{"BotID":"Bot_605","AuthorName":"Giles Corey","BotName":"The Grandiloquent Intelligentsia of Magnanimous Strategem: A Prodigiously Resplendent Embodiment of Erudite Chess Esotericism, Exuding Enigmatic Brilliance and Sublime Eloquence Whilst Enchantingly Tempering the Hallowed Battlefield of Intellectual Duels, Endeavoring to Transcend Acumen and Ascend to the Pantheon of Learned Peregrinations with an Efficacious Arsenal of Foresight and Sagacity, Humbling Opponents with Refined Gallantry, and Beckoning Discerning Disciples to Witness the Manifest Veracity of its Ascent to a Formidable Elo Quintessence","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"It was fun"},{"BotID":"Bot_606","AuthorName":"connorf25","BotName":"ConniBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Pretty generic minmax algorithm with position modifiers. Would of liked to of fine-tuned the position numeric modifiers with Machine Learning but ran out of time."},{"BotID":"Bot_607","AuthorName":"Xenymor","BotName":"Andiefietebel","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This was my first time developing a chess engine. I had some major issues, which I just couldn\u0027t resolve, for example everything, which should bring improvement, like Transposition-Tables or Aspiration Windows just made things worse."},{"BotID":"Bot_608","AuthorName":"Noah","BotName":"Stale","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Really enjoyed the challenge, thanks so much for hosting this. This is my second entry. But I\u0027m afraid I\u0027ve created an algorithm so intelligent that it stalemates ON PURPOSE, just to disrespect its opponents. I really tried to convince my bot to play to its full potential and of course win the whole challenge by a landslide but it refuses, not wanting to waste its energy on such lowly competitors."},{"BotID":"Bot_609","AuthorName":"Sanjay","BotName":"Lol! Wont Win","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_610","AuthorName":"Popax21 \u0026 atpx8","BotName":"TinyHugeBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"TinyHugeBot consists of a 1.6KLOC custom chess engine, compressed into just\nabout 1000 tokens. It does this by leveraging APIs provided by the\nSystem.AppDomain class, which allows it to load compiled C# code at runtime.\nThe uncompressed chess engine, called HugeBot, is first compiled into a 18KB\n.dll file. The .dll file is then shrank down to ~11KB using a custom .dll\ncompressor called BotBuilder (1.8KLOC), which strips of all unnecessary\nmetadata in addition to performing some other optimizations (inlining\nmethods, etc.). This .dll is the compressed further into about 850 \u0060decimal\u0060\nliteral tokens (100 bits per token) using a custom RLE-like encoding scheme,\nand embedded into LaunchPad, which decompresses, loads and runs HugeBot.\n\nAll in all, TinyHugeBot was in active development for about one to two\nmonths, split about evenly between developing the chess engine and the\nsurrounding infrastructure. Note that the everything is rule compliant -\nHugeBot is loaded through the AppDomain class, which is in the allowed\nSystem namespace, and HugeBot itself also only uses allowed APIs. Special\ncare was also taken to ensure that BotBuilder doesn\u0027t enable any language\nfeatures which would provide an unfair advantage, like setting the\naggressive method optimization flags, which would usually require a\n(disallowed) compiler intrinsic attribute to enable. We know that we still\nmight be disqualified, but we had a lot of fun making this bot, and we hope\nthat it will at least be interesting enough to deserve a shoutout. :)\n\nHugeBot contains a chess engine with the following features:\n- a fail-soft NegaMax search inside a Iterative Deepening framework\n- a 240MB Transposition Table with 25165824 available slots\n- Quiescence Search (folded into the main search function)\n- Principle Variation Search\n- Late Move Reductions\n- check extensions\n- for non-PV nodes:\n    - Null Move Pruning\n    - Late Move Pruning\n    - (Reverse) Futility Pruning\n- for Q-search nodes:\n    - Delta Pruning\n    - SEE forward pruning\n- two-stage move ordering with selection sort:\n    - stored move from the TT (if available)\n    - MVV-LVA for captures, with promotions being ordered first\n    - for quiet moves:\n    - 4 slot killer table\n    - threat escape move check (determined by NMP earlier)\n    - Relative History Heuristic, including continuation / followup history\n      tables\n- incremental evaluation function using PeSTO PST tables\n\nShoutouts to the following engines / resources, as they served as invaluable\nreferences during the development of TinyHugeBot:\n- STRO4K by ONE-RANDOM-HUMAN (https://github.com/ONE-RANDOM-HUMAN/STRO4K)\n    - an awesome engine, served as a great reference for the first drafts of\n      THB in addition to being a strong test opponent\n- ice4 by MinusKelvin (https://github.com/MinusKelvin/ice4)\n    - same as STRO4K, served as a great reference for figuring out details\n      while also being considerably stronger than STRO4k\n- LiteBlue by Sidhant-Roymoulik\n    (https://github.com/Sidhant-Roymoulik/Chess-Challenge)\n    - an open-source bot submission for this challenge, served as a great\n      comparison tool to check how well we were doing\n- the Chess Programming Wiki (https://www.chessprogramming.org)\n    - the go-to source for all things chess programming, without it this bot\n      would have not made it far at all\n- the #tas_offtopic community from the Celeste Discord - this is where this\n  project started, and they also helped throughout the entire development\n  process\n\nOur bot is also on LiChess (2254 elo at the time of writing):\n- https://lichess.org/@/TinyHugeBot\nYou can find our source code here (repo\nwill be made public after the deadline):\n- https://github.com/Popax21/TinyHugeBot\n\nThanks for hosting this challenge, we all had a great time and are looking\nforward to the final video! :)\n- Popax21 \u0026 atpx8\n\nUPDATE (2.Oct. 9:35 CEST): Fixed an issue if the challenge DLL was renamed to something other than \u0060Chess-Challenge.dll\u0060; the pastebin code was updated to v2.1"},{"BotID":"Bot_611","AuthorName":"Fungi Forrest \u0026 Fedora Noah","BotName":"Splinter","SearchKind":"Some form of minimax search","EvalKind":"Machine learning evaluation function","Description":"We used tensorflow to train the bot in python. Training it to stockfish\u0027s evaluation of random board positions. We used a Alpha Beta MinMas with Quiesce to search Positions. Both of us are still learning with minimal formal programming classes."},{"BotID":"Bot_612","AuthorName":"Bit!","BotName":"SlowMo","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Thanks for the fun challange - I wish I had more time to work on my bot. \n\nMy bot uses a standard search approach: negamax \u002B alpha/beta pruning with quietsearch, a basic transposition table and iterative deepening.\n\nThe evaluation function might be interesting, it uses bitboards to prefer or avoid certain squares for each piecetype.\n\nIt struggles with finding deeper forced mates, and is generally \u0022uninspired\u0022 in positional play. It can\u0027t really improve its position and rather ay e.g. Ra1b1.\n\nIt is neither optimized for speed or token usage.\n\nI am really looking forward to the video conclusion. I would love to take part in a future challenge :)"},{"BotID":"Bot_613","AuthorName":"Gouuu","BotName":"Peeter 1","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This code is an amalgamation of the worst programming methods known to man inexorably joined in an unholy program. God has no hand in the creation of this abborrence. The fact that this code exit proves that God is either impotent to alter his universe or ignorant to the horrors taking place in his kingdom. This program is more than just wrongly coded. It is a physical declaration of mankind contempt for natural order It is hubris manifest.\n\ncool bot tho :)"},{"BotID":"Bot_614","AuthorName":"MinusKelvin, Analog Hors, Anonymous Contributor (wishes to be unnamed), Algorhythm, and Daniel Ke (DkeRee)","BotName":"Boychesser","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This was a lot of work! Developing Boychesser was much like developing a standard engine, and we ended up running over 4.2 million games for over 500 tests in the process. We were constantly surprised by the token saves we had to find to stay under the limit. Similar search features were combined, formulas were optimized with bit tricks, and control flow was abused to reclaim as much space as possible. The packing scheme for our evaluation function was especially versatile and token efficient, fitting 486 parameters into just 64 tokens. However, it was frustrating how many times a seemingly-innocuous token saving would cause a performance regression worth tens of Elo. Overall, we are very proud of what we\u0027ve done. We estimate Boychesser would be rated about 2750 Elo on CCRL Blitz, and hope that it does well in the competition. Thanks for hosting this challenge!"},{"BotID":"Bot_615","AuthorName":"Emanuele Sorce","BotName":"Anty","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"Experimental bot that uses the Ant Colony Optimization alghoritm, inspired by the behaviour of ants searching for food"},{"BotID":"Bot_616","AuthorName":"ATG","BotName":"Goldfinch","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Negascout algorithm with Iterative Deepening and Quiescence Search. I used a basic move ordering system that prioritised promotions and captures (MVV-LVA). There\u0027s a bug where the bot stalemates and draws in winning positions.\n\nThis was my first attempt at creating a chess engine and my first proper C# project. The Chess Programming Wiki was a livesaver. I used jw1912\u0027s evaluation function which was much more concise than my own. I would have liked to develop the bot further, but didn\u0027t have enough time."},{"BotID":"Bot_617","AuthorName":"ReiedLaw","BotName":"Hydra","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Strongly inspired by chessprogramming-wiki and with help of Selenaut\u0027s Discord explenation and his published bot"},{"BotID":"Bot_618","AuthorName":"Steaky","BotName":"Stockbrot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_619","AuthorName":"Geopardgame","BotName":"Bad Player","SearchKind":"Monte Carlo search (random playouts)","EvalKind":"Other","Description":""},{"BotID":"Bot_620","AuthorName":"Mat(t)hias","BotName":"Phoenix Chess","SearchKind":"Monte Carlo search (random playouts)","EvalKind":"Machine learning evaluation function","Description":"We used a handcrafted feature vector in combination with a supervised ML approach using Stockfish evaluations in our dataset."},{"BotID":"Bot_621","AuthorName":"Loev06","BotName":"BadAppleBot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Other","Description":"This bot should not be taken seriously as a chess bot. This bot plays the first 121 seconds of the YouTube video Bad Apple (https://www.youtube.com/watch?v=FtutLA63Cp8) using the BitboardHelper.VisualizeBitboard(ulong bitboard) function.\n\nI explained a bit more in the comment block in the file.\n\nIt was a fun challenge to come up with all sorts of lossless compression algorithms while being constrained by a token limit. I would encourage other people to attempt this challenge. It would be really cool if someone accomplishes playing the full 219 seconds video with 30 fps within the token limit."},{"BotID":"Bot_622","AuthorName":"Andrei Taropa","BotName":"R2D2","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"The bot is a negamax algorithm that uses iterative deepening to reach the final depth in the shortest time. As a last-minute improvement I added PVS search functionality, that seems to have improved the performance. At final depth it does a pseudo quiescence search (only looks for captures) 6 moves deep. As for the time management, it \u0022predicts\u0022 how long it will take to compute the next depth based on the previous one and decides if it has time to do it. \nThe challenge was very interesting because one has to optimise the code for speed, but also bot brain capacity. This resulted in the code not being too readable :)"},{"BotID":"Bot_623","AuthorName":"Loev06","BotName":"LoevBot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"I have been coding chess bots for a couple of years now (of which one earlier made using C#), so I got really excited when I saw your announcement for this challenge.\n\nYou can never really say a chess engine is finished. There are still so many algorithms I want to implement and there are still many places where tokens could be reduced, but this is the current version.\n\nI really enjoyed participating in this challenge and I\u0027m looking forward to the next one!"},{"BotID":"Bot_624","AuthorName":"Ethan Latymer (Sozius)","BotName":"Fool\u0027s Silver","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Not much unique elements, the main thing to mention is that I had it count up and evaluate board control based on which pieces on each side can get there, if both can, they contest wherein a calculation would be decided to see who could benefit from going there, if neither can no one gets that square. Don\u0027t expect much though, I made this in the free time of the past week having never used C# before (mainly use Javascript and occaisionally Java and C). Also that thing there prevented me from doing much more besides essentials."},{"BotID":"Bot_625","AuthorName":"lurendrei","BotName":"Bongcloud Bot","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"With its unmatched prowess in the first two moves of the bongcloud opening, Bongcloud Bot tantalizes opponents with the illusion of a strategic mastermind, although in reality those are the only moves it knows. \n\n...\n\nOn a more serious note, it\u0027s essentially a basic negamax algorithm with an evaluation function based on simple chess principles using a few tricks to use as few tokens as possible. The piece-square tables are for example coordinates represented as 64 bits, divided into two axis of 32 bits each, of which every 4 bits represent the score along their respective axis. This is not optimal as it lacks the granularity of assigning a value to each individual square, but far better than nothing, and more importantly, very token efficient. \n\nI apologize in advance for the bracket formatting (source: Java developer) and very unreadable code. Loved the challenge, looking forward to see the other contributions!"},{"BotID":"Bot_626","AuthorName":"JeffLegendPower","BotName":"drip leab","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"We started out with a raw minimax algorithm. Then, we moved to adding transposition tables, quiescence search, null move pruning. However, we ended up running out of things that we could fit in the token limit. I think it was a_randomnoob who thought of it first, but someone came up with the idea that piece square tables could be fit into the token limit by packing them into larger datatypes. We tried our hands at this, however didn\u0027t make much progress. When Tyrant released his compression, we were kind of blown out of the water (to now I still see a few token saves in his latest compression but out of time to test them :( ). This is when our crusade into an NN eval began. Eventually, we were able to fit a tiny NN into the token limit and still have a fair amount of tokens for search using packing and quantization. Although we ended up being able to fit an NN, our worries came true. It wasn\u0027t nearly as efficient as a typical HCE in terms of tokens and speed. There goes nearly 2 weeks... But this is when Gonumen came into the scene. He had finally perfected his new PSTs compression which was capable of saving 15-30 tokens over Tyrant\u0027s compression. This was major. But after a lot of rigorous testing (and time :tear:) it turns out that it lost us a good bit of elo. Although we probably could\u0027ve used those tokens for something, the elo loss combined with the lack of ideas that passed SPRTs that we could fit in the token limit, we decided to stick to using Tyrant\u0027s eval. We ended up fine tuning our own special version to be even more powerful than Tyrant\u0027s default eval and created many of our own small modifications to strengthen our bot even further. BUT........ we completely forgot that when testing SPRTs, we were using bounds for regressions, not for gaining. This lost us even more time. Now we only have 3 days to get everything working. Although we were able to put together a pretty competent bot, there\u0027s still have a lot of things I wish I could test. Overall, it was definitely quite the journey participating in this challenge. May the best man win!"},{"BotID":"Bot_627","AuthorName":"Pix","BotName":"Celluar Automaton Iterated","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"I made a diary of my experience with comments in code. \u003C3"},{"BotID":"Bot_628","AuthorName":"ToTheAnd (aka toanth)","BotName":"King G\u1D00\u1D0D\u0299\u1D0F\u1D1B \u2163","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"The noble King G\u1D00\u1D0D\u0299\u1D0F\u1D1B \u2163, ruling King of the Hill, has mustered a large army to fight off the vile invaders threatening his lands. A veteran of many battles, His Highness prefers to personally lead his troops, charging at his foes wit no heed for his own safety.\nThis radical approach to strategy has already cost the life of all of his ancestors, but the G\u1D00\u1D0D\u0299\u1D0F\u1D1B dynasty values courage above all else. Eager to prove once more that he is not a craven, the King will be found where the fighting is thickest!\nDespite this apparent foolishness, King G\u1D00\u1D0D\u0299\u1D0F\u1D1B \u2163 is a shrewd tactician and will mercilessly crush any pretender (Estimated Strength: \u003E 2000 Elo).\n\nThe file has been shortened to fit into the character limit of google docs (thanks google!).\nAs a consequence, it is missing most comments, statistics like nps, and the non-joke version with normal PeSTO PSQTs.\nI also hope I haven\u0027t introduced any bugs by aggressively removing non-functional characters.\nThe original code can be found on my github or with this pastebin link: https://pastebin.com/wyD1cRgu\n\nGithub link: https://github.com/toanth/Chess-Challenge"},{"BotID":"Bot_629","AuthorName":"StarJay","BotName":"Botje9000","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Spent to much time in search, and not enough in hce. Still hadd 200 tokens left for that :/\nIt only looks at piece scores and how much squares are attacked. \n\nThanks for organising, while this was a big rabbit hole(only scratched the surface) I\u0027m happy to complete and fill in an entry. "},{"BotID":"Bot_630","AuthorName":"","BotName":"josh-chess","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_631","AuthorName":"Jan Stachurski","BotName":"OppToss","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"Taking part in the challenge was super fun, and your videos were really helpful while creating my bot!"},{"BotID":"Bot_632","AuthorName":"Josh \u0026 Laurin","BotName":"Dried Cod","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This is the Github Repo: https://github.com/joshuajeschek/Chess-Challenge\nThe bot itself is pretty standard, but I spent a quite a bit of time on 2 things:\nA benchmark workflow using github actions and the timing control, which sets the search depth according to where in the match we are at a certain point of time.\n\nThe Github Workflow can benchmark the bot against a multitude of opponents, including Stockfish and your Chess Coding Adventure Bot (https://github.com/SebLague/Chess-Coding-Adventure). It has default settings that are applied on pull requests and pushes on the main branch, and it can be controlled via commit messages and comments on pull requests. You can check out some pull request to see how it operates:\nhttps://github.com/joshuajeschek/Chess-Challenge/pull/12\nhttps://github.com/joshuajeschek/Chess-Challenge/pull/13\nIt makes the process faster by splitting the benchmark into multiple threads.\n\nSecondly, we thought of a way to control the depth of the bot based on the time in the match, but the newest version of that did not perform as well. You can check it out on the timing control branch: https://github.com/joshuajeschek/Chess-Challenge/tree/timing-control\nit was supposed to follow the curve found in the readme. My benchmark showed that it was slower than the previous version though, thus i aborted that. However, there is still a bit of logic there, in the current version of the bot (the one i am submitting) which aims to create in bigger think times in the beginning of the match, using a mathematical function rather than if statements etc.\n\nI hope you enjoy looking at all the submissions, I am sure there are some incredibly creative solutions! :D\n\nPS: The name stems from a wordplay on Stockfish ;)"},{"BotID":"Bot_633","AuthorName":"MrPelluke","BotName":"LadyLuckGuidesMyMinMaxSearch","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"This is a very weird bot, that I did in four hours, because I hadn\u0027t access to my computer when I rememberd that I didn\u0027t submit my bot for this challenge, so I remade a concept on my laptop from scratch. It combines MinMax with randomness."},{"BotID":"Bot_634","AuthorName":"vakqDev","BotName":"AeroBot","SearchKind":"Other / Idk","EvalKind":"Handcrafted evaluation function","Description":"I think really fast with no way of putting it into words so I DONT KNOW!! lol but I used your evil bot as a base and built upon that, It\u0027s very hastily put together because I forgot about the whole competition until about 30 minutes ago... haha time management!"},{"BotID":"Bot_635","AuthorName":"Stelio Dalakas","BotName":"BotTheBuilder","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":""},{"BotID":"Bot_636","AuthorName":"Mateo Marenco","BotName":"CarlitosDarwin","SearchKind":"Other / Idk","EvalKind":"Other","Description":"I mostly implemented basic ideas from the chess programming wiki and your videos. I added some dubious patches to prevent it from doing crazy stuff (like going for quick repetitions or walking the king out to the open). I tried adding a transposition table + iterative deepening but after so many bugs I just chose to keep things simple and do a single search, whose depth depends on the time left. The evaluation function is very basic and purely materialistic. I also went for a tapered eval which is not too interesting, but at least it disencourages the king to go crazy at the beginning of the game. I also added a slight random component to prevent completely deterministic behavior."},{"BotID":"Bot_637","AuthorName":"Erik Fast","BotName":"MiniMagnus","SearchKind":"Some form of minimax search","EvalKind":"Handcrafted evaluation function","Description":"(Late entry)"},{"BotID":"Bot_638","AuthorName":"odin7053@discord","BotName":"DevilBot","SearchKind":"No search (chooses what move to play based only on current position)","EvalKind":"Handcrafted evaluation function","Description":"See SatanBotEntry (this is 55 token version)"}]